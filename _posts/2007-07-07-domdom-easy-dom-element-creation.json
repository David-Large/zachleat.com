{"disqus":{"path":"/web/domdom-easy-dom-element-creation/","commentCount":9,"comments":[{"postId":"887461590","parentPostId":null,"date":"2007-07-12T19:40:28Z","author":"Stefan Schuster","avatar":"https://www.gravatar.com/avatar/34a0c0949dc2479d64b89727983b57a1?d=mm&s=60","message":"<p>Great Work!</p><p>DOMDom Dojo 0.9 Port if anybody is interested:</p><p>var ADAPTER = {<br>setStyle: <a href=\"http://dojo.style\" rel=\"nofollow noopener\" title=\"dojo.style\">dojo.style</a>,<br>addClass: dojo.addClass,<br>isString: dojo.isString,<br>isArray: dojo.isArray,<br>isNumber: isFinite,<br>isObject: dojo.isObject,<br>get: dojo.byId<br>};</p>","replies":[]},{"postId":"887461594","parentPostId":null,"date":"2007-07-13T01:37:28Z","author":"Jack Slocum","avatar":"https://www.gravatar.com/avatar/8d5143837c3ac0228d67cb87bc6bb459?d=mm&s=60","message":"<p>Hi Zach,</p><p>As noted on Ajaxian, DomHelper has a less verbose syntax available if you don't like the default.</p><p>Ext.DomHelper.append( myDiv, {<br>   style: 'width:100%;border:1px solid blue;',<br>   cls: 'testClass',<br>   cn: {tag: 'a', href: '<a href=\"http://www.google.com/'\" rel=\"nofollow noopener\" title=\"http://www.google.com/'\">http://www.google.com/'</a>, cn: {tag: 'span', html: 'Google' }}<br>});</p>","replies":[]},{"postId":"887461591","parentPostId":null,"date":"2007-07-13T13:11:15Z","author":"Klaus Hartl","avatar":"https://www.gravatar.com/avatar/e4903f6a82e47293d4762294c8299147?d=mm&s=60","message":"<p>Zach,</p><p>using selectors for DOM creation is <em>really slick</em>!</p><p>We were discussing a port to jQuery and here are some ideas. For attribute creation I'd stick to correct CSS selector syntax:</p><p><code>'input[name=\"myTextBox\"][type=\"text\"][maxlength=\"5\"]'</code></p><p>instead of</p><p><code>'input[name=\"myTextBox\",type=\"text\",maxlength=\"5\"]'</code></p><p>And for inline styles why not using (seems to be more consistent to me):</p><p>'div[style=\"height: 80px; color: #f90; border: 1px solid #000;\"]'</p><p>instead of</p><p>'div{height=80px,color=#f90,border=1px solid #000}' ?</p><p>Pure CSS selectors could also be used for creating child elements:</p><p><code>div &gt; span + span</code></p><p>instead of</p><p><code>{ 'div': [ 'span', 'span' ] }</code></p><p>Just a few ideas... The huge advantage I see with that is that one literally wouldn't have to remember anything special using the DOM creator if already familiar with CSS selectors. And you would have to write less documentation :-)</p><p>By the way, one of your examples is not very well chosen, the one with <code>'div span div'</code>. A span element may not contain block level elements, thus the resulting DOM would not look like in the given example, but like the following due to browser tag soup parsers closing the span before the div starts:</p><p><code>&lt;div&gt;<br>    &lt;span&gt;&lt;/span&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>&lt;/div&gt;</code></p><p>Great work!</p>","replies":[]},{"postId":"887461592","parentPostId":null,"date":"2007-07-14T19:51:15Z","author":"Zach Leatherman","avatar":"https://www.gravatar.com/avatar/e1899004c71c7043343196103e210be3?d=mm&s=60","message":"<p>@Stefan: thanks for the Dojo Port!</p><p>@Jack: Yeah, that syntax is less verbose, but I guess the intention of this class was to provide a syntax that minimized the amount of proprietary keywords in it.  Less documentation, as Klaus says.</p><p>@Klaus: Good suggestions!  I will definitely take those to heart.  I suppose the attribute list separated by comments is a leftover from my XPath days.  I see the W3 spec definitely agrees with you.</p><p>The style attribute is supported both ways you have listed there, and you can mix and match if you so choose (but I doubt anyone would)</p><p>With the child selectors, how you would you have siblings that would each have children?   I don't see anything in the CSS selector spec on nesting or parenthetical grouping.</p><p>div &gt; (span a) + (span a)</p><p>&lt;div&gt;&lt;span&gt;&lt;a/&gt;&lt;/span&gt;&lt;span&gt;&lt;a/&gt;&lt;/span&gt;&lt;/div&gt;</p><p>and not</p><p>div &gt; span a + span a</p><p>&lt;div&gt;&lt;span&gt;&lt;a/&gt;&lt;span&gt;&lt;a/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;</p><p>As a note to anyone reading, div span div does output as predicted in both DOM and HTML Fragment modes:</p><p>&lt;div&gt;&lt;span&gt;&lt;div&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</p>","replies":[]},{"postId":"887461596","parentPostId":null,"date":"2007-07-14T20:50:29Z","author":"Klaus Hartl","avatar":"https://www.gravatar.com/avatar/e4903f6a82e47293d4762294c8299147?d=mm&s=60","message":"<p>Nonetheless it is invalid HTML. Scripting on top of an invalid DOM won't make your life easier and I don't see the point in promoting bad practice!</p>","replies":[]},{"postId":"887461595","parentPostId":null,"date":"2007-07-14T20:54:17Z","author":"Klaus Hartl","avatar":"https://www.gravatar.com/avatar/e4903f6a82e47293d4762294c8299147?d=mm&s=60","message":"<p>That's the standards advocate in me speaking ;-)</p>","replies":[]},{"postId":"887461597","parentPostId":null,"date":"2007-07-18T16:20:59Z","author":"vikas","avatar":"https://www.gravatar.com/avatar/f6ca7f80c9dbcda4979c97e27202ce2b?d=mm&s=60","message":"<p>DomHelper has special code for table broken implementation on IE. IS that covered</p>","replies":[]},{"postId":"887461599","parentPostId":null,"date":"2007-07-26T03:58:20Z","author":"Zach Leatherman","avatar":"https://www.gravatar.com/avatar/e1899004c71c7043343196103e210be3?d=mm&s=60","message":"<p>Hey vikas:</p><p>Unfortunately, I have not yet built that into DOMDom, but will certainly tackle it when I also complete some of the changes Klaus suggested.  Look for the next release soon!</p><p>Thanks, Zach</p>","replies":[]},{"postId":"887461598","parentPostId":null,"date":"2008-06-13T22:44:17Z","author":"Josh","avatar":"https://www.gravatar.com/avatar/927c04b8bc6cd72df207741b2785d878?d=mm&s=60","message":"<p>Surprised noone else ran into this.  I wanted to pass a sring as the parent to DOMDom.append when the template is compiled but compiledExecute does not handle that.  So on line 381 I added this block of code taken from elementExecute():</p><p><code><br>        if( parent )<br>        {<br>            if( ADAPTER.isString( parent ) ) parent = ADAPTER.get( parent );<br>            if( mode == MODE_REPLACE )<br>                parent.innerHTML = '';<br>        }<br></code></p><p>And then I could pass the parent as a string and the world was whole again.  :)</p>","replies":[]}]}}