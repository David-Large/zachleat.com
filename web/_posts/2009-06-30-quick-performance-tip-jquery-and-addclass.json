{"disqus":{"path":"/web/quick-performance-tip-jquery-and-addclass/","commentCount":2,"comments":[{"postId":"887461908","parentPostId":null,"date":"2009-08-12T11:36:45Z","author":"Richard Neil Ilagan","avatar":"https://www.gravatar.com/avatar/74a834ceebe2811b40ee39e7075c6cb3?d=mm&s=60","message":"<p>Great insight, and kudos to you for actually delving into the underlying source code.</p><p>I, myself, have been writing some code that dynamically modifies classes of some HTML elements as part of an event procedure (namely, hover in and out). As you can imagine, the performance load on this can get pretty hefty; it increases proportionally the more classes you add in and the more elements you modify in one go. This is most notable in Internet Explorer too.</p><p>While your aforementioned workaround for the .addClass() procedure would definitely work better in my opinion, I also wanted to ask if there was a better way to implement .removeClass() as well. Manually doing this meant string splitting and concatenation, which, I assume, is what the function already does.</p><p>Good work, and definitely bookmarking this.</p>","replies":[]},{"postId":"887461909","parentPostId":null,"date":"2009-08-14T03:24:25Z","author":"Zach Leatherman","avatar":"https://www.gravatar.com/avatar/e1899004c71c7043343196103e210be3?d=mm&s=60","message":"<p>Richard,<br>I'm surprised you're seeing performance issues inside callbacks for hover events.  How many nodes are in the DOM tree you're modifying the className for?</p><p>Actually, it looks like the removeClass method is optimized, and only sets the string once, instead of multiple times.  It shouldn't need any changes.</p><p></p><pre>elem.className = classNames !== undefined ?<br>jQuery.grep(elem.className.split(/\\s+/), function(className){<br>return !jQuery.className.has( classNames, className );<br>}).join(\" \") :<br>\"\";<br></pre>","replies":[]}]}}