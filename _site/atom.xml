<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Web 3.0, 6 Bladed Razors, 7 Minute Abs</title>
	<link href="http://zachleat.com/web/atom.xml" rel="self"/>
	<link href="http://zachleat.com/web/"/>
	<updated>2013-02-25T22:54:12-06:00</updated>
	<id>http://nebraskajs.com/</id>
	<author>
		<name>Zach Leatherman</name>
		<email>zachleat@zachleat.com</email>
	</author>

	
	<entry>
		<title>A Web Developer Fumbling with Social Media</title>
		<link href="http://nebraskajs.com/fumbling-with-social-media/"/>
		<updated>2013-01-26T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/fumbling-with-social-media</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;As a curious web developer that’s moderately obsessed with statistics, I decided to go back and look at my history of side projects, blog posts, and other junk I’ve posted on twitter to see what has had the biggest impact on my ‘social reach.’ Yeah, I know. It felt wrong typing ‘social reach’—I’ll put a dollar in the jar. I’ll probably owe a few of those before this post is done.&lt;/p&gt;

&lt;p&gt;It’s a common sentiment that as developers we should focus on &lt;em&gt;making cool stuff&lt;/em&gt; and the rest will solve itself. While that has been my general plan for my career and side projects, in hindsight I don’t believe that to be the complete truth. I think developers should spend time on self marketing—larger professional networks (not just social networks) lead to more opportunities.&lt;/p&gt;

&lt;p&gt;So as a blind squirrel, I come to you with the nuts I’ve found: &lt;strong&gt;seven events that have bumped my network size and what I’ve learned from studying them&lt;/strong&gt;. Note that Facebook is not mentioned here. I don’t use Facebook for career development.&lt;/p&gt;

&lt;h2&gt;Share and Be Shared&lt;/h2&gt;

&lt;p&gt;Out of those seven events, three were the direct result of Mr. Paul Irish. While I have no idea what I did to get in Paul’s good graces—I appreciate his concerted effort to share &lt;a href=&quot;http://paulirish.com/2011/web-browser-frontend-and-standards-feeds-to-follow/&quot;&gt;RSS feeds&lt;/a&gt; (Event 1), &lt;a href=&quot;http://paulirish.com/2012/developers-we-admire/&quot;&gt;people to follow on Twitter&lt;/a&gt; (Event 2), and &lt;a href=&quot;https://plus.google.com/113127438179392830442/posts/T2VqiobsvLF&quot;&gt;Google circles&lt;/a&gt; (Event 3). Paul increases the number of people consuming web development content which leads to more well informed developers. &lt;em&gt;A rising tide lifts all boats.&lt;/em&gt; This is something we can all do. Look for some similar posts from me soon.&lt;/p&gt;

&lt;h2&gt;Silos are Lonely&lt;/h2&gt;

&lt;p&gt;Trailblazing can lead to isolation. Solve problems collaboratively or competitively—don’t solve your own problems alone.&lt;/p&gt;

&lt;p&gt;After &lt;a href=&quot;http://www.zachleat.com/web/bigtext-makes-text-big/&quot;&gt;BigText&lt;/a&gt; came out, I was getting &lt;code&gt;2&lt;/code&gt; RSS subscribers per day. Four months later when Paravel released &lt;a href=&quot;fittextjs.com&quot;&gt;FitText&lt;/a&gt; (Event #4) and linked to BigText that number jumped to &lt;code&gt;6&lt;/code&gt;. Even though the two plugins were competitors, we were both trying to solve a similar problem and our growth became intertwined.&lt;/p&gt;

&lt;h2&gt;Concentrate on the Right Network&lt;/h2&gt;

&lt;p&gt;It’s a lot easier to get an RSS subscriber or get circled on Google than it is to get someone to follow you on Twitter. It would seem that Twitter users curate their Twitter friends very closely since it’s one big unconfigurable stream (don’t get me started about how useless lists are). RSS and Google both let you self-organize your incoming posts in such a way that makes it easier to ignore content without unsubscribing.&lt;/p&gt;

&lt;p&gt;If I had to choose, I’d take a Twitter follower over an RSS feed subscriber over a Google follower. But it ain’t a zero sum game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Average RSS feed subscribers per day (2.4 years): 4.1&lt;/li&gt;
&lt;li&gt;Average Google followers per day (1.1 years): 2.03&lt;/li&gt;
&lt;li&gt;Average Twitter followers per day (4.3 years): 1.09&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Name-drop Yourself&lt;/h2&gt;

&lt;p&gt;Plaster your name on everything you do. Link to your Twitter account and RSS feeds.&lt;/p&gt;

&lt;p&gt;I’ve screwed the pooch on this quite often—most notably on &lt;a href=&quot;https://github.com/filamentgroup/SocialCount&quot;&gt;SocialCount&lt;/a&gt; and BigText especially. I’ve had people say to me: “Oh—SocialCount? You built that?” Obviously not ideal. Personally, I felt that both of those plugins were higher quality than &lt;a href=&quot;http://parseIntimate.com&quot;&gt;parseIntimate&lt;/a&gt; (Event #5), but parseIntimate had my twitter handle right on the front which bumped my followers more than SocialCount or BigText (prior to FitText).&lt;/p&gt;

&lt;h2&gt;Align Career with Community&lt;/h2&gt;

&lt;p&gt;Despite my ghost town of a profile on Google , my circled count jumped when I joined Filament Group (Event #6). Of course, working for a company that is so heavily invested in the community and open source is great.&lt;/p&gt;

&lt;h2&gt;Give Talks and Encouragement&lt;/h2&gt;

&lt;p&gt;For the &lt;a href=&quot;http://f2em.com/&quot;&gt;Front End Engineering Manifesto&lt;/a&gt; (Event #7) I followed my own advice and put my twitter handle on both the top and bottom of the presentation and added SocialCount widgets for easy sharing. However, F2EM almost didn’t see the light of day.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If &lt;a href=&quot;https://twitter.com/rversaw&quot;&gt;Ryan Versaw&lt;/a&gt; hadn’t personally encouraged me to present a topic at Nebraska Code Camp, I wouldn’t have created the presentation.&lt;/li&gt;
&lt;li&gt;After giving the talk I sat on the content because I felt it was a little too preachy and dogmatic and was nervous about publicizing it. About 17 months later, &lt;a href=&quot;https://twitter.com/toddmparker&quot;&gt;Todd Parker&lt;/a&gt; stumbled onto it and encouraged me to release it.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Sometimes you just need a little push and I was lucky to get it from those guys. And at the end I’m very glad I posted it—F2EM was one of my most successful projects.&lt;/p&gt;

&lt;p&gt;While I haven’t dipped my toe into the professional speaking circuit, I should thank &lt;a href=&quot;https://twitter.com/reybango&quot;&gt;Rey Bango&lt;/a&gt; for encouraging me to submit a talk to the jQuery Conference awhile back. I’ll dive in some day Rey!&lt;/p&gt;

&lt;p&gt;I’ll keep my eyes open for someone that I can give a little push to and I encourage you to do the same. If you need my help or advice, I’d be glad to do what I can to help. Hit me up on &lt;a href=&quot;https://twitter.com/zachleat&quot;&gt;Twitter&lt;/a&gt; or on &lt;a href=&quot;https://twitter.com/zachleat&quot;&gt;Google Plus&lt;/a&gt;.&lt;/p&gt;



&lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js&quot;&gt; {&quot;dataSourceUrl&quot;:&quot;//docs.google.com/spreadsheet/tq?key=0Alz1CG9ZSGbWdDZtUml2TmhWYXhGeFhUMU1CMmgyRGc&amp;#038;transpose=0&amp;#038;headers=1&amp;#038;merge=COLS&amp;#038;range=A1%3AA45%2CB1%3AB45%2CC1%3AC45%2CD1%3AD45&amp;#038;gid=0&amp;#038;pub=1&quot;,&quot;options&quot;:{&quot;displayAnnotations&quot;:false,&quot;titleTextStyle&quot;:{&quot;fontSize&quot;:16},&quot;animation&quot;:{&quot;duration&quot;:0},&quot;displayRangeSelector&quot;:false,&quot;hAxis&quot;:{&quot;useFormatFromData&quot;:true,&quot;minValue&quot;:null,&quot;viewWindow&quot;:{&quot;min&quot;:null,&quot;max&quot;:null},&quot;maxValue&quot;:null},&quot;wmode&quot;:&quot;opaque&quot;,&quot;vAxes&quot;:[{&quot;useFormatFromData&quot;:true,&quot;minValue&quot;:null,&quot;viewWindow&quot;:{&quot;min&quot;:null,&quot;max&quot;:null},&quot;maxValue&quot;:null},{&quot;useFormatFromData&quot;:true,&quot;minValue&quot;:null,&quot;viewWindow&quot;:{&quot;min&quot;:null,&quot;max&quot;:null},&quot;maxValue&quot;:null}],&quot;booleanRole&quot;:&quot;certainty&quot;,&quot;title&quot;:&quot;Chart title&quot;,&quot;scaleType&quot;:&quot;fixed&quot;,&quot;legend&quot;:&quot;none&quot;,&quot;thickness&quot;:&quot;4&quot;,&quot;displayZoomButtons&quot;:false,&quot;width&quot;:580,&quot;height&quot;:200},&quot;state&quot;:{},&quot;view&quot;:{},&quot;chartType&quot;:&quot;AnnotatedTimeLine&quot;,&quot;chartName&quot;:&quot;Fumbling on Social Media&quot;} &lt;/script&gt;


&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/ccc?key=0Alz1CG9ZSGbWdDZtUml2TmhWYXhGeFhUMU1CMmgyRGc&quot;&gt;Full data available on Google Spreadsheets&lt;/a&gt;. RSS subscriber data provided by &lt;a href=&quot;http://feedburner.google.com/&quot;&gt;Feedburner&lt;/a&gt; (even though my first post was in 2007, I switched from naked RSS in 2010). Twitter data was provided by &lt;a href=&quot;http://twittercounter.com/&quot;&gt;TwitterCounter&lt;/a&gt; and Google data by &lt;a href=&quot;http://socialstatistics.com/&quot;&gt;Social Statistics&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>SocialCount, Faster &#038; Lighter Social Networking Widgets</title>
		<link href="http://nebraskajs.com/socialcount/"/>
		<updated>2012-11-27T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/socialcount</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;I’m excited to let you guys know that my first &lt;a href=&quot;http://filamentgroup.com&quot;&gt;Filament Group&lt;/a&gt; open source project was released. I made the move to Filament to both allow more client/open-source crossover work and to collaborate with some great Front End Engineers. &lt;em&gt;SocialCount&lt;/em&gt; is the first public evidence of that goal.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;SocialCount is a small jQuery plugin for progressively enhanced, lazy loaded, mobile friendly social networking widgets.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Third party JavaScript is one of the biggest challenges we face in our quest for high performance web sites and hopefully SocialCount will help tame the slothful beast.&lt;/p&gt;

&lt;p&gt;Astute readers may recognize SocialCount from the implementation on &lt;a href=&quot;http://f2em.com&quot;&gt;A Front End Engineer’s Manifesto&lt;/a&gt; (page 2 and the footer).&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://filamentgroup.com/lab/socialcount/&quot;&gt;Filament Group Lab Post&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;a href=&quot;http://github.com/filamentgroup/socialcount/&quot;&gt;Contribute on GitHub&lt;/a&gt;&lt;/h2&gt;
</content>
 </entry>
 
	<entry>
		<title>A Front End Engineer&#8217;s Manifesto</title>
		<link href="http://nebraskajs.com/manifesto/"/>
		<updated>2012-09-02T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/manifesto</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Early last year at Nebraska Code Camp 2011, I gave a talk to a bunch of .NET developers about my own personal perspective on the world of Front End Engineering.&lt;/p&gt;

&lt;p&gt;True to form, I developed the slide deck for the web using &lt;a href=&quot;/web/bigtext-makes-text-big/&quot;&gt;BigText&lt;/a&gt;, &lt;a href=&quot;http://christophercliff.github.com/sausage/&quot;&gt;sausage.js&lt;/a&gt;, and a few other self-developed but yet-to-be released plugins. I uploaded it &lt;em&gt;world wide&lt;/em&gt; for my presentation but never published the URL publicly. Unexpectedly, last week a developer from France found it and &lt;a href=&quot;https://twitter.com/NumEricR/status/239298110701068288&quot;&gt;shared it on Twitter&lt;/a&gt;. Well, the cat is out of the bag.&lt;/p&gt;

&lt;p&gt;I’ve been reluctant to share the slides because I certainly don’t want developers to take them as dogmatic truth. Rather, I’d love for people to see a forest using trees they’ve planted themselves. Try to take a step back and see the big picture when you’re problem solving on the front end and figure out what’s important to you.&lt;/p&gt;

&lt;p&gt;So with a bit of trepidation but without further adieu:&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://f2em.com&quot;&gt;f2em.com, A Front End Engineer’s Manifesto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you’d like to see this talk live, let me know in the comments.&lt;/p&gt;

&lt;p&gt;The site is also available on &lt;a href=&quot;https://github.com/zachleat/f2em.com&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Talk Description&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;In the fast paced world of Front End Engineering, change reigns supreme. Dormant for years, the Browser Wars are back and have broken web development wide open. Led by competing vendors championing their own implementations of HTML5, CSS3, and other Web Standards, they’re unchaining us from the desktop computing environment. We’re seeing web browsers in our favorite Mobile Phones, E-Book Readers, and Tablet devices. Does your web site work with the Android Browser? On the iPad? How about the Kindle browser? IE9? Do you even know what version Google Chrome is on?&lt;/p&gt;

&lt;p&gt;As web programmers, how do we keep up with this blistering, nauseating pace while still taking time to improve our skills? I’ll go through a set of principles and guidelines I use to simplify the world of Front End Engineering. These criteria will help you write better future-compatible flux-resistant code. They will help you evaluate new toolsets, APIs, frameworks, and even file formats and codecs. They will improve the quality of your web sites and applications.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Many thanks to &lt;a href=&quot;http://twitter.com/natekoechley&quot;&gt;Nate Koechley&lt;/a&gt;, who influenced some of this manifesto with his talk on &lt;a href=&quot;http://www.youtube.com/watch?v=B9n3Fy7rJmA&quot;&gt;Professional Front End Engineering&lt;/a&gt;, and to the countless other developers and designers who have made equally important community contributions.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>CSS3 <span class="widow">Job Transition</span></title>
		<link href="http://nebraskajs.com/css3-job-transition/"/>
		<updated>2012-05-16T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/css3-job-transition</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;I’m extremely excited to announce that I have accepted a full time position with &lt;a href=&quot;http://filamentgroup.com/&quot;&gt;Filament Group&lt;/a&gt;. I will be working alongside web developer titans of industry &lt;a href=&quot;http://twitter.com/toddmparker&quot;&gt;Todd Parker&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/scottjehl&quot;&gt;Scott Jehl&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/wilto&quot;&gt;Mat ‘Wilto’ Marquis&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/pattytoland&quot;&gt;Patty Toland&lt;/a&gt;, and &lt;a href=&quot;http://twitter.com/maggiewachs&quot;&gt;Maggie Costello Wachs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#zachleat {
  transition-property: employment;
  transition-delay: 1209600s; /* 14d */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’ve been living under a block-level element and aren’t familiar with Filament Group, I’m sure you’re familiar with a few of their contributions to the web development world. They’re well known for their advocacy and real world application of development practices that are important for the future of the web: Accessibility, Progressive Enhancement, and Responsive Design. They’ve literally &lt;a href=&quot;http://filamentgroup.com/dwpe/&quot;&gt;written the book on Progressive Enhancement&lt;/a&gt;, and their recent redesign of the &lt;a href=&quot;http://bostonglobe.com/&quot;&gt;Boston Globe&lt;/a&gt; was one of the first major large scale implementations of Responsive Design. If that weren’t enough, they are also leading the development of the &lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jQuery Mobile&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Woooooo!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Let&#8217;s get parseIntimate.</title>
		<link href="http://nebraskajs.com/lets-get-parseintimate/"/>
		<updated>2012-02-13T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/lets-get-parseintimate</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This Valentine’s Day, spend a little quality time with JavaScript. Don’t be afraid to &lt;a href=&quot;http://parseintimate.com&quot;&gt;get parseIntimate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In all seriousness, I do still see new JavaScript developers that are unaware of the parseInt problem. I’m hoping this will raise awareness or failing that at least make some people smile.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Placeholder Title for Article about <span class="widow">HTML5 Placeholders</span></title>
		<link href="http://nebraskajs.com/placeholder/"/>
		<updated>2012-02-05T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/placeholder</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>Deferreds and a Better <span class="widow">Geolocation API</span></title>
		<link href="http://nebraskajs.com/deferred-geolocation/"/>
		<updated>2011-11-07T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/deferred-geolocation</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Warning, this article is intended for Deferred unbelievers to convince them that Deferred objects are both easy and useful. If you’re already a Deferred object expert, you might want to skip this one.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Earlier this year I was given the opportunity to attend the jQuery Conference in San Francisco. I was delighted to go, able to finally meet some of the JavaScript greats I’d been stalking following online for years.&lt;/p&gt;

&lt;p&gt;Looking back on the conference, the one presentation that had the &lt;strong&gt;biggest impact on the way that I code&lt;/strong&gt; had to have been &lt;a href=&quot;https://twitter.com/danheberden&quot;&gt;Dan Heberden&lt;/a&gt;‘s “&lt;a href=&quot;http://danheberden.com/presentations/deferreds-putting-laziness-to-work/&quot;&gt;Deferreds, Putting Laziness to Work.&lt;/a&gt;” (I would be remiss if I didn’t also mention inspiration from a &lt;a href=&quot;http://speakerdeck.com/u/eliperelman/p/jquery-deferreds-and-promises&quot;&gt;recent presentation&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/eliperelman&quot;&gt;Eli Perelman&lt;/a&gt; at the &lt;a href=&quot;http://www.meetup.com/jquery-omaha/&quot;&gt;Omaha jQuery Meetup&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;At first, Deferred objects sound scary. I can assure you that they’re actually incredibly easy and incredibly useful. Today we’ll go through the simple task of &lt;strong&gt;reworking the &lt;a href=&quot;http://www.w3.org/TR/geolocation-API/&quot;&gt;Geolocation API&lt;/a&gt; to use jQuery Deferred objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here is the standard Geolocation API to retrieve the user’s current position:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;navigator.geolocation.getCurrentPosition(function(position) {
  // success
}, function(error) {
  // failure
}, {
  // options
  enableHighAccuracy: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the above API is called, a prompt is shown to the user asking if they want to divulge their location information to the domain of the currently active web site. Typically this prompt is a non-blocking asynchronous operation (although not explicitly defined in the specification).&lt;/p&gt;

&lt;p&gt;Let’s go ahead and change it to use a jQuery Deferred object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getCurrentPositionDeferred(options) {
  var deferred = $.Deferred();
&amp;amp;nbsp;
  navigator.geolocation.getCurrentPosition(deferred.resolve, deferred.reject, options);
&amp;amp;nbsp;
  return deferred.promise();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the success callback is replaced by the deferred object’s resolve method and the error callback is replaced by the reject method. All of our function arguments are removed from the API. We’re left with one simple options argument.&lt;/p&gt;

&lt;p&gt;This allows us to do things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getCurrentPositionDeferred({
  enableHighAccuracy: true
}).done(function() {
  // success
}).fail(function() {
  // failure
}).always(function() {
  // executes no matter what happens. I've used this to hide loading messages.
});
// You can add an arbitrary number of callbacks using done, fail, or always.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could also use &lt;code&gt;$.when&lt;/code&gt; to run code upon completion of two arbitrary and contrived operations like a Geolocation call and an Ajax request. Awesome.&lt;/p&gt;

&lt;p&gt;To coordinate between multiple Deferred objects, use $.when:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.when(getCurrentPositionDeferred(), $.ajax(&quot;/someUrl&quot;)).done(function() {
  // both the ajax call and the geolocation call have finished successfully.
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wonder what other browser native APIs could be better served by using Deferred objects instead of function arguments.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>A Mobile <span class="widow">Web Divided</span></title>
		<link href="http://nebraskajs.com/a-mobile-web-divided/"/>
		<updated>2011-08-08T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/a-mobile-web-divided</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Unless you’ve been living comfortably under an elaborate dwelling constructed entirely out of rock, you’re aware of the growing popularity of smartphones and other mobile devices. With that growth we’ve witnessed a bumper crop of component libraries and frameworks to enable us to create mobile web sites and applications.&lt;/p&gt;

&lt;h2&gt;One Web, Two Web Primer&lt;/h2&gt;

&lt;p&gt;There are two different approaches one can take when developing a mobile web site. The first approach has been assigned the delightfully inclusive moniker &lt;a href=&quot;http://www.w3.org/TR/mobile-bp/#OneWeb&quot;&gt;‘&lt;em&gt;One Web&lt;/em&gt;‘&lt;/a&gt;. &lt;em&gt;One Web&lt;/em&gt; involves creating a single web site accessible from both mobile and desktop web browsers and the site’s presentation is custom tailored at run time to the capabilities of the user’s device.&lt;/p&gt;

&lt;p&gt;The second approach involves creating two completely separate web sites, one for mobile and one for the desktop. The advantage with this approach is that content and the user interface can be tailored specifically for mobile, as the user’s context while using each site is likely to be drastically different. An obvious nickname for this approach might be &lt;em&gt;‘Two Web’&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Two Web&lt;/em&gt; involves a white list of mobile User Agents that server side code uses to detect mobile devices and redirects them to a mobile specific site. The remaining User Agents are left to view the desktop version. An improvement to this approach allows end users to opt-out of the mobile version by simply clicking on a link that redirects to the desktop version and persists the setting (often using a cookie).&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;One Web&lt;/em&gt; the site is customized and adapted based primarily on screen dimension, orientation, and pixel density. Contrast that to &lt;em&gt;Two Web&lt;/em&gt;, which usually divides touch screen and non touch screen devices. While this may make it easier on developers, it’s awkward for users. For example, consider Google Plus on an iPad. The entire experience feels like it was intended for a small screen, and feels barren and feature-poor on the larger tablet screen. The full Google Plus web site would be better for the iPad.&lt;/p&gt;

&lt;p&gt;Other downsides to &lt;em&gt;Two Web&lt;/em&gt; include maintenance of two separate code bases, maintenance of the User Agent white list as new devices are released, and dependency on server side code to redirect mobile User Agents to the mobile site.&lt;/p&gt;

&lt;p&gt;Developers should also be aware of the historical precedence of browser vendors &lt;em&gt;borrowing&lt;/em&gt; User Agent strings from other devices as they become popular. That’s why almost all User Agents in existence today contain the string “Mozilla” and why WebKit User Agents contain “like Gecko.” Come to think of it, User Agent theft happens most often when the target is Netscape or Netscape progeny.&lt;/p&gt;

&lt;h2&gt;Make Your Choice&lt;/h2&gt;

&lt;p&gt;An informed reader might already be aware of the choice between One and &lt;em&gt;Two Web&lt;/em&gt;. What you might not be aware of is that your mobile JavaScript libraries and toolkits may have already made this choice for you. The mobile web development space is clouded with tools that don’t document their requirement of &lt;em&gt;Two Web&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Most of the tools that have been reviewed below have focused on WebKit support only. It is not the author’s desire to simply suggest that these tools should work on non-WebKit mobile browsers. &lt;strong&gt;The tools we use should not create a web divided between mobile and desktop.&lt;/strong&gt; In a theoretical world where WebKit has a global monopoly on both mobile and desktop web browsing, it would still create problems if sites are restricted to mobile only or desktop only. Developers must be aware of the compromises we’ve inherited from our tools.&lt;/p&gt;

&lt;p&gt;As of June 2011, mobile web browsing is &lt;a href=&quot;http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#Summary_table&quot;&gt;only 6.5% of all web browsing&lt;/a&gt;, while 24.5% of all web browsing is desktop WebKit (non-mobile browsers like Chrome or Safari). While evidence would suggest that the share of mobile web browsing will increase, we should be very cautious to assume that WebKit (mobile or desktop) will ever reach anything close to 100% market share.&lt;/p&gt;

&lt;p&gt;Let’s look at how a few sample pages render in a few desktop browsers. (&lt;em&gt;Keep in mind that I did not test in the other major rendering engine, Presto currently used by Opera 11.5&lt;/em&gt;)&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://dev.sencha.com/deploy/touch/examples/nestedlist/&quot;&gt;Sencha Touch 1.1.0&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Trident (IE9)&lt;/p&gt;

&lt;p&gt;Not Supported&lt;/p&gt;

&lt;p&gt;Gecko (Firefox 5)&lt;/p&gt;

&lt;p&gt;Not Supported&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.31.41-PM.png&quot; title=&quot;Sencha Touch in Firefox&quot;&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.31.41-PM.png&quot; title=&quot;Sencha Touch in Firefox&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.31.41-PM.png&quot; title=&quot;Sencha Touch in Firefox&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of a nice list with large click targets, we’re greeted with a simple white screen. No error messages detailing a JavaScript error occurred on the page. No warning saying the web browser being used here isn’t supported (the bane of Progressive Enhancement advocates). Really bad user experience here.&lt;/p&gt;

&lt;p&gt;Officially, Sencha Touch support is not “anything WebKit” as some have suggested. It officially supports Apple iOS 3 , Android 2.1 , and BlackBerry 6 devices. It does not include WebOS, which is a WebKit browser, &lt;strong&gt;nor does it include any desktop web browsers.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.dhtmlx.com/touch/samples/apps/uidemo/index.html&quot;&gt;DHTMLx Touch v.1.0 RC&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Trident (IE9)&lt;/p&gt;

&lt;p&gt;Not Supported&lt;/p&gt;

&lt;p&gt;Gecko (Firefox 5)&lt;/p&gt;

&lt;p&gt;Not Supported&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-27-at-6.26.50-PM.png&quot; title=&quot;DHTMLx Touch in IE9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.16.48-PM.png&quot; title=&quot;DHTMLx Touch in Firefox&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DHTMLx Touch operated much better than Sencha Touch on desktop browsers. Despite the fact that many of the demos on their website are hidden behind QR codes. You can use a &lt;a href=&quot;http://zxing.org/w/decode.jspx&quot;&gt;QR decoder&lt;/a&gt; to get the URLs for viewing on your desktop device. As for official web browser support, the DHTMLx Touch web site states:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;While browsing the demos of DHTMLX Touch, note that the framework requires a mobile device to display and work correctly. You can also run the demos on standard PCs in Firefox 3.6 and above, and WebKit browsers (Safari, Chrome, etc.), but there still can be some issues since DHTMLX Touch is optimized for mobile devices.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, even though it works for the most part, desktop web browsers are still unsupported. It should also be noted that DHTMLx isn’t full WebKit either, as Blackberry 6 is not yet officially supported.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://chrism.dojotoolkit.org/mobile-0.2/make_samples/dojo-samples/demos/mobile-gallery/demo.html&quot;&gt;Dojo Mobile 0.2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Trident (IE9)&lt;/p&gt;

&lt;p&gt;Supported&lt;/p&gt;

&lt;p&gt;Gecko (Firefox 5)&lt;/p&gt;

&lt;p&gt;Supported&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/08/Screen-Shot-2011-08-08-at-9.51.41-PM.png&quot; title=&quot;Dojo Mobile in IE9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.18.51-PM.png&quot; title=&quot;Dojo Mobile in Firefox&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dojo Mobile also did fairly well. There were a few minor rendering issues with WebKit prefixed gradients (and no background color fallback) which I would consider to be very minor bugs. Here’s the good news from the &lt;a href=&quot;http://dojotoolkit.org/reference-guide/dojox/mobile.html#id5&quot;&gt;Dojo documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Dojox.mobile supports not only webkit-based mobile browsers, but also non-CSS3 desktop browsers such as IE and (older) Firefox.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;&lt;a href=&quot;http://jquerymobile.com/demos/1.0b2/#/demos/1.0b2/docs/lists/index.html&quot;&gt;jQuery Mobile 1.0b2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Trident (IE9)&lt;/p&gt;

&lt;p&gt;Supported&lt;/p&gt;

&lt;p&gt;Gecko (Firefox 5)&lt;/p&gt;

&lt;p&gt;Supported&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/08/Screen-Shot-2011-08-08-at-10.05.50-PM.png&quot; title=&quot;jQuery Mobile in IE9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/07/Screen-Shot-2011-07-26-at-10.08.24-PM.png&quot; title=&quot;jQuery Mobile in Firefox&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In most of the other frameworks, cross browser compatibility documentation felt like an afterthought mentioned in passing. Not jQuery Mobile. It has the most complete &lt;a href=&quot;http://jquerymobile.com/gbs/&quot;&gt;web browser support documentation&lt;/a&gt; of any mobile component framework. Not only is their documentation the best, their device support is the most comprehensive. The project officially supports Internet Explorer all the way back to version 7, which speaks volumes to their commitment to allow the developer to make the choice between &lt;em&gt;One Web&lt;/em&gt; and &lt;em&gt;Two Web&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you’re developing Hybrid Native applications using software like &lt;a href=&quot;http://www.phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt;, desktop web browser support doesn’t matter here. Feel free to disregard this entire article.&lt;/p&gt;

&lt;p&gt;However, if you are developing for the web I would encourage you to look strongly at &lt;em&gt;One Web&lt;/em&gt; as the default choice, and use &lt;em&gt;Two Web&lt;/em&gt; as the exception when your content and context require drastically different non-adaptable versions of the site for mobile devices. Certainly I’m not suggesting that either &lt;em&gt;One or Two Web&lt;/em&gt; are silver bullets. But we should all be aware of how the tools we choose weigh on our decision, and how this decision will affect our users in the future.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>FitText + BigText: A Tale of <span class="widow">Two Plugins</span></title>
		<link href="http://nebraskajs.com/fittext-and-bigtext/"/>
		<updated>2011-05-12T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/fittext-and-bigtext</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Earlier this week, &lt;a href=&quot;http://twitter.com/trentwalton&quot;&gt;@TrentWalton&lt;/a&gt; &lt;a href=&quot;http://twitter.com/TrentWalton/status/67972022776508416&quot;&gt;tweeted&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We at &lt;a href=&quot;http://twitter.com/paravelinc&quot;&gt;@paravelinc&lt;/a&gt; happily present to you FitText—a jQuery plugin for inflating web type:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Naturally, I wondered how it compared to BigText, a plugin of my own creation to Make Text Big. Trent &lt;a href=&quot;http://twitter.com/TrentWalton/status/67989004427079682&quot;&gt;continued&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It’s in the GitHub readme, but I want to recognize BigText from &lt;a href=&quot;http://twitter.com/zachleat&quot;&gt;@zachleat&lt;/a&gt; as another font sizer for non-fluid sites:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was delighted to get some attribution from Trent, and even more delighted to see their plugin. It’s really a great piece of work. However, his statement that BigText is just for non-fluid sites is not quite accurate. Let’s dive in.&lt;/p&gt;

&lt;p&gt;[![][7]][7]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/zachleat/anJpE/&quot;&gt;&lt;img src=&quot;http://jsfiddle.net/zachleat/anJpE/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the surface, BigText and FitText might seem very similar. In fact, they are quite different and approach what might seem to be a similar problem (resizing text to fit a container) in very different ways.&lt;/p&gt;

&lt;p&gt;At its simplest, we can boil it down like this: If you’re crafting a specific design with &lt;strong&gt;copy that is not going to change&lt;/strong&gt;, use FitText. If your &lt;strong&gt;text is dynamic&lt;/strong&gt; (maybe user generated), use BigText.&lt;/p&gt;

&lt;p&gt;Here’s more detail:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;BigText&lt;/p&gt;

&lt;p&gt;FitText&lt;/p&gt;

&lt;p&gt;Demos&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/zachleat/anJpE/&quot;&gt;BigText Fiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/zachleat/ExhDC/&quot;&gt;FitText Fiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Try resizing the demo windows above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Algorithm&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sizes text automatically&lt;/strong&gt; from a base up to fit the element width, regardless of initial font size.&lt;/p&gt;

&lt;p&gt;Uses the width of the element and a configurable JavaScript argument (the ratio) to &lt;strong&gt;scale text down&lt;/strong&gt; to smaller widths. This ratio argument must be set manually.&lt;/p&gt;

&lt;p&gt;Responsive Design&lt;/p&gt;

&lt;p&gt;Both plugins work with &lt;strong&gt;responsive design techniques&lt;/strong&gt;, operating correctly with media queries, fluid designs, and window resizing.&lt;/p&gt;

&lt;p&gt;Speed&lt;/p&gt;

&lt;p&gt;Fast&lt;/p&gt;

&lt;p&gt;Faster&lt;/p&gt;

&lt;p&gt;Text&lt;/p&gt;

&lt;p&gt;Works with user generated text, or any text isn’t cemented at design time. See the &lt;a href=&quot;http://www.zachleat.com/bigtext/demo/&quot;&gt;BigText Demo Wizard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Requires up front configuration to specific text.&lt;/p&gt;

&lt;p&gt;Resize Event&lt;/p&gt;

&lt;p&gt;Works with existing debounced resize libraries, if they exist on the page.&lt;/p&gt;

&lt;p&gt;Does not use a debounced resize event.&lt;/p&gt;

&lt;p&gt;Unobtrusive&lt;/p&gt;

&lt;p&gt;CSS and BigText font-sizes are independent of each other.&lt;/p&gt;

&lt;p&gt;FitText uses your CSS font-size as a maximum font size.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t forget to set sane CSS font-size defaults when JavaScript isn’t available.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unit Tested&lt;/p&gt;

&lt;p&gt;Full Test Suite&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FitText is very lightweight and fast&lt;/strong&gt;, even considering it doesn’t yet use a debounced resize event. The &lt;a href=&quot;https://github.com/davatron5000/FitText.js/blob/master/jquery.fittext.js&quot;&gt;FitText algorithm&lt;/a&gt; is &lt;strong&gt;quite beautiful&lt;/strong&gt;. A huge well done to &lt;a href=&quot;http://paravelinc.com/&quot;&gt;Paravel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;FitText relies on the fact that there is a &lt;strong&gt;linear relationship between font-sizes and element widths&lt;/strong&gt;. Once you’ve established the ratio between the two, it’s off to the races. In fact, it would probably be technically possible to determine the ratio solely on the initial inner-width of the text and the initial font-size. I’ll have to play around with that approach but if it works it would give an amazing speed improvement to BigText.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;font-size = outer-width / configurable-ratio&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a perfect world, BigText and FitText could be combined, to create a &lt;em&gt;mutant auto-text-sizing plugin baby&lt;/em&gt; that gives the best of both worlds.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Pragmatic <span class="widow">Progressive Enhancement</span></title>
		<link href="http://nebraskajs.com/pragmatic/"/>
		<updated>2011-05-09T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/pragmatic</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/05/juniper.jpg&quot; title=&quot;Juniper Plant&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few weeks ago at the jQuery Conference (San Francisco 2011), Nicholas Zakas delivered a wildly entertaining presentation entitled &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/nzakas/progressive-enhancement-20&quot;&gt;“Progressive Enhancement 2.0″&lt;/a&gt;&lt;/strong&gt; (slides 65-79 are especially great), updating the basic rules of PE for a modern age. While prior Progressive Enhancement techniques included layering content, presentation, and behavior (conveniently represented as HTML, CSS, and JavaScript). PE 2.0 (not to be confused with our other 2nd generation friend, the Web) involves &lt;strong&gt;multiple layers of CSS&lt;/strong&gt; for differing device capabilities (rounded corners for example) and &lt;strong&gt;multiple layers of JavaScript&lt;/strong&gt; (ECMAScript 5 capable browsers, for example). He made the argument that this also included &lt;strong&gt;ignoring older browsers&lt;/strong&gt; (in some cases) and only moving forward with new functionality for newer, more capable devices.&lt;/p&gt;

&lt;p&gt;Like any web developer that believes in getting actual work done, I agree with his argument but not without exemption.&lt;/p&gt;

&lt;h2&gt;Pieces of Flair&lt;/h2&gt;

&lt;p&gt;The benefit of Progressive Enhancement pays off when your code encounters a device is &lt;strong&gt;incapable of interpreting the CSS or JavaScript correctly&lt;/strong&gt; in a way the code was intended. This could be because of a bug in the rendering or JavaScript engine (or God-forbid an error in the code itself), or it could be because the feature being utilized is newer than the device itself and it could not have supported it without clairvoyance or a time machine.&lt;/p&gt;

&lt;p&gt;The example Nicholas used to display this case was the Twitter home page, which uses CSS border-radius to display rounded corners. In user agents that don’t support border-radius, such as IE&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>HTML5 vs. Native Applications, <span class="widow">The Presentation</span></title>
		<link href="http://nebraskajs.com/html5-vs-native-applications/"/>
		<updated>2011-03-05T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/html5-vs-native-applications</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This slide deck was prepared for my guest lecture at the University of Nebraska-Omaha’s spring course on Mobile Application Development (BSAD 8916-005). The course was developed &lt;a href=&quot;http://googleresearch.blogspot.com/2009/07/app-inventor-for-android.html&quot;&gt;in partnership with Google’s University Relations program&lt;/a&gt; and included a variety of business and management students with &lt;em&gt;limited programming experience&lt;/em&gt;. My lecture was approximately six weeks into the course, and the students had already developed a few simple Android applications. My task was to convince them that HTML5 and Web Development is a viable alternative to native application development, for most use cases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I appreciate the irony of sharing these slides using the flash plugin)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/zachleat/html5-vs-native-applications/download&quot;&gt;Download the original PDF (exported from Keynote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/mobile/uno/Laundry-Timer/&quot;&gt;Download the source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If there’s demand, I do have a video of the talk. Let me know and I can do a bit more work to package the video and upload it.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Raging Netflix Queue, a Google <span class="widow">Chrome Extension</span></title>
		<link href="http://nebraskajs.com/raging-netflix-queue/"/>
		<updated>2011-02-21T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/raging-netflix-queue</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;The premise is simple. When attempting to find movies to watch in my local theater, I often stumble upon titles that I feel to be more rental quality than theater quality. So I wanted an easier way to add those movies to my Netflix queue. I created a Google Chrome extension to accomplish just that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/extensions/detail/nbnnepgogimidfbfkbcfmdeimmfadmmp&quot;&gt;&lt;img src=&quot;https://chrome.google.com/extensions/detail/nbnnepgogimidfbfkbcfmdeimmfadmmp&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;When Raging Netflix Queue recognizes the site you’re browsing to be a movie web site, it will show a small green Netflix icon in the address bar. Clicking that icon will add the title to your queue. If the title is available for Instant Viewing, it will go into your Instant Queue. If not available for Instant View, it will go into your DVD Queue. If the title is still in theaters and not yet available on DVD, it will go into the Saved portion of your DVD Queue, and Netflix will automatically add it to your DVD Queue when it becomes available.&lt;/p&gt;

&lt;p&gt;Raging Netflix Queue supports Rotten Tomatoes, IMDB, Google Movies, Apple Trailers, Movie Fone, movies.com, Yahoo Movies, and Fandango. Let me know if you have others you’d like to see added.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;https://chrome.google.com/extensions/detail/nbnnepgogimidfbfkbcfmdeimmfadmmp&quot;&gt;Download Raging Netflix Queue&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;Screencast&lt;/h2&gt;

&lt;h2&gt;Hiccups&lt;/h2&gt;

&lt;h3&gt;Years&lt;/h3&gt;

&lt;p&gt;The extension will parse the release year from the movie page, in order to guarantee better accuracy of results (There are a ton of remakes out there with the same titles). However, the actual year may vary. Some sites report theater release date, while others DVD release date, or the movie may have gone through a small showing and then a larger showing later. Thus, we allow plus or minus one year leverage when searching Netflix. See &lt;a href=&quot;http://www.rottentomatoes.com/m/cedar_rapids_2010/&quot;&gt;Cedar Rapids (2011) on Rotten Tomatoes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Use of “The” or And/&amp;amp;&lt;/h3&gt;

&lt;p&gt;Apple’s entry for &lt;a href=&quot;http://trailers.apple.com/trailers/universal/adjustmentbureau/&quot;&gt;The Adjustment Bureau&lt;/a&gt; does not include “The” in the title. While this would be solved if Netflix allowed partial name matches in their OData API, Raging Netflix Queue does an additional search prepending “The” to the title, if no titles were found on the first go.&lt;/p&gt;

&lt;p&gt;Netflix requires exact name matches in their API and prefers “and” over “&amp;amp;” in my tests. Raging Netflix Queue does a simple string replace there.&lt;/p&gt;

&lt;h3&gt;Single Quotes&lt;/h3&gt;

&lt;p&gt;Titles like “The King’s Speech” don’t match, due to another limitation with the &lt;a href=&quot;http://developer.netflix.com/docs/oData_Catalog&quot;&gt;Netflix OData API&lt;/a&gt;. There is no way to escape single quotes in the query string. I’m waiting on Netflix for an answer there.&lt;/p&gt;

&lt;h2&gt;Hindsight&lt;/h2&gt;

&lt;p&gt;It’s true that I have built a &lt;a href=&quot;/web/2007/04/18/javascript-code-coverage-tool-for-firebug/&quot;&gt;web browser plugin (to an add-on) before&lt;/a&gt;, and even a &lt;a href=&quot;/web/2010/07/19/dom-sailbloat/&quot;&gt;plug-in to a ported web browser add-on&lt;/a&gt;, but it was a great experience to build an actual web browser extension and Google Chrome has made it very easy to do so. This was also a &lt;strong&gt;jQuery-free project&lt;/strong&gt;, as I would think that all Google Chrome extensions would be. jQuery is intended to solve cross browser compatibility issues, and a web browser specific extension shouldn’t have any of those. Sure, it feels like you’re being spoiled to use native String &lt;code&gt;trim()&lt;/code&gt;, Array &lt;code&gt;forEach&lt;/code&gt;, and &lt;code&gt;document.querySelector&lt;/code&gt;. But damn it, I deserve nice things every once in awhile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.southparkstudios.com/clips/155280/raging-clues&quot;&gt;&lt;em&gt;I’m getting such a huge queue right now.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>The JavaScript Testing <span class="widow">Challenge Winner</span></title>
		<link href="http://nebraskajs.com/javascript-tdd-winner/"/>
		<updated>2011-02-14T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/javascript-tdd-winner</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Congratulations to &lt;a href=&quot;http://twitter.com/stevelove&quot;&gt;Steve Love&lt;/a&gt;, who was the first to complete &lt;a href=&quot;/web/2010/11/13/javascript-tdd/&quot;&gt;The JavaScript Testing Challenge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/cjno&quot;&gt;&lt;img src=&quot;http://twitter.com/cjno&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;He wins a copy of &lt;a href=&quot;http://twitter.com/cjno&quot;&gt;Christian Johansen&lt;/a&gt;‘s book, &lt;a href=&quot;http://tddjs.com/&quot;&gt;Test-Driven JavaScript Development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you code for a living, testing will make your life easier. Even though the contest is over, I encourage you to go through the steps and complete the original challenge, if for no other reason than to see how easy it is to get a simple testing environment set up with JsTestDriver.&lt;/p&gt;

&lt;p&gt;Stay tuned for more coding challenges!&lt;/p&gt;

&lt;p&gt;Related: &lt;a href=&quot;/web/2011/01/09/javascript-tdd-update/&quot;&gt;An Update to The JavaScript Testing Challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s Steve’s screencast (using, I assume, a mechanical keyboard?):&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Et <span class="widow">tu, X-UA-Compatible?</span></title>
		<link href="http://nebraskajs.com/et-tu-x-ua-compatible/"/>
		<updated>2011-02-06T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/et-tu-x-ua-compatible</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2010/10/19/testing-sites-with-browser-mode-vs-doc-mode.aspx&quot;&gt;&lt;img src=&quot;http://blogs.msdn.com/b/ie/archive/2010/10/19/testing-sites-with-browser-mode-vs-doc-mode.aspx&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;Or, the story of how I learned that &lt;strong&gt;the X-UA-Compatible header/meta tag is NOT the same as the Internet Explorer 8 Compatibility View button&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note that the following information may be common knowledge, as this behavior is as described in the pre-requisite &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2010/10/19/testing-sites-with-browser-mode-vs-doc-mode.aspx&quot;&gt;Microsoft documentation&lt;/a&gt; on the subject. However, I feel this behavior to be unintuitive and requiring more explicit communication.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Library developers live in a much different world from full stack developers. If you’re supplying code that will be used by others, you’re faced with a different set of priorities. As such, the library I manage provides certain user agent sniffing conveniences, namely classes to replace CSS Hacks (similar to the approach used in HTML Boilerplate to provide ie6 through ie9 classes on the &lt;code&gt;` tag) and JavaScript booleans (similar to [&lt;/code&gt;jQuery.browser`]&lt;a href=&quot;http://api.jquery.com/jQuery.browser&quot;&gt;3&lt;/a&gt;). Much like jQuery, &lt;a href=&quot;http://docs.jquery.com/Release:jQuery_1.3#No_More_Browser_Sniffing&quot;&gt;these conveniences remain&lt;/a&gt; for backwards compatibility.&lt;/p&gt;

&lt;p&gt;The purpose of this post is in fact not to convince you whether or not User Agent Sniffing is a &lt;a href=&quot;http://infrequently.org/2011/01/cutting-the-interrogation-short/&quot;&gt;good tradeoff for performance&lt;/a&gt; (even though, in some cases I believe it is), but instead to provide further evidence that using the User Agent alone is an unreliable method to determine the rendering engine of the web browser, and must be complemented with other approaches. &lt;strong&gt;If you’re going to sniff, you have to sniff harder.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;X-UA-Compatible Breaks navigator.userAgent&lt;/h2&gt;

&lt;p&gt;Microsoft defines two terms to help communicate how new versions of Internet Explorer render a page: Browser Mode and Document Mode. Browser Modes are determined prior to any request made to the server (and cannot be changed by web developers). If the user triggers an IE7 Browser Mode using the Compatibility View Button, a new request is made to the server. Document Modes are determined in the page response.&lt;/p&gt;

&lt;h3&gt;Compatibility View Button Flow&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;User presses the Compatibility View button. This changes the Browser Mode.&lt;/li&gt;
&lt;li&gt;Request sent (since the Browser Mode has changed, &lt;strong&gt;the User-Agent is also changed&lt;/strong&gt; to MSIE 7.0)&lt;/li&gt;
&lt;li&gt;Response from Server&lt;/li&gt;
&lt;li&gt;Document Mode determined&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;X-UA-Compatible Flow&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Internet Explorer uses the default Browser Mode (newest available in the browser)&lt;/li&gt;
&lt;li&gt;Request sent (Browser Mode determines User-Agent to send, probably MSIE 8.0 or MSIE 9.0)&lt;/li&gt;
&lt;li&gt;Response from Server. Content may include X-UA-Compatible `` tag and/or Response HTTP headers such as X-UA-Compatible).&lt;/li&gt;
&lt;li&gt;Document Mode determined, using X-UA-Compatible and the DocType&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If a X-UA-Compatible header is sent back in the Compatibility View flow, it will take precedence but obviously will not change the request User-Agent HTTP header.&lt;/p&gt;

&lt;p&gt;It’s important to note that since the request has already gone before the Document Mode is determined, the Document Mode has no bearing on the request User-Agent HTTP header. While Microsoft probably could have changed &lt;code&gt;navigator.userAgent&lt;/code&gt; to be different than the request User-Agent HTTP header, I feel they made the correct decision is keeping the same value. &lt;code&gt;navigator.userAgent&lt;/code&gt; remains the same value as the request User-Agent HTTP header in IE8, but Microsoft changed this behavior in IE9. In IE9, &lt;code&gt;navigator.userAgent&lt;/code&gt; represents the document mode, not the request User-Agent header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2011/02/Screen-shot-2011-02-06-at-1.27.14-PM.png&quot; title=&quot;Screenshot of Microsoft Documentation&quot; alt=&quot;&quot; /&gt;The User Agent isn’t the only thing being determined. The prerequisite Microsoft documentation states that the Browser Mode determines the User Agent, Default Document Mode, and Conditional Comments. This is not accurate. &lt;strong&gt;The Document Mode determines which Conditional Comments execute, not the Browser Mode.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also note that using IE’s &lt;strong&gt;Conditional Compilation&lt;/strong&gt; feature to return the version of JScript will be the same, independent of Document Mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ie = /*@cc_on @_jscript_version @*/0;
// Always returns 5.8 in IE8, independent of Document Mode.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example Code from &lt;a href=&quot;https://github.com/scottjehl/Respond/blob/aedc482328a4cbd9d74c5de178eb2cb974b67af5/respond.src.js#L171&quot;&gt;Scott Jehl’s respond.js&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Test Pages&lt;/h3&gt;

&lt;p&gt;Try the following tests in Internet Explorer 8 to test for yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/test/x-ua-compatible/index.html&quot;&gt;Stock Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/test/x-ua-compatible/ie7.html&quot;&gt;Setting X-UA-Compatible IE=7 using a Meta Tag&lt;/a&gt; (or &lt;a href=&quot;/test/x-ua-compatible/emulateie7.html&quot;&gt;IE=EmulateIE7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/test/x-ua-compatible/header-ie7/ie7.html&quot;&gt;Setting X-UA-Compatible IE=7 using an HTTP Header&lt;/a&gt; (or &lt;a href=&quot;/test/x-ua-compatible/header-emulateie7/emulateie7.html&quot;&gt;IE=EmulateIE7&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What Does This Mean?&lt;/h2&gt;

&lt;p&gt;If you use X-UA-Compatible to change the Document Mode/IE Trident rendering engine, any client side code relying on &lt;code&gt;navigator.userAgent&lt;/code&gt; (such as jQuery.browser) or server side code relying on the User-Agent HTTP Header will be incorrect. Since we can’t rely on the User Agent, what can we use? Microsoft does provide a &lt;code&gt;document.documentMode&lt;/code&gt; integer we could use, pretty easily. But, I think there is a better approach.&lt;/p&gt;

&lt;p&gt;Consider &lt;a href=&quot;https://gist.github.com/527683&quot;&gt;a great piece of JavaScript written by James Padosley&lt;/a&gt; to find Internet Explorer version numbers using Conditional Comments. His code seemed to meld perfectly with the above realization that the Document Mode determines Conditional Comment execution. We can use this to fix &lt;code&gt;jQuery.browser&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Place this script after jQuery, but before any code that uses jQuery.browser
// Modified to only test for IE 6 , since jQuery only supports 6 
(function($)
{
    if(!$.browser.msie) {
        return;
    }
&amp;amp;nbsp;
    var v = 5,
        div = document.createElement('div'),
        all = div.getElementsByTagName('i');
&amp;amp;nbsp;
    while (
        div.innerHTML = '',
        all[0]
    );
&amp;amp;nbsp;
    $.browser.version = v;
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, of course, since we’re creating nodes there is a small performance penalty in using the above script over Regular Expressions and document.documentMode. I feel this to be worthwhile, given that I’ve been &lt;a href=&quot;/web/2008/10/19/jquery-bug-ie-reports-incorrect-browserversion/&quot;&gt;burned by Internet Explorer’s version number before&lt;/a&gt;. But next time, I reserve the right to choose performance over simplicity.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>BigText Makes <span class="widow">Text Big</span></title>
		<link href="http://nebraskajs.com/bigtext-makes-text-big/"/>
		<updated>2011-01-11T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/bigtext-makes-text-big</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;*I like shortcuts:&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>An Update to The JavaScript <span class="widow">Testing Challenge</span></title>
		<link href="http://nebraskajs.com/javascript-tdd-update/"/>
		<updated>2011-01-09T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/javascript-tdd-update</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;/web/2011/02/14/javascript-tdd-winner/&quot;&gt;The JavaScript Testing Challenge Winner&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/web/2010/11/13/javascript-tdd/&quot;&gt;The JavaScript Testing Challenge&lt;/a&gt;, I asked JavaScript developers of the world to change their heathen ways and embrace the future of automated testing for a healthier and brighter tomorrow.&lt;/p&gt;

&lt;p&gt;However, due to seasonal timing or otherwise real life related reasons, the challenge was greeted with a worldwide chorus of universally blank stares. So, in the true spirit of Christmas, I’m removing the deadline and &lt;strong&gt;will award the grand prize to the developer with the first correct and complete PrimeFactors code kata screencast&lt;/strong&gt;. That’s right, be the first to answer the challenge will win a copy of Test-Driven JavaScript Development by Christian Johansen (PDF or Print version, your choice).&lt;/p&gt;

&lt;p&gt;If you have any questions or need help getting started, let me know! I’d be glad to help. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Time of entry will be based on the twitter at message sent to @zachleat. Full restrictions and rules posted &lt;a href=&quot;/web/2010/11/13/javascript-tdd/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>The JavaScript <span class="widow">Testing Challenge</span></title>
		<link href="http://nebraskajs.com/javascript-tdd/"/>
		<updated>2010-11-13T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/javascript-tdd</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update 2&lt;/strong&gt;: &lt;a href=&quot;/web/2011/02/14/javascript-tdd-winner/&quot;&gt;The JavaScript Testing Challenge Winner&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;/web/2011/01/09/javascript-tdd-update/&quot;&gt;An Update to The JavaScript Testing Challenge&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Think back to the last time you wrote new code from scratch. Not autogenerated Dreamweaver image hovers or a pasted script from Dynamic Drive, but pure unadulterated new code. What was your process? I’m betting it’s probably similar to: (1) code, (2) switch to a browser, (3) confirm desired behavior for the change you’ve made, and (4) repeat.&lt;/p&gt;

&lt;p&gt;Comrades, let me assure you that there is a better way, and it starts with writing unit tests. As a Front End Engineer that’s been doing it bareback without tests since I started in 1997, let me assure you that adopting automated testing strategies is one of the &lt;strong&gt;single best changes I’ve made to my development cycle&lt;/strong&gt; to make myself more productive. Enough fluff. Let’s get started!&lt;/p&gt;

&lt;h2&gt;Testing Environment Setup in 3 Steps&lt;/h2&gt;

&lt;p&gt;Prerequisite: Java on the classpath&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the &lt;a href=&quot;https://github.com/zachleat/JavaScript-Code-Katas/zipball/master&quot;&gt;JavaScript-Code-Katas Source (ZIP)&lt;/a&gt; (or checkout the code from the &lt;a href=&quot;https://github.com/zachleat/JavaScript-Code-Katas&quot;&gt;Github Repository&lt;/a&gt;, if you have git available)&lt;/li&gt;
&lt;li&gt;Extract and browse to it using your operating system’s command line.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run (Windows)&lt;br/&gt;
&lt;code&gt;&amp;gt; JsTestDriver.bat Template&lt;/code&gt;
Run (MacOS)&lt;br/&gt;
&lt;code&gt;$ ./JsTestDriver.sh Template&lt;/code&gt;&lt;br/&gt;
&lt;em&gt;This script will close Safari (be careful if you’re using Safari in other windows)&lt;/em&gt; &lt;br/&gt;
If a web browser popped up on your screen, congratulations! You have an automated testing environment set up and running. Easy, right?&lt;/p&gt;

&lt;h2&gt;Writing a Test&lt;/h2&gt;

&lt;p&gt;Now, let’s write our first test!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up &lt;code&gt;templateTest.js&lt;/code&gt; in your favorite IDE.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following:     TemplateTest = TestCase('TemplateTest');&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TemplateTest.prototype.testSample = function()
{
    assertTrue(true);
    assertFalse(false);
    assertEquals(true, true);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Re-run the JsTestDriver shell script from Step #3 above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Now you should see something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total 1 tests (Passed: 1; Fails: 0; Errors: 0) (2.00 ms)
  Safari 533.18.5 Mac OS: Run 1 tests (Passed: 1; Fails: 0; Errors 0) (2.00 ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Notice how you didn’t have to touch any HTML boilerplate code or manually bring up a web browser?&lt;/strong&gt; Productivity ensues! You’ve made it this far, are you brave enough to dive into a Code Kata?&lt;/p&gt;

&lt;h2&gt;Prime Factors Code Kata&lt;/h2&gt;

&lt;p&gt;Code Katas are just small programs used as practice. They’re a great way to introduce Test Driven Development and improve proficiency with your IDE.&lt;/p&gt;

&lt;p&gt;The Prime Factors Code Kata requires a function that takes a single integer argument and returns an array of prime factors of that argument in ascending numerical order. For example, passing in &lt;code&gt;8&lt;/code&gt; should return &lt;code&gt;2, 2, 2&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/present/edit?id=0AVz1CG9ZSGbWZG5iajc4c18zN2R2NzJnZmRq&amp;amp;hl=en&amp;amp;authkey=CO38t6gL&quot;&gt;Original Java version by Uncle Bob Martin&lt;/a&gt; (see &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata&quot;&gt;original post&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zachleat/JavaScript-Code-Katas/blob/master/PrimeFactors/primeFactors.js&quot;&gt;JavaScript implementation of the Prime Factors algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I’ve recorded an unmodified single-take screencast of myself performing the kata below. I’m using the same source code I provided above, but with the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/UsingTheEclipsePlugin&quot;&gt;JsTestDriver Eclipse plugin&lt;/a&gt; instead of using the command line to run the tests. The plugin is great for the screencast, because it very easily shows when the tests are failing or passing. You might also notice that it reruns the tests automatically every time I save.&lt;/p&gt;

&lt;h2&gt;JsTestDriver&lt;/h2&gt;

&lt;p&gt;If you want to learn more a about JsTestDriver, check out their &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;Google Code&lt;/a&gt; page. “But I use QUnit!” you say. That’s fine, &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;there is an adaptor for that&lt;/a&gt;. Using both tools together, you won’t need to launch each individual browser manually and trigger the tests to start. It will save you time.&lt;/p&gt;

&lt;p&gt;In the interest of full disclosure, here are the issues I’ve ran into so far using JsTestDriver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn’t apply CSS in some browsers. &lt;a href=&quot;http://code.google.com/p/js-test-driver/issues/detail?id=81&quot;&gt;Issue #81&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defaults to quirks mode. &lt;a href=&quot;http://code.google.com/p/js-test-driver/issues/detail?id=79&quot;&gt;Issue #79&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Challenge&lt;/h2&gt;

&lt;p&gt;Testing will help you. It will improve your the quality of your code and your productivity. I challenge you to practice the JavaScript Prime Factors Code Kata in your own IDE with your own automated testing process. Send a link to me on Twitter (&lt;a href=&quot;http://twitter.com/zachleat&quot;&gt;@zachleat&lt;/a&gt;) with an unmodified single-take screencast of you performing the kata (in JavaScript) by December 25, 2010 and &lt;strong&gt;the fastest kata screencast will win a copy of &lt;a href=&quot;http://tddjs.com/&quot;&gt;Test-Driven JavaScript Development&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;http://twitter.com/cjno/&quot;&gt;Christian Johansen&lt;/a&gt; (PDF or Print version, your choice*).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://screenr.com/&quot;&gt;Screenr&lt;/a&gt; is a great tool for recording screencasts, if you need one.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;p&gt;*Coding must follow every step performed by myself in the above version. Templates and keyboard shortcuts can be used at your leisure, but no code can be generated specific to the kata itself (it must be a generic). Use your best judgement here, I reserve the right to disqualify any entries submitted that don’t follow the true spirit of the competition.
Don’t fuck with the speed of the video. I’m spending my own money on this, so if you’re cheating then you’re just stealing from me. Just be cool about it, okay?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Print version of the prize is restricted to USA or Canada, PDF version is available internationally (unless you want to work something out for shipping costs).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
	<entry>
		<title>Faking Onload for <span class="widow">Link Elements</span></title>
		<link href="http://nebraskajs.com/load-css-dynamically/"/>
		<updated>2010-07-29T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/load-css-dynamically</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Updated 2011/09/27: Rejoice! This issue has now &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=185236&quot;&gt;been fixed in Firefox&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Or, &lt;strong&gt;I Am Dynamically Loaded CSS (and So Can You!)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dynamic resource loading is one of the keys to have a performance happy web application. There are generally three different criteria we must address when making a request: cross domain security policies, asynchronous/synchronous (will it block the host page while loading), and whether or not events are triggered when the request completes.&lt;/p&gt;

&lt;p&gt;If the resource and host page are on the same domain, obviously &lt;code&gt;XMLHttpRequest&lt;/code&gt; works the best. We can control whether or not the resource is loaded asynchronously or synchronously, and we know exactly when it gets done.&lt;/p&gt;

&lt;p&gt;If the resource and host page are on different domains (increasingly more common with CDN’s), our options narrow. Loading the JavaScript is a solved problem, just use the &lt;code&gt;onload&lt;/code&gt; event on the &lt;code&gt;` tag and you’re good to go (&lt;/code&gt;onreadystatechange` for IE). But CSS is more complicated.&lt;/p&gt;

&lt;p&gt;Resource&lt;/p&gt;

&lt;p&gt;Method&lt;/p&gt;

&lt;p&gt;Option for (a)synchronous&lt;/p&gt;

&lt;p&gt;Event&lt;/p&gt;

&lt;p&gt;JavaScript/CSS Same Domain&lt;/p&gt;

&lt;p&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onreadystatechange&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JavaScript Different Domain&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Synchronous (Asynchronous where &lt;a href=&quot;https://developer.mozilla.org/en/html/element/script&quot;&gt;async property&lt;/a&gt; is supported)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onload&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;onreadystatechange&lt;/code&gt; for IE&lt;/p&gt;

&lt;p&gt;CSS Different Domain&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Asynchronous&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What this blog post is about.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Existing Solutions&lt;/h2&gt;

&lt;p&gt;In all of the library source code I evaluated, Internet Explorer didn’t cause any issues. It fires both the &lt;code&gt;onload&lt;/code&gt; and &lt;code&gt;onreadystatechange&lt;/code&gt; events for `` nodes. Obviously this is ideal behavior, and IE got it right. But what about Firefox and Safari/Chrome?&lt;/p&gt;

&lt;h3&gt;YUI 2.8.1 and 3.1.1&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/yui/yui3/blob/master/build/yui/get.js#L311&quot;&gt;Original Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// FireFox does not support the onload event for link nodes, so there is
// no way to make the css requests synchronous. This means that the css 
// rules in multiple files could be applied out of order in this browser
// if a later request returns before an earlier one.  Safari too.
if ((ua.webkit || ua.gecko) &amp;amp;&amp;amp; q.type === &quot;css&quot;) {
    _next(id, url);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wouldn’t be surprised if the commit log there was from Bon Jovi; that code is living on a prayer.&lt;/p&gt;

&lt;h3&gt;LazyLoad&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/rgrove/lazyload/blob/master/lazyload.js#L283&quot;&gt;Original Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Gecko and WebKit don't support the onload event on link nodes. In
// WebKit, we can poll for changes to document.styleSheets to figure out
// when stylesheets have loaded, but in Gecko we just have to finish
// after a brief delay and hope for the best.
if &amp;amp;#40;ua.webkit&amp;amp;#41; &amp;amp;#123;
    p.urls&amp;amp;#91;i&amp;amp;#93; = node.href; // resolve relative URLs (or polling won't work)
    poll&amp;amp;#40;&amp;amp;#41;;
&amp;amp;#125; else &amp;amp;#123;
    setTimeout&amp;amp;#40;_finish, 50 * len&amp;amp;#41;;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better, closer, warmer. This includes a nice method for working with webkit browsers. The poll method compares &lt;code&gt;document.styleSheets&lt;/code&gt;, since Webkit has the nice option of only appending to the styleSheets object when the styleSheet has successfully loaded.&lt;/p&gt;

&lt;p&gt;So we have working solutions for IE and Safari/Chrome. The only unsolved piece of the puzzle here is Firefox.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wonko.com/post/how-to-prevent-yui-get-race-conditions&quot;&gt;This post&lt;/a&gt; from the same author as LazyLoad also describes another solution which involves modifying the source CSS and polling against it. But that’s not really ideal. Can we do better?&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;Here’s what I came up with (using jQuery for brevity, note that this solution &lt;strong&gt;only fixes Firefox&lt;/strong&gt;, and does not incorporate the above already solved solutions):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var url = 'css.php',
    id = 'dynamicCss'   &amp;amp;#40;new Date&amp;amp;#41;.getTime&amp;amp;#40;&amp;amp;#41;;
&amp;amp;nbsp;
$&amp;amp;#40;''&amp;amp;#41;.attr&amp;amp;#40;&amp;amp;#123;
    id: id,
    type: 'text/css'
&amp;amp;#125;&amp;amp;#41;.html&amp;amp;#40;'@import url('   url   ')'&amp;amp;#41;.appendTo&amp;amp;#40;document.getElementsByTagName&amp;amp;#40;'head'&amp;amp;#41;&amp;amp;#91;&amp;amp;#93;&amp;amp;#41;;
&amp;amp;nbsp;
function poll&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
    try &amp;amp;#123;
        var sheets = document.styleSheets;
        for&amp;amp;#40;var j=, k=sheets.length; j
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>ALARMd is now <span class="widow">on Github</span></title>
		<link href="http://nebraskajs.com/alarmd-is-now-on-github/"/>
		<updated>2010-07-21T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/alarmd-is-now-on-github</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;In an effort to mindlessly copy what everyone else on the internet is doing keep current on the latest and greatest Source Code Management tools, I decided that it would be good practice to move my open source project ALARMd (as seen on &lt;a href=&quot;http://lifehacker.com/271043/wake-up-to-a-youtube-video-with-alarmd&quot;&gt;Lifehacker&lt;/a&gt;) from &lt;a href=&quot;/web/2008/10/08/alarmd-is-a-google-code-project/&quot;&gt;Google Code&lt;/a&gt; to Github.&lt;/p&gt;

&lt;p&gt;Feel free to fork/contribute at your leisure.&lt;/p&gt;

&lt;p&gt;If you’re new, you can check out &lt;a href=&quot;http://www.alarmd.com/&quot;&gt;ALARMd.com&lt;/a&gt; to see what I’m talking about.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Maiden Voyage of the <span class="widow">DOM Sailbloat</span></title>
		<link href="http://nebraskajs.com/dom-sailbloat/"/>
		<updated>2010-07-19T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/dom-sailbloat</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/07/typhoon-in-macao.jpg&quot; title=&quot;typhoon-in-macao&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As many of you may already know, my day job includes managing a large and complex enterprise jQuery-based user interface component library. It’s used by all new web applications at the company, which boasts over an IT department of approximately 1500 people and hundreds of web applications. Needless to say, I get a fair volume of interesting support tickets that come my way. A few weeks ago, I had the pleasure of receiving one such ticket.&lt;/p&gt;

&lt;p&gt;The support ticket’s symptoms included a oft-heard complaint: poor performance. On the web, poor performance can be attributed to a great many things, but most often can be boiled down to a bottleneck in JavaScript code using the DOM API. This time, strangely enough, the culprit was something else entirely.&lt;/p&gt;

&lt;p&gt;One of the first things I check when an application complains of poor performance is the total size of the document, or how many nodes it has. One of the best ways to ensure good performance is to keep your document small, especially on projects using heavy dynamic element selection and filtering (think jQuery, Mootools, Prototype, Dojo, or any code using a selector engine like Sizzle). Any JavaScript library emulating CSS selectors executing over a very large document is going to take quite a bit longer than querying a small document, especially when the user’s browser doesn’t support native &lt;code&gt;querySelector&lt;/code&gt; or &lt;code&gt;getElementsByClassName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get an idea of what the size of a large document is, I usually go to a site with some fairly advanced JavaScript and query their size.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Returns the total number of nodes in the document
document.getElementsByTagName('*').length;
// note: this number will not include any child nodes inside of iframes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URL&lt;/p&gt;

&lt;p&gt;Total Element Count&lt;/p&gt;

&lt;p&gt;&lt;code&gt;maps.google.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;731&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;my.yahoo.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1508&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;calendar.google.com (Authenticated)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;681&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reader.google.com (Authenticated)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;4866&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Getting back to the support ticket in question. After querying the document, I quickly found that the page contained over &lt;strong&gt;50000 nodes&lt;/strong&gt;. Wow. So, we’ve caught a big one. You’re going to be telling your grandkids about this some day. But, now what?&lt;/p&gt;

&lt;p&gt;I decided it would be beneficial to find out where and what all of those nodes were. After clicking around the live document in the Firebug’s HTML tab for awhile, looking at View Source, and Ajax requests in the Console, I successfully determined the culprit. This particular application was using &lt;a href=&quot;http://wicket.apache.org/&quot;&gt;Wicket&lt;/a&gt;, a popular Java library for web applications, which includes its own &lt;em&gt;Ajax Logger&lt;/em&gt; component (similar to my favorite &lt;a href=&quot;http://log4javascript.org/&quot;&gt;log4javascript&lt;/a&gt;; or something like the &lt;a href=&quot;http://developer.yahoo.com/yui/logger/&quot;&gt;YUI Logger&lt;/a&gt;), used to keep track of an application’s Ajax calls and JavaScript page manipulations with an inline GUI embedded in the parent document. On one page load, this application’s Ajax logger component had &lt;strong&gt;created 40000 nodes of log content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s important to realize that embedding unnecessary content of that magnitude on the page can be very detrimental to performance. &lt;strong&gt;JavaScript loggers should log to a new child window, rather than be embedded in the parent document.&lt;/strong&gt; This way they won’t bloat the document, but still provide you with much needed logging information.&lt;/p&gt;

&lt;p&gt;But, in the future, how might this type of problem be more easily diagnosed and prevented? Ideally, when confronted with large documents, we want to see where in the document the majority of those nodes are located. But there isn’t an easy way to see which portion of the document is using the largest number of nodes, especially if the culprit is deep into the document tree. We can go through the source code manually, but that isn’t very efficient.&lt;/p&gt;

&lt;p&gt;So in the spirit of exploratory development to help troubleshoot real-world problems, I decided to make a Firebug Lite plugin. This would give me an easy cross-browser tool to diagnose my problem in a familiar interface. Load up Firebug Lite, load the &lt;em&gt;DOM Sailbloat&lt;/em&gt; JavaScript file, and easily spot the HTML love handles.&lt;/p&gt;

&lt;p&gt;Here’s what it looks like in action:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/07/Screen-shot-2010-07-19-at-9.59.49-PM.png&quot; title=&quot;Screen shot of the DOM Sailbloat Firebug Lite plugin&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Go Forth&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/domsailbloat/&quot;&gt;See the demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/domsailbloat/domsailbloat.js&quot;&gt;Download the source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/zachleat/DOM-Sailbloat&quot;&gt;Fork the Sailbloat on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;Note: there is currently an undiagnosed issue with the Sailbloat and it fails to load intermittently. If you know why, I’d be happy to put your name in the source code credits.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>A Race Against <span class="widow">Time Pickers</span></title>
		<link href="http://nebraskajs.com/a-race-against-time-pickers/"/>
		<updated>2010-06-08T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/a-race-against-time-pickers</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>Point, Charset, Match: Character Encoding <span class="widow">in JavaScript</span></title>
		<link href="http://nebraskajs.com/charset/"/>
		<updated>2010-03-26T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/charset</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;If you’re not familiar with the principles of &lt;strong&gt;character encoding&lt;/strong&gt;, read the prerequisite &lt;a href=&quot;http://diveintohtml5.org/semantics.html#encoding&quot;&gt;Dive Into HTML 5 section&lt;/a&gt; on the subject.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you see issues with Character Encoding, it’s traditionally in the form of text on your page that looks like this: &lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/03/unencoded.png&quot; title=&quot;unencoded&quot; alt=&quot;&quot; /&gt; in Firefox or &lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/03/unencoded-ie.png&quot; title=&quot;unencoded-ie&quot; alt=&quot;&quot; /&gt; in IE.&lt;/p&gt;

&lt;p&gt;Usually, those characters mean that the character encoding used on the page is either ambiguous (not specified), or incorrect. We can use Firefox to determine that Character Encoding of a web page (Right Click and go to View Page Info; or use the “Character Encoding” entry in the View menu). Check to make sure that the encoding reported by Firefox is the same encoding used in your IDE. For example, Eclipse 3.5 has a “Set Encoding” option in the Edit menu.&lt;/p&gt;

&lt;p&gt;The reason most English alphabetic and numeric characters are consistent independent of character encoding is due to consistency in the lower characters in each encoding. The characters making up the &lt;a href=&quot;http://www.asciitable.com/&quot;&gt;ASCII character set&lt;/a&gt; (0-127) are the same as the lowest 128 characters of &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO/IEC_8859-1#ISO-8859-1&quot;&gt;ISO-8859-1&lt;/a&gt;, &lt;a href=&quot;http://www.utf8-chartable.de/&quot;&gt;UTF-8&lt;/a&gt;, and others.&lt;/p&gt;

&lt;p&gt;Managing your character encodings gets trickier as you add more architectural layers to your application. For example, character encodings may differ in your database, the properties files used to configure your application (java.util.Properties uses ISO-8859-1 by default), or maybe the XML or JSON file you’re loading from an external API.&lt;/p&gt;

&lt;p&gt;Ever heard of HTML character entities? That’s the primary reason they exist — as a sort of encoding independent reference to a particular character. So, for example, the Œ character does not exist in the ISO-8859-1 character set. To display this character in a document with ISO-8859-1 encoding, use the equivalent HTML character entity: &lt;code&gt;&amp;amp;OElig;&lt;/code&gt;. For an easier reference, check out this full table of &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references&quot;&gt;HTML character entities&lt;/a&gt;. If using ISO-8859-1 for your HTML document, any entity above Unicode index 255 will need to be escaped. If you’re using UTF-8 encoding, HTML character entities shouldn’t be required.&lt;/p&gt;

&lt;h2&gt;Setting the Character Encoding&lt;/h2&gt;

&lt;p&gt;To specify the character encoding for any file, you can set a &lt;code&gt;Content-Type&lt;/code&gt; header &lt;a href=&quot;http://www.w3.org/International/O-HTTP-charset&quot;&gt;by configuring your web server or application&lt;/a&gt;. Apache lets you easily set different default character encodings for each individual file extension (&lt;code&gt;.js&lt;/code&gt; for example). Using the &lt;code&gt;Content-Type&lt;/code&gt; header is the most full proof and efficient &lt;a href=&quot;#performance&quot;&gt;1&lt;/a&gt; method to serve content.&lt;/p&gt;

&lt;p&gt;But without access to the Apache configuration, how do we specify the character encoding?&lt;/p&gt;

&lt;h3&gt;For external JavaScript Files&lt;/h3&gt;

&lt;h4&gt;In the HTML File&lt;/h4&gt;

&lt;p&gt;Just add the &lt;code&gt;charset&lt;/code&gt; attribute. If not specified, the HTML document’s character encoding is used by default (specified in the &lt;code&gt;Content-Type&lt;/code&gt; header or the appropriate meta tag, for example: ``).&lt;/p&gt;

&lt;h4&gt;In the JavaScript File&lt;/h4&gt;

&lt;p&gt;To my knowledge, &lt;strong&gt;there is no way for a JavaScript file to report its own character encoding&lt;/strong&gt;. To me, this seems like an omission. Each individual document should be able to report its own character encoding without a header. CSS files can do it (&lt;code&gt;@charset&lt;/code&gt; at-rule). HTML files can do it (`` tag). Why not JavaScript files?&lt;/p&gt;

&lt;h4&gt;For Dynamically Created Script Tags&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var s = document.createElement('script');
s.src = 'script.js';
s.type = 'text/javascript';
s.charset = 'utf-8';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re using &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;jQuery’s Ajax&lt;/a&gt; functions to load external JavaScript files, perhaps you might be inclined to use the &lt;code&gt;script dataType&lt;/code&gt;. jQuery even provides a &lt;code&gt;scriptCharset&lt;/code&gt; option for wrapping the above method for changing the charset on a dynamic script tag. &lt;strong&gt;Be warned&lt;/strong&gt;, the jQuery Ajax function uses two different methods to load external script files (as of version 1.4.2). If a same-domain request, it uses an &lt;code&gt;XMLHttpRequest&lt;/code&gt;. If a cross-domain request, it uses a dynamic &lt;code&gt;script&lt;/code&gt; tag. So the &lt;strong&gt;&lt;code&gt;scriptCharset&lt;/code&gt; jQuery option only applies to cross-domain requests&lt;/strong&gt;. We’ll need some other method to mitigate our character encoding issues (or just use dynamic script tags).&lt;/p&gt;

&lt;h4&gt;For XMLHttpRequest Objects&lt;/h4&gt;

&lt;p&gt;Our saving grace would be the &lt;a href=&quot;https://developer.mozilla.org/en/XMLHttpRequest#overrideMimeType()&quot;&gt;&lt;code&gt;overrideMimeType&lt;/code&gt;&lt;/a&gt; method, if it weren’t poetically unavailable in Internet Explorer. Using this method, we can override the mime type and character encoding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var xhr = new XMLHttpRequest();
// Not available in Internet Explorer (up to version 8 at time of writing)
if (xhr.overrideMimeType) {
    xhr.overrideMimeType('application/x-javascript; charset=utf-8');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Portable non-ASCII JavaScript&lt;/h3&gt;

&lt;p&gt;The best way to make non-ASCII characters in JavaScript files portable is to escape the characters properly. If the character is destined for HTML, use an HTML character entity (if available, not all Unicode or ISO-8559-1 characters have entities). Or, escape the characters using the proper Latin or &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Unicode&quot;&gt;Unicode escape sequence&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Raw characters
var string = &quot;ñó&quot;;

// HTML character entities
var string = &quot;&amp;amp;ntilde;&amp;amp;oacute;&quot;;

// Escaped to Latin
var string = &quot;xf1xf3&quot;;

// Escaped to Unicode
var string = &quot;u00f1u00f3&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use the Google Closure Compiler, you’ll get the Unicode escape sequences for free (see issues &lt;a href=&quot;http://code.google.com/p/closure-compiler/issues/detail?id=24&quot;&gt;24&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/closure-compiler/issues/detail?id=68&quot;&gt;68&lt;/a&gt;). Make sure to read the tickets for more benefits of serving your JavaScript files using Unicode escape sequences to output only ASCII characters.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;The easiest way to preemptively solve a lot of character encoding issues is to use UTF-8 for everything, and configure your web server/application to serve the UTF-8 &lt;code&gt;Content-Type&lt;/code&gt; header. If you’re writing JavaScript code that you’re going to distribute to the masses, convert any non-ASCII characters using the proper escape sequences. Your JavaScript will be more portable, and will work out of the box on more server configurations.&lt;/p&gt;

&lt;h4&gt;Sources&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kylescholz.com/blog/2010/01/performance_implications_of_charset.html&quot;&gt;Performance Implications of Charset, an article by Kyle Scholz&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
	<entry>
		<title>Internet Explorer <span class="widow">Array.sort Unreliable</span></title>
		<link href="http://nebraskajs.com/array-sort/"/>
		<updated>2010-02-24T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/array-sort</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;What would you expect to be the result of executing the following code?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create a medium size array, at least 100 items
var obj = &amp;amp;#91;&amp;amp;#93;;
for&amp;amp;#40;var j=, k=150; j
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>If the Menu Fitts, We <span class="widow">Must Acquit</span></title>
		<link href="http://nebraskajs.com/if-the-menu-fitts-we-must-acquit/"/>
		<updated>2010-02-15T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/if-the-menu-fitts-we-must-acquit</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;One of the first things you’ll learn when diving into a self-taught course on usability is the hugely popular Fitts’s Law. In a nutshell, Fitts’s Law tries to predict the time needed to move to a “target area” (usually a link, menu, button, or form element) as a function of the distance to the element and its size. &lt;strong&gt;The bigger/closer the element, the faster a user can move to it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, upon discovering myself a newly minted Mac OS convert from the hugely popular World of Windows, I quickly discovered that the application menus (File, Edit, etc) were one of the glaring differences I’d have to adjust to. Mac OS had all menus separated from the application window, all the way at the top of the screen. Coming from the Windows environment, this seemed unintuitive. But after reading more about Fitts’s Law, I discovered the reasoning: the &lt;a href=&quot;http://www.codinghorror.com/blog/2006/08/fitts-law-and-infinite-width.html&quot;&gt;edges of the screen are treated as an infinite height or width&lt;/a&gt;! Which is just a way of modifying the Fitts’s Law to say: &lt;strong&gt;the easiest things to click on are at the edges of the screen.&lt;/strong&gt; That’s why the close icon or the Start Menu is so easy to access on Windows, and &lt;a href=&quot;http://www.asktog.com/basics/firstPrinciples.html#fittsLaw&quot;&gt;why the Application Menu is at the top of the screen in Mac OS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We know about Fitts’s Law, but &lt;strong&gt;why aren’t we applying it to our web applications?&lt;/strong&gt; Why aren’t we using the power of infinite height/width to help out on our designs? It seems like this crucial usability law has been overlooked on the web, and without good reason. Let’s look at a few applications that get it wrong (of course, in my humble opinion).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/02/Screen-shot-2010-02-15-at-11.08.15-PM.png&quot; title=&quot;Screen shot 2010-02-15 at 11.08.15 PM&quot; alt=&quot;Wordpress Admin Menu&quot; /&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/02/Screen-shot-2010-02-15-at-11.12.57-PM.png&quot; title=&quot;Screen shot 2010-02-15 at 11.12.57 PM&quot; alt=&quot;Google Mail Menu&quot; /&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/02/Screen-shot-2010-02-15-at-11.09.16-PM.png&quot; title=&quot;Screen shot 2010-02-15 at 11.09.16 PM&quot; alt=&quot;Google Reader Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of these screenshots were taken from 100% width designs, with no real reason not to incorporate the ideas behind Fitts’s Law into the menuing system. At first glance when I brought up Google Reader, I was excited. The hover behavior appeared when the mouse cursor was positioned at the very far left of the screen, but was disappointed to discover that the although the hover background color had changed, the entire hover target was not clickable.&lt;/p&gt;

&lt;p&gt;Naturally, I decided to make a test of my own, to test which web browsers allowed &lt;em&gt;Fitts’s Law Menus&lt;/em&gt;. The test case encompassed both left and bottom aligned menus, for completeness. A top menu was excluded, given that the top of the screen is reserved for browser chrome or application menuing. A right menu was also excluded as the right portion of the screen is reserved for the page scrollbar (which is the easiest scrollbar to manipulate with your mouse, per the same rules).&lt;/p&gt;

&lt;p&gt;Also, on the Mac OS 10.6 and Windows XP operating systems, a &lt;em&gt;Fitts’s Law Menu&lt;/em&gt; at the bottom of the screen is not possible, given that the Dock and Taskbar in these operating systems occupy at least a 4 pixel trough of the bottom-most space on the monitor, even as a hover target in “auto-hide” mode. &lt;strong&gt;Everyone is fighting over these crucial and very useful edge pixels.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To test whether or not this behavior is working correctly, &lt;strong&gt;maximize your browser window&lt;/strong&gt; and &lt;strong&gt;move the cursor as far left on the screen as possible&lt;/strong&gt;, but still over the menu. If the links are still clickable, congratulations, your browser works!&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/test/fittmenu/&quot;&gt;View the Demo / Test Page for the Fitts’s Law Menu&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;Compatibility Table&lt;/h2&gt;

&lt;p&gt;Browser&lt;/p&gt;

&lt;p&gt;Operating System&lt;/p&gt;

&lt;p&gt;Left Menu&lt;/p&gt;

&lt;p&gt;Bottom Menu&lt;/p&gt;

&lt;p&gt;Status Bar&lt;/p&gt;

&lt;p&gt;Detail&lt;/p&gt;

&lt;p&gt;Internet Explorer 8&lt;/p&gt;

&lt;p&gt;Windows XP&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;IE8 has a small 3 pixel border on the left and right of each window.&lt;/p&gt;

&lt;p&gt;Internet Explorer 7&lt;/p&gt;

&lt;p&gt;Windows XP&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;IE7 has a small 3 pixel border on the left and right of each window.&lt;/p&gt;

&lt;p&gt;Internet Explorer 6&lt;/p&gt;

&lt;p&gt;Windows XP&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;IE6 has a small 3 pixel border on the left and right of each window.&lt;/p&gt;

&lt;p&gt;Google Chrome&lt;/p&gt;

&lt;p&gt;Windows XP and Mac OS 10.6&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;Mozilla Firefox 3.5 and 3.6&lt;/p&gt;

&lt;p&gt;Windows XP and Mac OS 10.6&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;Safari 4.0.4&lt;/p&gt;

&lt;p&gt;Windows XP and Mac OS 10.6&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The full screen mode of each individual browser was considered outside the scope of this study.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We should stand on the shoulders of giants and reuse the usability studies already completed on software that has gone before us. The left side of the browser window is the best place to utilize Fitts’s Law, and we should move our left-aligned menus on fluid width designs to occupy the space flush with the window’s edge to increase the speed at which those menus will be accessible by users. Having an infinite width menu is a big click target to hit.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>CSS 3 Text: A Tale of <span class="widow">writing-mode Woe</span></title>
		<link href="http://nebraskajs.com/css3-text-writing-mode/"/>
		<updated>2010-02-12T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/css3-text-writing-mode</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;After reading an interesting article on using the &lt;a href=&quot;http://www.thecssninja.com/css/real-text-rotation-with-css&quot;&gt;writing-mode CSS property&lt;/a&gt; to display vertical text (I’m always interested in how to abuse what browsers currently support into something new and exciting), I decided to look into this &lt;code&gt;writing-mode&lt;/code&gt; property and see what opportunities it might present.&lt;/p&gt;

&lt;p&gt;Generally when exploring a development opportunity, I tend to prioritize my adventures towards things that are supported in Internet Explorer first. This often has the biggest cross-browser payoff, since the other browser vendors tend to have a quicker draw than the Microsoft Team. However, surprisingly enough, this &lt;code&gt;writing-mode&lt;/code&gt; study proved the opposite to be true. It seems very interesting that Microsoft has decided to implement a portion of the CSS 3 specification, given its general stance of moving slower than an iceberg to avoid “breaking the web.” But I, for one, welcome our new choose-your-own-adventure standards loving overlords.&lt;/p&gt;

&lt;p&gt;As far as my tests go, the only browser to support the &lt;code&gt;writing-mode&lt;/code&gt; property at all is Internet Explorer, which was very surprising. At it’s heart, though, &lt;code&gt;writing-mode&lt;/code&gt; is just shorthand for two other properties: &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;block-progression&lt;/code&gt;. Luckily, &lt;strong&gt;Firefox, Safari, Chrome and IE back through at least version 6 support the &lt;code&gt;direction&lt;/code&gt; property&lt;/strong&gt; and have proprietary options for rotation, which &lt;strong&gt;allows for emulation of a few of the unsupported &lt;code&gt;writing-mode&lt;/code&gt;‘s&lt;/strong&gt;, but not all of them. The missing piece of &lt;code&gt;writing-mode&lt;/code&gt; emulation belongs to the &lt;code&gt;block-progression&lt;/code&gt; property, which isn’t supported by anyone, and would allow elements to flow reverse vertically (start at the bottom of a block and flow upwards).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s important to note that while &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2009/05/29/the-css-corner-writing-mode.aspx&quot;&gt;IE8 has really set the bar for implementation here&lt;/a&gt; and has chosen to support &lt;code&gt;writing-mode: lr-bt&lt;/code&gt; and &lt;code&gt;writing-mode: rl-bt&lt;/code&gt;, they aren’t used to display any known language text. They’re just included for completeness, and aren’t a part of the &lt;a href=&quot;http://www.w3.org/TR/2003/CR-css3-text-20030514/&quot;&gt;W3C CSS 3 Text Module specification.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://zachleat.com/test/writing-mode/&quot;&gt;View the Demo / Test Page&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;Compatibility Table&lt;/h2&gt;

&lt;p&gt;writing-mode&lt;/p&gt;

&lt;p&gt;Internet Explorer&lt;br/&gt;
(Trident)&lt;/p&gt;

&lt;p&gt;Mozilla Firefox&lt;br/&gt;
(Gecko)&lt;/p&gt;

&lt;p&gt;Apple Safari&lt;br/&gt;
(Webkit)&lt;/p&gt;

&lt;p&gt;Google Chrome&lt;br/&gt;
(Webkit)&lt;/p&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;p&gt;7&lt;/p&gt;

&lt;p&gt;8&lt;/p&gt;

&lt;p&gt;3.6&lt;/p&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lr-tb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rl-tb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lr-bt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rl-bt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tb-lr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tb-rl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bt-lr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;no&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bt-rl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;p&gt;emulatable&lt;/p&gt;

&lt;h2&gt;CSS Code for Emulation&lt;/h2&gt;

&lt;p&gt;writing-mode&lt;/p&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lr-tb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rl-tb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;direction: rtl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lr-bt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Not possible using W3C spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rl-bt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Not possible using W3C spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tb-lr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Not possible using W3C spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tb-rl&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webkit-transform: rotate&amp;amp;#40;90deg&amp;amp;#41;;
-moz-transform: rotate&amp;amp;#40;90deg&amp;amp;#41;;
filter: progid:DXImageTransform.Microsoft.BasicImage&amp;amp;#40;rotation=1&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bt-lr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Not possible using W3C spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bt-rl&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;direction: rtl;
-webkit-transform: rotate&amp;amp;#40;90deg&amp;amp;#41;;
-moz-transform: rotate&amp;amp;#40;90deg&amp;amp;#41;;
filter: progid:DXImageTransform.Microsoft.BasicImage&amp;amp;#40;rotation=1&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Given that &lt;strong&gt;4 of the 6 known writing modes are available&lt;/strong&gt; or available through CSS emulation means we’re in pretty good shape on the internationalization front. Consulting the Microsoft provided table for common use cases, we’re only in trouble when trying to use the “Mongolian script writing system” and an “Arabic script block quote embedded in Mongolian script document.”&lt;/p&gt;

&lt;p&gt;In some far fetched fantasy-world legacy application where a page may use tables for layout, I could see an application team possibly using the &lt;code&gt;direction&lt;/code&gt; property to redistribute the tables for a print stylesheet. But that certainly wouldn’t be a common use case, since using CSS for layouts is going to give you much more flexibility in that regard. If you can think of any other off the wall uses for &lt;code&gt;writing-mode&lt;/code&gt; or &lt;code&gt;direction&lt;/code&gt;, I’d love to hear them!&lt;/p&gt;

&lt;h2&gt;Related&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Very &lt;a href=&quot;http://fantasai.inkedblade.net/style/discuss/vertical-text/#logical&quot;&gt;complete article on CSS 3 writing-mode&lt;/a&gt;, including some &lt;code&gt;direction&lt;/code&gt; properties that don’t exist in the specification (like &lt;code&gt;ttb&lt;/code&gt;, &lt;code&gt;ltr-ttb&lt;/code&gt;, and &lt;code&gt;ltr-btt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=writing-mode&quot;&gt;Bugzilla Bug for writing-mode in Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;As of the time of this writing, I was unable to find any results for writing-mode on the Webkit bug tracker.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Trash that &#8220;Back to <span class="widow">Top&#8221; Link</span></title>
		<link href="http://nebraskajs.com/trash-that-back-to-top-link/"/>
		<updated>2010-02-05T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/trash-that-back-to-top-link</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;blockquote&gt;&lt;p&gt;It would seem that perfection is attained not when no more can be added, but when no more can be removed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Antoine de Saint Exupéry&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;While most would argue that the principles espoused in the above quote might also be applied to the quote itself, it would serve us better to consider how we can &lt;strong&gt;attempt perfection in our User Interface designs&lt;/strong&gt; instead.&lt;/p&gt;

&lt;p&gt;The most complete litany of reasons why you should spend your page weight on more useful bytes has been &lt;a href=&quot;http://www.cs.tut.fi/~jkorpela/www/totop.html&quot;&gt;compiled by Jukka Korpela&lt;/a&gt;, although he seems to both confirm that they are harmful and still use them on his site.&lt;/p&gt;

&lt;p&gt;The rules of engagement I find useful when dealing with the ill-fated “Back to Top” or its ugly stepsister “Top of Page” link are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Delete the link.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Really, you don’t need the link. It’s a &lt;strong&gt;sacred cow remnant&lt;/strong&gt; of a time when people believed that all content needed to be positioned &lt;a href=&quot;http://iampaddy.com/lifebelow600/&quot;&gt;above the page fold&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Guess what? &lt;strong&gt;People know how to scroll!&lt;/strong&gt; They know how to scroll down, they know how to scroll up. Considering this prerequisite has been met, it becomes very apparent that the “Back to Top” link shares an &lt;strong&gt;unnecessary overlap in functionality with the scrollbar&lt;/strong&gt; and is thus, unnecessary itself.&lt;/p&gt;

&lt;p&gt;If you have an incredibly long page with a full set of “Table of Contents” links, it would be better to position your &lt;a href=&quot;http://jqueryfordesigners.com/fixed-floating-elements/&quot;&gt;table of contents fixed to the viewport&lt;/a&gt;, so as to make it always available to the user. If the Table of Contents is always available, the user will never have to click a link as a shortcut to find it.&lt;/p&gt;

&lt;p&gt;While not a usability epidemic, the “Back to Top” link is still widely used. &lt;a href=&quot;http://www.instantshift.com/2009/07/14/90-creative-back-to-top-links-and-best-practices/&quot;&gt;Instant Shift&lt;/a&gt; and &lt;a href=&quot;http://www.smashingmagazine.com/2008/11/27/short-story-about-top-links/&quot;&gt;Smashing Magazine&lt;/a&gt; both have articles with hundreds of examples of sites with these links.&lt;/p&gt;

&lt;p&gt;Don’t agree? If you’re stubborn as hell and hate simplicity, you’re going to keep the link on your page no matter what reasons are presented. In that case, at the very least follow these two guidelines:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;progressive enhancement&lt;/strong&gt;:     Back to Top&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// jQuery Prerequisite
$&amp;amp;#40;'#back-to-top'&amp;amp;#41;.click&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    window.scrollTo&amp;amp;#40;,&amp;amp;#41;;
&amp;amp;nbsp;
    // don't change the hash if not needed
    return false;
&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hide the link&lt;/strong&gt; if the page doesn’t have a scrollbar. If no scrollbar exists, the user will &lt;strong&gt;always be “at the top.”&lt;/strong&gt;     // Continuing with Previous Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    $&amp;amp;#40;'#back-to-top'&amp;amp;#41;.hide&amp;amp;#40;&amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
&amp;amp;nbsp;
// If the page scrolls, we know there is a scrollbar.
$&amp;amp;#40;window&amp;amp;#41;.scroll&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    $&amp;amp;#40;'#back-to-top'&amp;amp;#41;.show&amp;amp;#40;&amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
&amp;amp;nbsp;
// For completeness, you may also want to
//   add logic to the &quot;resize&quot; event.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Really though, &lt;strong&gt;just delete the link.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>The &#8220;24&#8243; Clock <span class="widow">on ALARMd</span></title>
		<link href="http://nebraskajs.com/the-24-clock-on-alarmd/"/>
		<updated>2010-01-24T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/the-24-clock-on-alarmd</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;If you’re only using @font-face for titles and text, you’re missing out on a whole &lt;a href=&quot;http://www.zachleat.com/web/2010/01/03/css-sprites-using-font-face/&quot;&gt;wealth of use cases&lt;/a&gt; that have yet to be explored. For instance, I created a very simple &lt;a href=&quot;http://fontstruct.fontshop.com/fontstructions/show/282059&quot;&gt;7 Segment Display Numeric font&lt;/a&gt; to be used for a skin on &lt;a href=&quot;http://www.alarmd.com/&quot;&gt;alarmd.com&lt;/a&gt; and changed the color using nothing but CSS to create the “24″ Clock (true fans will note that the actual font is italic and &lt;a href=&quot;http://www.panopticist.com/2006/05/there_is_something_weird_going_on_with_the_clock_on_24.php&quot;&gt;has a serif on the 1&lt;/a&gt;). Nonetheless, this is just another useful application of @font-face.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;http://www.fontsquirrel.com/fonts/list/style/Dingbat&quot;&gt;Dingbats section on fontsquirrel&lt;/a&gt; to get your brain going in the same direction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2010/01/Screen-shot-2010-01-24-at-1.22.39-AM.png&quot; title=&quot;Screenshot of the 24 Clock on alarmd.com&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>DIY Webdings &#8211; CSS Sprites <span class="widow">using @font-face</span></title>
		<link href="http://nebraskajs.com/css-sprites-using-font-face/"/>
		<updated>2010-01-03T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/css-sprites-using-font-face</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Almost everyone knows the Webdings font or its sibling Wingdings. Even if you don’t, chances are pretty good that it’s installed on your system.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Webdings is a symbol font designed in 1997 as a response to the need of Web designers for a fast and easy method of incorporating graphics in their pages.&lt;br/&gt;
…&lt;/p&gt;

&lt;p&gt;Webdings is ideal for enriching the appearance of a Web page. Because it’s a font, it can be installed on the user’s system, (or embedded in the document itself) is fully scaleable [sic] and quick to render. It’s a perfect way of including graphics on your site without making users wait for lots of graphic files to download.&lt;/p&gt;

&lt;p&gt;– Source &lt;a href=&quot;http://www.microsoft.com/typography/fonts/family.aspx?FID=5&quot;&gt;Microsoft Typography&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Microsoft was onto something here, and there is a nice parallel that can be drawn between the font and a CSS sprite: namely that multiple images are stored under the guise of a single HTTP request. So, why not create our own font and use it as a CSS sprite? Each character in the font (glyph) will be a single image in the sprite.&lt;/p&gt;

&lt;h2&gt;Why is this awesome?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We can &lt;strong&gt;change the color&lt;/strong&gt; of our font using nothing but CSS &lt;code&gt;color&lt;/code&gt;. This is a big one. We don’t have to have separate images for hover states! And if we want to change the color scheme, there are no new images to generate and we don’t have to make any changes to the font to do so.&lt;/li&gt;
&lt;li&gt;Don’t have to monkey around with difficult to maintain CSS positioning code.&lt;/li&gt;
&lt;li&gt;Fonts scale, graphics don’t. Zooming in on a graphic will result in a pixelated image, but fonts will be smooth like a 6 blade razor shave. Try zooming on the demo file below.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Why is this not awesome?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Font glyphs can only contain one color.&lt;/li&gt;
&lt;li&gt;May experience the Flash of unstyled text (FOUT) while the font is loading.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extra markup required for IE6 and IE7. While @font-face is supported in all non-extinct versions of IE, each @font-face sprite requires a corresponding text character on the screen. For instance, &lt;code&gt;A&lt;/code&gt;, the A is required to display the @font-face Sprite stored under the A glyph.&lt;/p&gt;

&lt;p&gt;Luckily, in most browsers we can inject a character using CSS :after/:before and the &lt;code&gt;content&lt;/code&gt; property. Unfortunately, this is &lt;a href=&quot;http://www.quirksmode.org/css/beforeafter_content.html&quot;&gt;not supported in IE6 or IE7&lt;/a&gt;. I haven’t investigated whether or not this might be solved using other means (CSS expressions) yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Safari asks for permission to use the font with a scary popup box, which I assume is a security precaution gleaned from the Windows Vista playbook.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;The following &lt;a href=&quot;http://jquery-ui.googlecode.com/svn/trunk/tests/static/icons.html&quot;&gt;jQuery UI Icons&lt;/a&gt; are currently used in jQuery UI and are stored in &lt;a href=&quot;http://jqueryui.com/themeroller/images/?new=888888&amp;amp;w=256&amp;amp;h=240&amp;amp;f=png&amp;amp;fltr[]=rcd|256&amp;amp;fltr[]=mask|icons/icons.png&quot;&gt;one big CSS sprite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was pretty trivial to create &lt;a href=&quot;http://fontstruct.fontshop.com/fontstructions/show/jquery_ui_icons_1&quot;&gt;a font&lt;/a&gt; with a subset of the jQuery UI icons (only the first 20, just a proof of concept here) using the wonderful &lt;a href=&quot;http://fontstruct.fontshop.com/&quot;&gt;FontStruct&lt;/a&gt; utility. Then, I took the TTF generated by FontStruct and plugged it into the completely lovely &lt;a href=&quot;http://www.fontsquirrel.com/fontface/generator&quot;&gt;FontSquirrel @font-face Kit Generator&lt;/a&gt;. That gave me everything I needed for a fully cross-browser test.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/test/fonts/font.html&quot;&gt;View the Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let me know what you think!&lt;/p&gt;

&lt;p&gt;Successfully tested on:
*   Google Chrome 4 (Mac)
*   Safari 4 (Mac)
*   Firefox 3.5 (Mac and Windows)
*   Internet Explorer 8
*   With documented limitations above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Internet Explorer 6
*   Internet Explorer 7 (Compatibility Mode in IE8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does not work on (no @font-face support):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Chrome 3 and prior&lt;/li&gt;
&lt;li&gt;Firefox 3 and prior&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Read more about &lt;a href=&quot;http://paulirish.com/2009/bulletproof-font-face-implementation-syntax/&quot;&gt;@font-face support from Paul Irish&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Don&#8217;t Give Up on Internet <span class="widow">Explorer Yet</span></title>
		<link href="http://nebraskajs.com/dont-give-up-on-ie/"/>
		<updated>2009-12-09T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/dont-give-up-on-ie</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;These days, the browser landscape is more fragmented than ever. Were times easier back when IE6 and Firefox ruled the internet? Easier perhaps in terms of the number of browsers you had to launch for testing, but &lt;strong&gt;not better&lt;/strong&gt; for any user’s experience. We are in a new world, where more web browsers are causing developers to become &lt;strong&gt;increasingly pragmatic&lt;/strong&gt; with their designs and code. Sure, standards have created a safe haven under the newest versions of the Big 3 (Firefox, IE, Safari), but the lay majority are still using whatever default has been installed onto their computer, and they probably can’t tell you &lt;a href=&quot;http://googlesystem.blogspot.com/2009/06/browser-is-search-engine.html&quot;&gt;the difference between their web browser and a search engine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We must be resilient to resist the transformation from development pragmatism to user abandonment, especially considering a developer’s trend of being insulated with the latest equipment. We use the newest hardware and download the most sophisticated browser software because we want the best experiences. We stack the cards in our favor. The difficulty lies with the populace that &lt;strong&gt;want a good experience&lt;/strong&gt; (they can tell a fast site from a slow site), but they &lt;strong&gt;don’t want to buy new equipment or install a better browser.&lt;/strong&gt; So the question has become: Where do you place your chips on the spectrum balancing modern hardware/software and the user experience?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/12/zombies.png&quot; title=&quot;zombie&quot; alt=&quot;zombie&quot; /&gt;As web developers, it has become increasingly easy to become disenfranchised with the lay majority’s computing environment. I’ve witnessed this personally after purchasing my first Apple computer, a device curiously immune to the plague of IE 6/7 (8 as well, but I would hesitate to label it as a plague, more like a normal run of the mill flesh eating virus). It’s an interesting phenomenon, being cutoff from the Windows environment (save virtualization) during development. It’s delightfully tempting to declare damnation upon the plague ridden Internet Explorer Zombies, and develop your web presence to standards alone, allowing less focus on the harshest development environment imaginable and more on actual problem solving.&lt;/p&gt;

&lt;p&gt;When developers engage in quasi-web development, perhaps in the form of an iPhone specific web application or an Adobe AIR desktop application, it fosters similar feelings. The work shares many languages and technologies with real (wide-open) web development, but is targeted towards a single web browser. This benefits of this sort of tunnel vision device targeting must be carefully weighed against the penalties you’re paying in narrowed default-install client compatibility. At that point, it’s just &lt;strong&gt;friends with benefits&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/12/google-wave-ie8.png&quot; title=&quot;Denial of Access with Internet Explorer Screenshot&quot; alt=&quot;Denial of Access with Internet Explorer Screenshot&quot; /&gt;&lt;br/&gt;
Google Wave, in fact, requires the use of Safari, Firefox, Chrome, or the Google Chrome Frame plugin (which doesn’t count as actual browser support). As of the time this article was written, as many as &lt;strong&gt;64% of all users&lt;/strong&gt; (&lt;a href=&quot;http://en.wikipedia.org/wiki/Usage_share_of_web_browsers&quot;&gt;source&lt;/a&gt;) are met with the above screen when trying to access Google Wave. Let’s be clear: &lt;strong&gt;Ease of development is not an excuse to abandon users.&lt;/strong&gt; Whatever happened to &lt;a href=&quot;http://www.zachleat.com/web/2009/08/29/device-independence/&quot;&gt;Device Independence&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Not surprisingly, Google Wave’s stand against Internet Explorer &lt;strong&gt;has not started a trend&lt;/strong&gt;. Instead of all out war, the community at large has decided that subtlety is what’s needed to win this fight. Let’s hold back the &lt;a href=&quot;http://en.wikipedia.org/wiki/Sexual_Healing&quot;&gt;sexual healing&lt;/a&gt; of rounded corners, even though perhaps users will call our design harsh or cold. Let’s give them plain buttons instead of nice three dimensional buttons with text and box shadows, even though they may be less actionable.&lt;/p&gt;

&lt;p&gt;Let’s make it easier on ourselves at the expense of the user experience of The Zombie Majority. We make this sacrifice because we assume that Zombies won’t be able to tell the difference between eating a big juicy Einstein brain and a smaller but nonetheless still tasty brush clearing George W. And you know what, &lt;strong&gt;I think we’re right.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Updated&lt;/strong&gt; to include a few more thoughts on Adobe AIR and the iPhone.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Device Independence on the <span class="widow">Open Web</span></title>
		<link href="http://nebraskajs.com/device-independence/"/>
		<updated>2009-08-29T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/device-independence</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Open Web advocacy can get pretty lonely working in Big Enterprise. Armed with slow moving standards bodies, and held back by antiquated browser support, architectural battles over tools and frameworks can get pretty hairy if you don’t approach them with the right frame of mind.&lt;/p&gt;

&lt;p&gt;Big Enterprise is traditionally known for creating development environments that foster a “get it done” mentality, often rewarding results over correctness (mileage, of course, may vary).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My company uses IE6, and the application works in IE6, so it’s done!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This little quagmire is amplified by the fact that when using Open Web technology, there are many ways to get things done, and most of them are incorrect. But those mistakes don’t manifest themselves until the project is in the hands of the end user, whom we often punish for our oversight.&lt;/p&gt;

&lt;p&gt;But there is hope. Using the power of web standards and Open Web best practices, we can achieve something panoramically, not microscopically, beautiful.&lt;/p&gt;

&lt;p&gt;The secret sauce of building for the Web isn’t its distribution model, in which updates are managed on the web server without the need to update software on the client (although the Anti-IE6 vigilantes would tell you differently). It most certainly isn’t development efficiency, as most people new to the game will so readily inform you of. Cross browser quirks due to non-standard browser implementations of CSS and JavaScript, or vague standards specifications have seen to that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When I was writing Visual Basic, I got my job done so much quicker and easier!&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;The power of the Open Web is Device Independence.&lt;/h2&gt;

&lt;p&gt;Visitors to our sites &lt;strong&gt;shouldn’t be met with warnings&lt;/strong&gt; about what device they’ve chosen to use.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This site viewable only in IE7 , Firefox, Chrome, or Safari, and at minimum 1024×768 resolution.&lt;/p&gt;

&lt;p&gt;This site requires Flash or Silverlight&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I realize that this is a controversial stance, especially given that most sites are dropping support for IE6, and more are relying on Flash and Silverlight plugins. &lt;strong&gt;Architect applications to your client device usage statistics, and don’t let your tools shape the statistics for you.&lt;/strong&gt; Using techniques like progressive enhancement, we can ensure that our sites degrade gracefully to the capabilities of the client device. At it’s truest form, this is basic accessibility. But, Device Independence might be a more accurate term, since accessibility is unfortunately an overloaded term scoped solely with devices tied to disabilities (screen readers, for example). While screen readers are a very important piece, there is a bigger picture.&lt;/p&gt;

&lt;p&gt;When the iPhone came out, there was an uproar because it didn’t support Flash, for battery life and other reasons. But the uproar was from developers who had designed applications specifically for Flash! Would you say that those Flash applications were designed with device independence in mind? YouTube got around this by encoding their videos in MP4 format, which arguably has a higher device independence rating than the Flash format.&lt;/p&gt;

&lt;p&gt;Keep in mind that we’re &lt;strong&gt;not attempting to handle every permutation of end user browser settings&lt;/strong&gt;, since most don’t change the defaults. Instead we are trying to scoop up the largest base of supported devices with the least amount of effort! Who cares if an end user disabled JavaScript in their preferences? I’m more worried about the mobile browser that doesn’t even support JavaScript at all. But when you use Open Web properly, you get support for both!&lt;/p&gt;

&lt;h2&gt;Output Device Independence&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Full Web Browsers: Does your site work in Opera? Don’t worry about pixel perfection, that’s something completely different — does it work?&lt;/li&gt;
&lt;li&gt;Web Browsers on Mobiles&lt;/li&gt;
&lt;li&gt;Search Engine Spiders and other Screen Scrapers&lt;/li&gt;
&lt;li&gt;Screen Readers&lt;/li&gt;
&lt;li&gt;Printers: Ever had to make an entirely separate page for print-friendly version of your application? Flash/Silverlight &lt;strong&gt;do not&lt;/strong&gt; print well&lt;/li&gt;
&lt;li&gt;Televisions: Xbox 360, Wii, and Other Media Center Devices&lt;/li&gt;
&lt;li&gt;Projectors&lt;/li&gt;
&lt;li&gt;&lt;em&gt;and more…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Take a look at the &lt;a href=&quot;http://www.w3.org/TR/CSS21/media.html#media-types&quot;&gt;CSS specification for media types&lt;/a&gt;. The standards are there! Support for CSS media types isn’t fool proof by any means, but the end goal is clearly visible.&lt;/p&gt;

&lt;h2&gt;Input Device Independence&lt;/h2&gt;

&lt;p&gt;But I’m not just talking about output device independence either. User interfaces should be adaptable to different input devices as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mouse&lt;/li&gt;
&lt;li&gt;Keyboard (often overlooked in web applications)&lt;/li&gt;
&lt;li&gt;Touch Screens (Single and &lt;a href=&quot;http://hacks.mozilla.org/2009/08/multi-touch-firefox/&quot;&gt;Multi-touch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Voice, Motion Capture, and Facial Recognition (the standards and technology aren’t quite there yet, but &lt;a href=&quot;http://hacks.mozilla.org/2009/06/connecting-html5-video/&quot;&gt;progress is being made&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;and more…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The world is developing the Open Web, and it isn’t limited by a single company’s goals and timelines. At times, Open Web may seem like it’s a very slow moving &lt;strong&gt;glacier&lt;/strong&gt; headed our way, but what else can you do but laugh when companies try to &lt;strong&gt;power their Titanic right through it&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Article originally inspired by &lt;a href=&quot;http://developer.yahoo.com/yui/articles/gbs/#history&quot;&gt;Yahoo’s Graded Browser Support&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Quick Performance Tip: jQuery <span class="widow">and addClass</span></title>
		<link href="http://nebraskajs.com/quick-performance-tip-jquery-and-addclass/"/>
		<updated>2009-06-30T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/quick-performance-tip-jquery-and-addclass</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Abstractions are helpful and dangerous. But the more we know about a library’s internals, the less danger we’ll be in later. Here’s an issue I ran into where I had assumed that jQuery would be optimized for this case, but it wasn’t. I’ll go over my bad assumption and how to workaround it.&lt;/p&gt;

&lt;p&gt;As of jQuery 1.3.2, adding multiple HTML classes to an element using jQuery’s addClass method will add them one at a time, modifying the className property of an element for each class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;'#myElement'&amp;amp;#41;.addClass&amp;amp;#40;'myFirstClass mySecondClass'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the original code inside of jQuery 1.3.2. Note how the classNames string is split, and elem.className is changed for each split entry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add: function&amp;amp;#40; elem, classNames &amp;amp;#41; &amp;amp;#123;
    jQuery.each&amp;amp;#40;&amp;amp;#40;classNames || &quot;&quot;&amp;amp;#41;.split&amp;amp;#40;/s /&amp;amp;#41;, function&amp;amp;#40;i, className&amp;amp;#41;&amp;amp;#123;
        if &amp;amp;#40; elem.nodeType == 1 &amp;amp;&amp;amp; !jQuery.className.has&amp;amp;#40; elem.className, className &amp;amp;#41; &amp;amp;#41;
            elem.className  = &amp;amp;#40;elem.className ? &quot; &quot; : &quot;&quot;&amp;amp;#41;   className;
        &amp;amp;#125;&amp;amp;#41;;
    &amp;amp;#125;,
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This may cause longer than needed delays, as reflow may occur after every class is added individually. If absolutely necessary, you can always fall back to modifying the className yourself, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;'#myElement'&amp;amp;#41;.each&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
   this.className  = ' myFirstClass mySecondClass';
&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most likely, this isn’t a tip that will be needed, but it is useful to be aware of.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Adobe Reverts Flex Store to <span class="widow">Open Web</span></title>
		<link href="http://nebraskajs.com/adobe-reverts-flex-store-to-open-web/"/>
		<updated>2009-05-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/adobe-reverts-flex-store-to-open-web</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;A few weeks ago in the process of doing some research about the Adobe Flex platform, I came across their online store, a dogfooded full page application using Flex.&lt;/p&gt;

&lt;p&gt;This morning I went back to the &lt;a href=&quot;https://store1.adobe.com/cfusion/store/html/index.cfm?store=OLS-US&amp;amp;#&quot;&gt;same URL&lt;/a&gt; to find a site that was no longer using the full page Flex application I had been expecting. Instead it was now using native Open Web technology.&lt;/p&gt;

&lt;p&gt;Naturally, my first assumption was that I had hallucinated the original research. But as it turns out, I wasn’t the only one that noticed the Flex application. This blogger &lt;a href=&quot;http://www.cfinternals.org/blog/2007/06/adobes_flashfle.html&quot;&gt;complained about the accessibility&lt;/a&gt; of a full page Flash/Flex store. Another blogger had a &lt;a href=&quot;http://www.abdulqabiz.com/blog/archives/adobe/adobe_store_is_still.php&quot;&gt;similar complaint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have no idea how long the Flash/Flex Adobe store experiment went on before they changed it back. I’m just glad I’m not crazy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Turns out they are using a whitelist/blacklist of user agents to decide whether or not to show the Flex store. The &lt;a href=&quot;https://store1.adobe.com/cfusion/store/index.cfm&quot;&gt;original entry point&lt;/a&gt; above is incorrect, and shouldn’t have the html subdirectory. If you go to the site in Chrome, it will redirect you to the HTML version. My apologies, Adobe, although I do think the HTML version is much more accessible.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Performance Caveat with jQuery Selectors and <span class="widow">Live Events</span></title>
		<link href="http://nebraskajs.com/performance-caveat-with-jquery-selectors-and-live-events/"/>
		<updated>2009-05-08T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/performance-caveat-with-jquery-selectors-and-live-events</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Prerequisite: Knowledge/Experience with &lt;a href=&quot;http://docs.jquery.com/Events/live&quot;&gt;jQuery Live Events&lt;/a&gt; (new in jQuery 1.3), and the concept of &lt;a href=&quot;http://icant.co.uk/sandbox/eventdelegation/&quot;&gt;Event Delegation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When developing on the front end, it’s easy to prioritize correctness over performance. Performance is the step child that gets lost while you’re pulling your hair out worrying about cross browser compatibility. It’s very important to regularly benchmark your JavaScript code, using a &lt;a href=&quot;http://getfirebug.com/js.html&quot;&gt;profiler&lt;/a&gt; or some form of benchmarking code paired with a cross browser logging utility (see &lt;a href=&quot;http://getfirebug.com/lite.html&quot;&gt;Firebug Lite&lt;/a&gt;, &lt;a href=&quot;http://developer.yahoo.com/yui/logger/&quot;&gt;YUI Logger&lt;/a&gt;, or &lt;a href=&quot;http://log4javascript.org/&quot;&gt;log4javascript&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Event delegation is a great way to program for performance. The &lt;code&gt;live&lt;/code&gt; jQuery method was a great addition to the jQuery core, it makes event delegation really easy (see also the &lt;code&gt;closest&lt;/code&gt; method). Unfortunately, it isn’t quite what I expected.&lt;/p&gt;

&lt;p&gt;For example, say you have a page containing approximately 500 custom tooltip components on it (not typical, but stick with me, this is to prove a point). How might one go about adding a simple live event to activate each tooltip when the user hovers over it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;'span.myTooltip'&amp;amp;#41;.live&amp;amp;#40;'mouseover', function&amp;amp;#40;event&amp;amp;#41; &amp;amp;#123;
    // activate tooltip
&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the problem? jQuery will actually run the selector on the document, resulting in unnecessary overhead. jQuery is only assigning a single event handler to top level of the document, why does it need to know what nodes it will be binding to before assigning the callback?&lt;/p&gt;

&lt;p&gt;What can we do? Let’s create a jQuery function, instead of a method, so it won’t query the document. Try this on for size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.live = function&amp;amp;#40;selector, type, fn&amp;amp;#41;
&amp;amp;#123;
    var r = $&amp;amp;#40;&amp;amp;#91;&amp;amp;#93;&amp;amp;#41;;
    r.selector = selector;
    if&amp;amp;#40;type &amp;amp;&amp;amp; fn&amp;amp;#41; &amp;amp;#123;
        r.live&amp;amp;#40;type, fn&amp;amp;#41;;
    &amp;amp;#125;
    return r;
&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// Single event type
$.live&amp;amp;#40;'span.myTooltip', 'mouseover', function&amp;amp;#40;event&amp;amp;#41; &amp;amp;#123;
    // activate tooltip
&amp;amp;#125;&amp;amp;#41;;
&amp;amp;nbsp;
// Multiple event types (you can call the jQuery live method on the return value from the function)
$.live&amp;amp;#40;'span.myTooltip'&amp;amp;#41;
    .live&amp;amp;#40;'mouseover', function&amp;amp;#40;event&amp;amp;#41; &amp;amp;#123;
        // activate tooltip
    &amp;amp;#125;&amp;amp;#41;
    .live&amp;amp;#40;'mouseout', function&amp;amp;#40;event&amp;amp;#41; &amp;amp;#123;
        // deactivate tooltip
    &amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, as a side note, keep in mind that jQuery &lt;code&gt;live&lt;/code&gt; &lt;strong&gt;doesn’t&lt;/strong&gt; support space separated events, like &lt;code&gt;bind&lt;/code&gt; does.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Will not work.
$&amp;amp;#40;'span.myTooltip'&amp;amp;#41;.live&amp;amp;#40;'mouseover mouseout', function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Jonathan Sharp at The <span class="widow">Ajax Experience</span></title>
		<link href="http://nebraskajs.com/jonathan-sharp-at-the-ajax-experience/"/>
		<updated>2009-02-20T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/jonathan-sharp-at-the-ajax-experience</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>ALARMd Unix Time Format for <span class="widow">1234567890 Day</span></title>
		<link href="http://nebraskajs.com/alarmd-unix-time-format-for-1234567890-day/"/>
		<updated>2009-02-13T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/alarmd-unix-time-format-for-1234567890-day</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;In honor of &lt;a href=&quot;http://www.1234567890day.com/&quot;&gt;1234567890 day&lt;/a&gt;, I’ve added the Unix time format to &lt;a href=&quot;http://www.alarmd.com/&quot;&gt;ALARMd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Options&lt;/strong&gt;, then the &lt;strong&gt;Clock Format tab&lt;/strong&gt; to change to Unix Time. Enjoy!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Registration Forms Suck, Let&#8217;s <span class="widow">Mitigate Suckiness</span></title>
		<link href="http://nebraskajs.com/registration-forms-suck-lets-mitigate-suckiness/"/>
		<updated>2009-01-10T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/registration-forms-suck-lets-mitigate-suckiness</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/01/signup-form.png&quot; title=&quot;signup-form&quot; alt=&quot;Signup Form&quot; /&gt; A lot of people &lt;strong&gt;complain about registration forms&lt;/strong&gt;. Some people have suggested getting rid of them altogether, allowing users to utilize login credentials from accounts they already have through OpenID. But even with a highly technical audience, OpenID adoption is &lt;a href=&quot;http://blog.stackoverflow.com/2008/10/stack-overflow-openid-case-study/&quot;&gt;problematic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, some sites have gone two ways, allowing OpenID, but also a proprietary registration system. This too, &lt;a href=&quot;http://www.wetpaintcentral.com/page/OpenID?t=anon&quot;&gt;is problematic&lt;/a&gt;. It would seem that given a choice, the &lt;strong&gt;John Doe the Plumber style user will choose a proprietary account&lt;/strong&gt; over the confusing user experience presented to them through OpenID.&lt;/p&gt;

&lt;p&gt;But the annoyance doesn’t just lie with account registration for web applications. Typing your personal information on every blog you comment at is also repetitive and unnecessary. &lt;a href=&quot;http://www.ajaxian.com&quot;&gt;Some sites&lt;/a&gt; even require account registration for something so minor and transient as a blog comment.&lt;/p&gt;

&lt;p&gt;Unfortunately, for the time being, it looks like &lt;strong&gt;registration forms are here to stay&lt;/strong&gt;. So, what can we do to make those registration forms more usable, more efficient, and ultimately downright friendly? I know that you’re ahead of me on this one: &lt;strong&gt;Let’s auto-complete information for the user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Please keep in mind that this power can be used for both good and evil. Essentially what we’re discussing here is data mining available information from various social networking sites on the internet, trying to glean personal information about an end user that has volunteered a piece of their data already. What can we get from what we already have?&lt;/p&gt;

&lt;p&gt;Once a user has typed in their &lt;strong&gt;e-mail address&lt;/strong&gt;, we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve Twitter profile information (&lt;a href=&quot;http://www.wait-till-i.com/2009/01/08/using-twitter-as-a-data-provider-to-automatically-fill-forms/&quot;&gt;example shown on Chris Heilmann’s blog&lt;/a&gt;):

&lt;ul&gt;
&lt;li&gt;Full Name&lt;/li&gt;
&lt;li&gt;Short Personal Description&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Web site URL&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Favorite Colors (used on their profile)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Retrieve an &lt;strong&gt;avatar&lt;/strong&gt; if they’ve registered for the Gravatar web service (&lt;a href=&quot;http://www.zachleat.com/web/2009/01/08/scare-your-visitors-with-this-javascript-gravatar-plugin/&quot;&gt;See my earlier post discussing this&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Get their &lt;a href=&quot;http://gdata-javascript-client.googlecode.com/svn/trunk/samples/calendar/simple_sample/simple_sample.html&quot;&gt;upcoming calendar events&lt;/a&gt; from a public Google Calendar. (Perhaps not as useful for autocompleting forms, but interesting)&lt;/li&gt;
&lt;li&gt;Find their &lt;a href=&quot;http://www.flickr.com/services/api/flickr.people.findByEmail.html&quot;&gt;UID on Flickr&lt;/a&gt;, which gives you &lt;a href=&quot;http://www.flickr.com/services/api/flickr.people.getInfo.html&quot;&gt;a source&lt;/a&gt; for:

&lt;ul&gt;
&lt;li&gt;Full Name&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Flickr Avatar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you know any of their social networking usernames, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/mybloglog/V1/member_find_byservice.html&quot;&gt;find their MyBlogLog profile&lt;/a&gt;, if they’ve linked the service to their account (&lt;a href=&quot;http://mybloglog.yahooapis.com/v1/user/service/twitter/zachleat?AppId=YahooDemo&amp;amp;format=xml&quot;&gt;Sample query, I added my twitter&lt;/a&gt;). Now we have:

&lt;ul&gt;
&lt;li&gt;MyBlogLog Screen Name and ID, from which you get their &lt;a href=&quot;http://developer.yahoo.com/mybloglog/V1/member_find_byid.html&quot;&gt;MyBlogLog profile&lt;/a&gt;:

&lt;ul&gt;
&lt;li&gt;Nickname&lt;/li&gt;
&lt;li&gt;Picture&lt;/li&gt;
&lt;li&gt;Age&lt;/li&gt;
&lt;li&gt;Sex&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;A list of tags they use to describe themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MyBlogLog Avatar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Those are only some of the proof of concept API’s that I’ve listed here. The interesting piece of this, is that once you have a small piece of information, it &lt;strong&gt;opens up the door to other searches&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One can only imagine how many leaves are in this tree. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook’s &lt;a href=&quot;http://wiki.developers.facebook.com/index.php/Users.getInfo&quot;&gt;Users.getInfo&lt;/a&gt; (&lt;a href=&quot;http://wiki.developers.facebook.com/index.php/JavaScript_Client_Library&quot;&gt;in JavaScript&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Yahoo’s Social Tools, get an &lt;a href=&quot;http://developer.yahoo.com/social/rest_api_guide/introspective-guid-resource.html&quot;&gt;end user’s GUID&lt;/a&gt; and go to town on &lt;a href=&quot;http://developer.yahoo.com/social/rest_api_guide/social_dir_api.html&quot;&gt;their profile&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Google Contacts, I didn’t even start to look through &lt;a href=&quot;http://code.google.com/apis/contacts/&quot;&gt;their API’s&lt;/a&gt;.
Before you start jumping the privacy fence to a self induced heart attack, remember that &lt;strong&gt;all this information has been volunteered&lt;/strong&gt; by each individual participating in each of these services. Remember, with great power comes great responsibility.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What do you think? Scary or useful?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Scare Your Visitors with this JavaScript <span class="widow">Gravatar Plugin</span></title>
		<link href="http://nebraskajs.com/scare-your-visitors-with-this-javascript-gravatar-plugin/"/>
		<updated>2009-01-08T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/scare-your-visitors-with-this-javascript-gravatar-plugin</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;h2&gt;&lt;a href=&quot;/javascript/gravatar/index.html&quot;&gt;See the Demo&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;a href=&quot;/javascript/gravatar/jquery.gravatar.js&quot;&gt;Download the Source Code&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/01/blog-comment.png&quot; title=&quot;blog-comment&quot; alt=&quot;Tournology Blog Comment Form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a use case. An unregistered visitor visits your blog, and decides that your &lt;strong&gt;content is so good that it merits a comment&lt;/strong&gt;! Congratulations, you’ve fooled them! Now you can &lt;a href=&quot;http://www.centernetworks.com/twply-twitter-replies-auction&quot;&gt;twply their account details for $1200 on Sitepoint&lt;/a&gt;! Just kidding. But generally, when you visit a blog’s commenting section (such as the &lt;a href=&quot;http://www.tournology.com/blog/&quot;&gt;Tournology Blog&lt;/a&gt; shown above), you’ll see a simple form to authenticate you’re not a spammer, generally including (among other things) an e-mail address field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/01/blog-comment-after.png&quot; title=&quot;blog-comment-after&quot; alt=&quot;Tournology Blog Comment Form With Gravatar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, since they’re typing their e-mail address, wouldn’t it be cool if we could &lt;strong&gt;show them their gravatar&lt;/strong&gt; right there, inline with the blog comment form? Well, that’s now possible with my new &lt;strong&gt;&lt;a href=&quot;http://www.zachleat.com/javascript/gravatar/jquery.gravatar.js&quot;&gt;JavaScript Gravatar Plugin&lt;/a&gt;&lt;/strong&gt;! It doesn’t have any server side language dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2009/01/gravatar-signup.png&quot; title=&quot;gravatar-signup&quot; alt=&quot;Gravatar Signup Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hell, &lt;a href=&quot;http://en.gravatar.com/&quot;&gt;gravatar.com&lt;/a&gt; could even use this to &lt;strong&gt;improve the user experience of registering your e-mail account&lt;/strong&gt;. Right now it does a full page refresh and doesn’t even show you a preview!&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/javascript/gravatar/index.html&quot;&gt;See the Demo&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;a href=&quot;/javascript/gravatar/jquery.gravatar.js&quot;&gt;Download the Source Code&lt;/a&gt;&lt;/h2&gt;

&lt;h2&gt;Licensing&lt;/h2&gt;

&lt;p&gt;Licensed under the &lt;a href=&quot;http://sam.zoy.org/wtfpl/&quot;&gt;WTFPL&lt;/a&gt;, as highly recommended by &lt;a href=&quot;http://foohack.com/&quot;&gt;Isaac Schleuter&lt;/a&gt; (&lt;a href=&quot;/web/2007/04/05/google-using-yui-grids-css/&quot;&gt;see discussion&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;JavaScript Dependencies:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Requires &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; (Feel free to port and post a link!)&lt;/li&gt;
&lt;li&gt;Requires &lt;a href=&quot;http://pajhome.org.uk/crypt/md5/md5.js&quot;&gt;md5.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Example Usage:&lt;/h2&gt;

&lt;p&gt;Easiest form, onblur of email text input field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;'#emailTextField'&amp;amp;#41;.blur&amp;amp;#40;function&amp;amp;#40;event&amp;amp;#41;
&amp;amp;#123;
    $&amp;amp;#40;this&amp;amp;#41;.after&amp;amp;#40;$.gravatar&amp;amp;#40;$&amp;amp;#40;this&amp;amp;#41;.val&amp;amp;#40;&amp;amp;#41;&amp;amp;#41;&amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Showing all options, again onblur of email text input field.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;'#email'&amp;amp;#41;.blur&amp;amp;#40;function&amp;amp;#40;event&amp;amp;#41;
&amp;amp;#123;
    $&amp;amp;#40;'body'&amp;amp;#41;.append&amp;amp;#40;$.gravatar&amp;amp;#40;$&amp;amp;#40;this&amp;amp;#41;.val&amp;amp;#40;&amp;amp;#41;, &amp;amp;#123;
        // integer size: between 1 and 512, default 80 (in pixels)
        size: 200,
        // maximum rating (in order of raunchiness, least to most): g (default), pg, r, x
        rating: 'pg',
        // url to define a default image (can also be one of: identicon, monsterid, wavatar)
        image: 'identicon'
    &amp;amp;#125;&amp;amp;#41;&amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This script has been moved to &lt;a href=&quot;http://github.com/zachleat/jQuery-Gravatar&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>DOMContentLoaded Inconsistencies (in Browsers and <span class="widow">JavaScript Libraries)</span></title>
		<link href="http://nebraskajs.com/domcontentloaded-inconsistencies/"/>
		<updated>2008-12-04T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/domcontentloaded-inconsistencies</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Quick Summary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Prototype and Dojo are the only major JavaScript frameworks that correctly time the DOMContentLoaded inside of an iframe in Internet Explorer. MooTools comes close and both YUI and jQuery both exhibit incorrect behavior.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Usually, browsers that have a native DOMContentLoaded event will fire it after both JavaScript and CSS (external script, link tags) have loaded. But Opera fires prior to CSS link tags loading.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We all know the problem, but we may not all call it the same thing. Every popular JavaScript library has its own name for the DOMContentLoaded event.&lt;/p&gt;

&lt;p&gt;JavaScript Library&lt;/p&gt;

&lt;p&gt;Event Name&lt;/p&gt;

&lt;p&gt;YUI&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/docs/YAHOO.util.Event.html#method_onDOMReady&quot;&gt;DOMReady&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jQuery&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.jquery.com/Events/ready&quot;&gt;ready&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MooTools&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mootools.net/docs/Utilities/DomReady&quot;&gt;domready&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prototype&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.prototypejs.org/api/document/observe&quot;&gt;dom:loaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dojo&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://api.dojotoolkit.org/jsdoc/dojo/1.2/dojo.addOnLoad&quot;&gt;addOnLoad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the naming scheme isn’t the only part about this event that’s inconsistent. There are a few hacks strewn around the net that have been bastardized (read: modified to the will of library authors) into each individual framework. These have been posted time and time again, but for post completeness are the following:&lt;/p&gt;

&lt;p&gt;IE DOMContentLoaded Hack&lt;/p&gt;

&lt;p&gt;Description&lt;/p&gt;

&lt;p&gt;&lt;code&gt;doScroll&lt;/code&gt; by Diego Perini&lt;/p&gt;

&lt;p&gt;Uses a &lt;code&gt;doScroll&lt;/code&gt; method call, which will throw an error if the &lt;code&gt;ondocumentready&lt;/code&gt; event hasn’t fired on the &lt;strong&gt;primary document&lt;/strong&gt; (take note of the usage of the word primary). Once &lt;code&gt;doScroll&lt;/code&gt; doesn’t throw an error, it is assumed the DOM has loaded.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onreadystatechange&lt;/code&gt; and &lt;code&gt;readyState&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onreadystatechange&lt;/code&gt; &lt;em&gt;“fires when the state of the object has changed,”&lt;/em&gt; and changes the &lt;code&gt;readyState&lt;/code&gt; property of the object through the following states (not all apply to every type of element): &lt;code&gt;uninitialized&lt;/code&gt;, &lt;code&gt;loading&lt;/code&gt;, &lt;code&gt;loaded&lt;/code&gt;, &lt;code&gt;interactive&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt;. (source: MSDN) Usually set on the document object, or a script element (as used in the Script Defer method described next.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dean.edwards.name/weblog/2005/09/busted/&quot;&gt;Script Defer&lt;/a&gt; by Dean Edwards&lt;/p&gt;

&lt;p&gt;document.write’s a script tag with a &lt;code&gt;defer&lt;/code&gt; attribute. Defer will cause the browser to delay execution of the script until the DOM has successfully loaded (using onreadystatechange on the script tag until its readyState is “complete”). Without defer, the browser would execute any script tag immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dean.edwards.name/weblog/2005/09/busted2/&quot;&gt;HTC Behavior&lt;/a&gt; by Dean Edwards&lt;/p&gt;

&lt;p&gt;Much less popular approach using proprietary HTC Behavior files. Generally avoided due to the addition of an extra HTTP request to the page in order to download the external .htc file. As a side note, if using this approach, the &lt;code&gt;&quot;oncontentready&quot;&lt;/code&gt; event will work better than the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms531024.aspx&quot;&gt;“ondocumentready”&lt;/a&gt; event used by Mr. Edwards.&lt;/p&gt;

&lt;p&gt;Ghetto Method&lt;/p&gt;

&lt;p&gt;Of course, the easiest way to do it is to put a script tag right above your ending `` tag that triggers the event manually. This really only works if you have full control of the content, and isn’t really a library solution. Worth noting though.&lt;/p&gt;

&lt;p&gt;[&lt;img src=&quot;http://javascript.nwbox.com/IEContentLoaded/&quot; alt=&quot;Benchmark for Library DOMContentLoaded Implementations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Benchmark for Library DOMContentLoaded Implementations&lt;/em&gt;]&lt;a href=&quot;http://javascript.nwbox.com/IEContentLoaded/&quot;&gt;10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created a benchmark trying to answer the simple question: when does the DOMContentLoaded event fire? Each implementation has different effects, especially in iframes and with stylesheets.&lt;/p&gt;

&lt;h1&gt;What Works&lt;/h1&gt;

&lt;p&gt;The Internet Explorer hacks presented above are reliable when used on a standalone document (not inside of an iframe).&lt;/p&gt;

&lt;p&gt;Mozilla Firefox, Safari, Chrome, and Opera all contain a native DOMContentLoaded event that each framework uses to consistently fire at the correct time. So, it isn’t even worth summarizing the results for tests in every browser with a native DOMContentLoaded event, except Opera. Opera took a different design approach with their DOMContentLoaded event (certainly not wrong, just different), which we’ll analyze below.&lt;/p&gt;

&lt;h1&gt;Internet Explorer inside an Iframe&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;All libraries below did no branching based on IE versions, all used the same method for IE6, IE7, or IE8. I performed no tests in IE8, however.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;JavaScript Library&lt;/p&gt;

&lt;p&gt;Method&lt;/p&gt;

&lt;p&gt;Waited for:&lt;/p&gt;

&lt;p&gt; CSS&lt;/p&gt;

&lt;p&gt;YUI 2.6.0&lt;/p&gt;

&lt;p&gt;doScroll, setTimeout&lt;/p&gt;

&lt;p&gt;Incorrect: Fires almost immediately (~20ms)&lt;/p&gt;

&lt;p&gt;jQuery 1.2.6&lt;/p&gt;

&lt;p&gt;window onload&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;Prototype 1.6.0.3&lt;/p&gt;

&lt;p&gt;Script Defer&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;MooTools 1.2.1&lt;/p&gt;

&lt;p&gt;doScroll and set innerHTML, setTimeout&lt;/p&gt;

&lt;p&gt;*&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;Dojo 1.2.0&lt;/p&gt;

&lt;p&gt;Script Defer&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://javascript.nwbox.com/IEContentLoaded/&quot;&gt;IEContentLoaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;doScroll, document.onreadystatechange&lt;/p&gt;

&lt;p&gt;Incorrect: JavaScript error.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.thefutureoftheweb.com/blog/adddomloadevent&quot;&gt;addDOMLoadEvent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Script Defer&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;For some reason, not only did the MooTools library not wait for the body script to trigger DOMContentLoaded, the body script never executed at all.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The &lt;strong&gt;most important takeaway&lt;/strong&gt; from this blog post are the successful methods of faking DOMContentLoaded in Internet Explorer. The obvious &lt;strong&gt;library winners here are Prototype and Dojo&lt;/strong&gt;, with the addDOMLoadEvent script also exhibiting correct behavior. MooTools is a close runner up, and I would be interested to find out why it didn’t execute the body script (that’s left for another day, or perhaps a generous commenter).&lt;/p&gt;

&lt;h1&gt;Opera 9.6&lt;/h1&gt;

&lt;p&gt;JavaScript Library&lt;/p&gt;

&lt;p&gt;Method&lt;/p&gt;

&lt;p&gt;Waited for:&lt;/p&gt;

&lt;p&gt; CSS&lt;/p&gt;

&lt;p&gt;YUI 2.6.0&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;jQuery 1.2.6&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded Code to wait for Stylesheets&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;Prototype 1.6.0.3&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;MooTools 1.2.1&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;Dojo 1.2.0&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://javascript.nwbox.com/IEContentLoaded/&quot;&gt;IEContentLoaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;N/A to Opera&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.thefutureoftheweb.com/blog/adddomloadevent&quot;&gt;addDOMLoadEvent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Native DOMContentLoaded&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;X&lt;/p&gt;

&lt;p&gt;As you can see above, &lt;strong&gt;Opera typically will fire DOMContentLoaded prior to stylesheets loading&lt;/strong&gt; successfully (ignoring the jQuery specific code to provide consistency cross-browser)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;http://www.adamkoch.com/&quot;&gt;Adam Koch&lt;/a&gt; for first pointing me in the direction of jQuery in an iframe ignoring DOMContentLoaded in IE.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; There is an open ticket for &lt;a href=&quot;http://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=2008289&amp;amp;group_id=165715&amp;amp;atid=836476&quot;&gt;YUI on Sourceforge&lt;/a&gt;, and I’ve opened a ticket for &lt;a href=&quot;http://dev.jquery.com/ticket/3693&quot;&gt;jQuery on their Trac site&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>jQuery Bug: IE reports <span class="widow">incorrect $.browser.version</span></title>
		<link href="http://nebraskajs.com/jquery-bug-ie-reports-incorrect-browserversion/"/>
		<updated>2008-10-19T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/jquery-bug-ie-reports-incorrect-browserversion</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;I’ve witnessed installations of IE where the navigator.userAgent reported both MSIE 6.0 and MSIE 7.0 in the same string, when Internet Explorer 7 is the one that’s really installed. Turns out, this is problematic for jQuery version 1.2.6, as it parses the double version userAgent as Internet Explorer 6, which may cause problems with your code if you’re using $.browser.version.&lt;/p&gt;

&lt;p&gt;You can monitor the &lt;a href=&quot;http://dev.jquery.com/ticket/3169&quot;&gt;jQuery bug&lt;/a&gt; in the bug tracker, or see the original research performed by &lt;a href=&quot;http://jamazon.co.uk/web/2008/03/14/jquerybrowserversion-doesnt-recognise-ie7/&quot;&gt;Jamie Thompson&lt;/a&gt;. Here’s a better workaround that merges two different approaches used on Jamie’s page, which fixes $.browser.version instead of using $.browser.msie6. This is to be considered temporary until the next (fixed) version of jQuery comes out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.browser.version = jQuery.browser.msie &amp;amp;&amp;amp; /msie 7.0/i.test&amp;amp;#40;navigator.userAgent&amp;amp;#41; ?
    &quot;7.0&quot; :
    jQuery.browser.version;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Dear IE6: Please Cache <span class="widow">my Images.</span></title>
		<link href="http://nebraskajs.com/dear-ie6-please-cache-my-images/"/>
		<updated>2008-10-18T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/dear-ie6-please-cache-my-images</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>Relative URLs including <span class="widow">the Domain</span></title>
		<link href="http://nebraskajs.com/relative-urls-including-the-domain/"/>
		<updated>2008-10-16T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/relative-urls-including-the-domain</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Just a neat little trick I saw while browsing the source code of Google Calendar. In some of their CSS files, they link to background-images using URLs that include everything but the protocol, which is something I hadn’t seen before.&lt;/p&gt;

&lt;p&gt;The most common usage of a relative URL is linked from the root (note the slash at the beginning), like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/web/wp-content/themes/hemingway/images/title.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;../&lt;/code&gt; to navigate up a directory in your path, but that’s boring. The interesting question is: what if I wanted to load content from a separate domain, while at the same time transparently using the protocol used on my page?&lt;/p&gt;

&lt;p&gt;Do what Google Calendar does and use the following style:&lt;br/&gt;
&lt;img src=&quot;//calendar.google.com/googlecalendar/images/calendar_sm2_en.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the lack of &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt; from the URL. If this page &lt;a href=&quot;https://www.zachleat.com/web/2008/10/16/relative-urls-including-the-domain/&quot;&gt;were hosted on https&lt;/a&gt; (we don’t pay for certificates around here, so you’ll have to put up with the security warning), the last image source will load from https as well at no additional development cost.&lt;/p&gt;

&lt;p&gt;This seems like it would be especially useful if you were using the YDN Performance tip to &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#split&quot;&gt;Split Components Across Domains&lt;/a&gt;. Remember, we’re not just talking images. This involves how the browser resolves URLs, so could be used inside href tags, css urls (as Google Calendar did), etc.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>ALARMd is a Google <span class="widow">Code Project</span></title>
		<link href="http://nebraskajs.com/alarmd-is-a-google-code-project/"/>
		<updated>2008-10-08T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/alarmd-is-a-google-code-project</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;I received a request this week to participate in development of the internet alarm clock I developed awhile back called &lt;a href=&quot;http://www.alarmd.com/&quot;&gt;ALARMd&lt;/a&gt;. It has gone through two major revisions, and my interest in contributing additional source code to the project is waning. I’ve got &lt;a href=&quot;http://www.tournology.com/&quot;&gt;other projects&lt;/a&gt;. So, I’ve decided to publish it to Google Code. I won’t be doing new development on the project, but will accept patches and commits to the repository. Feel free to ask me for project member status.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://code.google.com/p/alarmd/&quot;&gt;ALARMd on Google Code&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Fight Registrastination. Register <span class="widow">to vote!</span></title>
		<link href="http://nebraskajs.com/fight-registrastination-register-to-vote/"/>
		<updated>2008-09-07T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/fight-registrastination-register-to-vote</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Apologies to international readers, this spam message is intended for citizens of the USA only. Thanks for understanding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have a friend that hasn’t registered to vote yet? Do your civic duty by guilting them into action. Help them fight registrastination by sharing a link to a big bold deadline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/registrastination/&quot;&gt;Fight Registrastination. Register to vote NOW!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those demanding technical content from each blog post, the page does use a nice &lt;a href=&quot;http://www.maxmind.com/app/javascript_city&quot;&gt;JavaScript IP Address Geocoder hosted by MaxMind&lt;/a&gt; that’s worth a look. It also uses a previously mentioned &lt;a href=&quot;http://www.zachleat.com/web/2008/03/23/yet-another-pretty-date-javascript/&quot;&gt;JavaScript Pretty Date Difference&lt;/a&gt; script.&lt;/p&gt;

&lt;p&gt;Here’s a few other things that one might also look at if they were making a location aware application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/apis/maps/documentation/services.html#Geocoding&quot;&gt;Google Maps API: Geocoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/gears/wiki/GeolocationAPI&quot;&gt;Gears GeoLocation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.developers.facebook.com/index.php/Users.getInfo&quot;&gt;Parse a Facebook user’s location.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://apiwiki.twitter.com/REST&quot;&gt;Twitter’s API only provides update_location&lt;/a&gt;, not a way to get the current location.&lt;/li&gt;
&lt;li&gt;As mentioned above, &lt;a href=&quot;http://www.maxmind.com/app/ip-location&quot;&gt;MaxMind’s IP Address Geocoding Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fireeagle.yahoo.net/&quot;&gt;Yahoo’s FireEagle&lt;/a&gt;, &lt;a href=&quot;http://brightkite.com/&quot;&gt;BrightKite&lt;/a&gt;, &lt;a href=&quot;http://plazes.com/&quot;&gt;Plazes&lt;/a&gt;, and &lt;a href=&quot;http://www.dopplr.com/&quot;&gt;Dopplr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;MaxMind’s seemed the best fit for my use case: guessing the State of an anonymous user.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Writing a Front End Engineer&#8217;s Resume <span class="widow">(or CV)</span></title>
		<link href="http://nebraskajs.com/resume/"/>
		<updated>2008-09-04T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/resume</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;In the United States, we usually call this document a resume, but it would appear that the international term is actually CV. There are differences, but the tips used here can be applied to both.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everyone is trying to sell something nowadays, and the most important product you can sell is yourself. My high school counselor used to tell all of her students that same advice, and unfortunately most of them became hookers. But if you’re not into prostitution, by now you’ve probably realized why so many people have said that blogs are &lt;a href=&quot;http://www.darowski.com/tracesofinspiration/2007/03/06/the-blog-is-the-new-resume/&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://bokardo.com/archives/the-blog-is-the-new-resume/&quot;&gt;new&lt;/a&gt; &lt;a href=&quot;http://greengaloshes.cc/2007/04/the-blog-as-the-new-resume/&quot;&gt;resume&lt;/a&gt;. It’s true – I’ve had a few pretty meaty hooks dangled in front of my fish brain since I started this web site, and a lot of large companies are using blogs as a means of finding new talent.&lt;/p&gt;

&lt;p&gt;But a blog will only get you in the front door, many employers still want to see a real resume prior to entry into the screening process. So, why not kick your resume up a notch? Let’s iron its pages, shave its hairy regions, and spray some web-based musk on that bad boy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips for Putting your Resume on the Web&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don’t use anything that generates code (that means no DreamWeaver or heaven forbid, Microsoft Word). You want your “view source” to look like a marine’s hair cut: everything should be indented uniformly.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sprinkle some microformats in there! There is even a specific &lt;a href=&quot;http://microformats.org/wiki/hresume&quot;&gt;hresume&lt;/a&gt; microformat. Some other good microformats to use are: &lt;a href=&quot;http://microformats.org/wiki/hcard&quot;&gt;hcard&lt;/a&gt; (like a personal business card, but can also be used to describe an organization as well), &lt;a href=&quot;http://microformats.org/wiki/hcalendar&quot;&gt;hcalendar&lt;/a&gt; (for any dates, or date ranges: like when you were employed), &lt;a href=&quot;http://gmpg.org/xfn/&quot;&gt;XFN&lt;/a&gt; (to describe relationships between people, think references), &lt;a href=&quot;http://microformats.org/wiki/adr&quot;&gt;adr&lt;/a&gt; (for addresses).
Of course, the good part about microformats it that there is overlap between them. hcard uses adr and hcalendar, and hresume uses hcard, etc.&lt;/p&gt;

&lt;p&gt;Some social web sites have already provided some microformats that you can use as a starting point: &lt;a href=&quot;http://www.linkedin.com/pub/7/b8a/237&quot;&gt;Linked-in has an hresume&lt;/a&gt; for every profile, and &lt;a href=&quot;http://twitter.com/zachleat&quot;&gt;twitter has a hcard&lt;/a&gt; that you can pilfer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a favicon. As the &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#favicon&quot;&gt;Yahoo Performance team suggests&lt;/a&gt;, the browser is still going to request one, even if one isn’t in the markup, so you might as well have one.&lt;/li&gt;
&lt;li&gt;Pick your DOCTYPE carefully. Make sure it’s not one of the “loose” ones, for obvious prostitution-based reasons described above — the stricter the better. Whatever DOCTYPE you decide to use, make sure your markup validates properly. No mistakes here. I chose to serve my document using HTML 4.01 Strict as text/html with UTF-8 encoding.&lt;/li&gt;
&lt;li&gt;Your handwritten CSS should validate as well. If you have some library code that misses the mark in a few places, I think that’s okay. Remember: &lt;em&gt;a good coder codes, a great coder re-uses.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure it looks good when your future employer prints out 500 copies to pass around the company as an example of the best resume he’s ever laid his eyes on. Add a media=”print” stylesheet to beautify the print layout.&lt;/li&gt;
&lt;li&gt;Make sure it all validates, loads fast, and doesn’t have any broken links. I like to use YSlow to test my page weight and see my ranking.
Bombs away! Those are the tips I followed to create &lt;a href=&quot;http://www.zachleat.com/resume/&quot;&gt;my web-based resume&lt;/a&gt;. It has a YSlow score of 89, is 17.2K in size with 5 HTTP requests, and validates as &lt;a href=&quot;http://validator.w3.org/check?uri=http://www.zachleat.com/resume/&quot;&gt;HTML 4.01 Strict&lt;/a&gt;, and my non-library CSS is valid &lt;a href=&quot;http://jigsaw.w3.org/css-validator/validator?uri=http://www.zachleat.com/resume&quot;&gt;CSS 2.1&lt;/a&gt; (I’m also using YUI CSS for layout, which doesn’t validate).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Once you’re finished, hresume even has a &lt;a href=&quot;http://microformats.org/wiki/hresume-examples-in-wild&quot;&gt;public wiki page&lt;/a&gt; where they let you post your resume. Have fun, or get rich trying!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: grammar nazi cullination.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
	<entry>
		<title>Emulating onhashchange <span class="widow">without setInterval</span></title>
		<link href="http://nebraskajs.com/onhashchange-without-setinterval/"/>
		<updated>2008-08-21T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/onhashchange-without-setinterval</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>Double Whammy: OpenID <span class="widow">and Microformats</span></title>
		<link href="http://nebraskajs.com/double-whammy-openid-and-microformats/"/>
		<updated>2008-05-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/double-whammy-openid-and-microformats</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>Selecting XML Nodes with JavaScript (Peril <span class="widow">of getElementsByTagName)</span></title>
		<link href="http://nebraskajs.com/selecting-xml-with-javascript/"/>
		<updated>2008-05-10T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/selecting-xml-with-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;There are two popular camps for ajax data formats right now: XML and JSON. Both have their (dis-)advantages. The purpose of this article is to show you how to effectively parse XML in the browser.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Super Fast Beginner’s Primer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Case 1: &lt;strong&gt;Node&lt;/strong&gt; (or un-namespaced node, null-namespaced node): a node without a prefix, such as child here:&lt;br/&gt;
``&lt;/li&gt;
&lt;li&gt;Case 2: &lt;strong&gt;Default namespaced node&lt;/strong&gt;: a node without a prefix, but a parent node (or itself) has a xmlns attribute, like both root and child here:&lt;br/&gt;
``&lt;/li&gt;
&lt;li&gt;Case 3: &lt;strong&gt;Namespaced node&lt;/strong&gt;: a node with a prefix, and a parent node (or itself) declaring a xmlns with that prefix attached, like both child and root here:&lt;br/&gt;
``&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;/End Primer&lt;/h3&gt;

&lt;p&gt;Parsing XML in the browser can be a tricky beast. There are many different wrong ways to do it, which can leave you cold and naked in a snowstorm if you’re not careful. So, let’s put on the metaphorical electric one-sie of standards based code and let the power of Edison heat our JavaScript code like the innards of a &lt;a href=&quot;http://starwars.wikia.com/wiki/Tauntaun&quot;&gt;tauntaun&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there is one thing you can take away from this article, its that the problems with XML in JavaScript have already been solved, and there is library code out there to do the job for you. But libraries aren’t a substitute for knowledge (abstraction is a dangerous thing during education), so let’s learn &lt;strong&gt;why&lt;/strong&gt; these problems are occurring so we can wrinkle our gray matter and increase our productivity at the same time.&lt;/p&gt;

&lt;h2&gt;Use Cases&lt;/h2&gt;

&lt;p&gt;These are the main use cases that takes place when selecting a node inside of an XML document:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: Selecting un-namespaced nodes (or nodes in the null namespace):&lt;/p&gt;

&lt;p&gt;This one is easy. If you can guarantee that your XML will never have any namespaces, you’re home free. Take your get out of jail free card and run for the hills. Using this assumption, you can query nodes inside of your XML Document object using nothing other than &lt;code&gt;getElementsByTagName()&lt;/code&gt;. Lucky bastard.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// assume oDocEl is the documentElement inside of an XML Document 
var correctForCase1 = oDocEl.getElementsByTagName&amp;amp;#40;'child'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: Selecting default namespaced nodes:&lt;/p&gt;

&lt;p&gt;Tread lightly, this is about to get serious. In most cases, historically I had thought that using the solution described for Case 1 would be sufficient in this case. I had learned awhile back that Internet Explorer treats node names (including namespace prefix and local name together) as one string. So, the method for Case 1 should work for Internet Explorer, especially in the case of node sans prefix. In Firefox, you’d have to use getElementsByTagNS(), but that would be just a simple wrapper.&lt;/p&gt;

&lt;p&gt;Then I met an Internet Explorer exception. The only unique thing about this installation of Internet Explorer 7 was that it had MSXML 6 installed, when all the other computers I had tested on were using MSXML 3. The obvious conclusion here is that MSXML 6 won’t select child nodes for Case 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var incorrectForCase2 = oDocEl.getElementsByTagName&amp;amp;#40;'child'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the right way to select nodes for Case 2. Fair warning, to keep the code examples here simple, this solution requires Sarissa (sarissa.js and sarissa_ieemu_xpath.js) to be included on the page prior to usage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// assume oDoc is an XML Document object.
oDoc.setProperty&amp;amp;#40;&quot;SelectionNamespaces&quot;, &quot;xmlns:whatever='http://example.com/'&quot;&amp;amp;#41;;
var oDocEl = oDoc.documentElement;
var correctForCase2A = oDocEl.selectNodes&amp;amp;#40;'whatever:child'&amp;amp;#41;;
var correctForCase2B = oDocEl.selectSingleNode&amp;amp;#40;'whatever:child'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how we’ve mapped what was the default namespace (without a prefix) to be a namespace WITH a prefix during the node selection.&lt;/p&gt;

&lt;p&gt;It should be noted that when the resultant XML has a namespace attached (Case 2 and 3), Firefox works fine using getElementsByTagNameNS. IE doesn’t include support for that method, however, so we’re forced to find a more complete solution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 3&lt;/strong&gt;: Select a non-default namespaced node:&lt;/p&gt;

&lt;p&gt;As I mentioned in Case 2, normally (pre-MSXML 6), you’d be able to perform a &lt;code&gt;getElementsByTagName('prefix:child')&lt;/code&gt; in IE and use getElementsByTagNameNS in Firefox as usual. But that has changed now. We need to set up the SelectionNamespaces property for IE, and we’ll use Sarissa to take it cross-browser for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// assume oDoc is an XML Document object.
oDoc.setProperty&amp;amp;#40;&quot;SelectionNamespaces&quot;, &quot;xmlns:whatever='http://example.com/'&quot;&amp;amp;#41;;
var oDocEl = oDoc.documentElement;
var correctForCase3A = oDocEl.selectNodes&amp;amp;#40;'whatever:child'&amp;amp;#41;;
var correctForCase3B = oDocEl.selectSingleNode&amp;amp;#40;'whatever:child'&amp;amp;#41;;
// Note, this is the same code as Case 2 (which is a good thing)
&lt;/code&gt;&lt;/pre&gt;

Note that we did &lt;em&gt;not&lt;/em&gt; have to use the same prefix that was defined by the result XML. We can map it to whatever we want (literally).

&lt;h2&gt;Why is this important?&lt;/h2&gt;

&lt;p&gt;Because most libraries don’t handle Case 2 and Case 3, which are important parts of XML. Here’s some code straight from YUI 2.5.1 (DataSource component):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Line 1394
var xmlNode = result.getElementsByTagName&amp;amp;#40;key&amp;amp;#41;;
if&amp;amp;#40;xmlNode &amp;amp;&amp;amp; xmlNode.item&amp;amp;#40;&amp;amp;#41; &amp;amp;&amp;amp; xmlNode.item&amp;amp;#40;&amp;amp;#41;.firstChild&amp;amp;#41; &amp;amp;#123;
    data = xmlNode.item&amp;amp;#40;&amp;amp;#41;.firstChild.nodeValue;
&amp;amp;#125;
else &amp;amp;#123;
       data = &quot;&quot;;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how they just do getElementsByTagName. For shame :( jQuery doesn’t handle Case 2 or Case 3 either. (Proof is an exercise to the reader :P) So, if you have XML data sources with namespaces, it would do you well to use the solution presented in this article, or you’re going to have headaches later.&lt;/p&gt;

&lt;h2&gt;Springer’s Final Word&lt;/h2&gt;

&lt;p&gt;Don’t use getElementsByTagName. If you do, PLEASE include a note saying that your code isn’t going to support namespaced XML. Branch your selection code to check if Sarissa has been included on the page, and use Sarissa for namespaced XML if it’s there. It’s not fun to be pidgin-holed into the simplest case of XML.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
	<entry>
		<title>Javascript Objects are <span class="widow">NOT JSON</span></title>
		<link href="http://nebraskajs.com/javascript-objects-are-not-json/"/>
		<updated>2008-05-09T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/javascript-objects-are-not-json</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The headline should more accurately read “Javascript Objects are not &lt;strong&gt;necessarily&lt;/strong&gt; JSON.” But that waters it down a bit, don’t you think?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know this has been posted a few times before, but this is not something I knew until recently, and after learning it, have noticed quite a few other people doing it wrong as well. So, to risk adding another reverb to the echo chamber, I’ll post a link to a &lt;a href=&quot;http://www.thefutureoftheweb.com/blog/json-is-not-just-object-notation&quot;&gt;good explanation&lt;/a&gt; by Jesse Skinner on the specifics of the JSON specification.&lt;/p&gt;

&lt;p&gt;The main point here is that &lt;strong&gt;all object keys and strings in JSON must have double quotes.&lt;/strong&gt; I encourage you to look through the &lt;a href=&quot;http://json.org/&quot;&gt;train track specification&lt;/a&gt; to verify for yourself.&lt;/p&gt;

&lt;p&gt;If you try to use Captain &lt;a href=&quot;http://www.json.org/json2.js&quot;&gt;Crockford’s JSON Parser&lt;/a&gt;, it won’t parse your string with single quotes or (un/single)-quoted object keys. His parser has a nice regex checker built-in (and a walker callback to let you parse date strings into Date() objects). It’s a good way to verify that external data, or a data source not under your control, is safe to eval and use in your own code.&lt;/p&gt;

&lt;p&gt;Here are a few quick examples:&lt;/p&gt;

&lt;h2&gt;Valid JSON&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123;&quot;myKey&quot;: &quot;myString&quot;&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t use single quotes. Don’t use unquoted object keys.&lt;/p&gt;

&lt;h2&gt;Invalid JSON&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123;myKey: &quot;myString&quot;&amp;amp;#125;
&amp;amp;#123;'myKey': 'myString'&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Credits to Jonathan Snook for the &lt;a href=&quot;http://www.snook.ca/archives/javascript/json_is_a_subse/&quot;&gt;initial write-up&lt;/a&gt; and Crockford for formalizing JSON.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Surnamespacing</title>
		<link href="http://nebraskajs.com/surnamespacing/"/>
		<updated>2008-05-07T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/surnamespacing</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Everyone has a library. Everyone has their own utility classes and functions they’re using in their own personal and contracted projects. And now that everyone has a blog too, they’re all releasing their libraries as open source, using the commando underoo philosophy of wild, free, and unrestricted naming schemes for their code. Not anymore. Let’s surnamespace.&lt;/p&gt;

&lt;p&gt;What does surnamespacing give me?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt;: Your code is directly linked to your family honor. You’d be surprised how hard people work at test cases and increased code coverage when the respect of their lineage is at stake.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect&lt;/strong&gt; with your Extended Family: Connect with programmers sharing your namespace, your family is now your development team.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimize Collisons&lt;/strong&gt;: The ball and chain associated with an imposed naming scheme means that we won’t have everyone using foo and bar to hold their code, unless you’re the lucky son of a bitch that has inherited that top notch surnamespace real estate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster&lt;/strong&gt; Initial Development Cycle: Sometimes naming your library is the hardest part. Skip this step and just surnamespace it.
Jesus Christ, please show me some examples:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;JavaScript Surnamespacing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Christ = &amp;amp;#123;
    Jesus: &amp;amp;#123;
        walkOn: function&amp;amp;#40;obj&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;,
        turn: function&amp;amp;#40;from, to&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;,
        respawn: function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    &amp;amp;#125;
&amp;amp;#125;;
// Sample Usage
Christ.Jesus.walkOn&amp;amp;#40;'water'&amp;amp;#41;;
Christ.Jesus.turn&amp;amp;#40;'water', 'wine'&amp;amp;#41;;
Christ.Jesus.respawn&amp;amp;#40;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Java Surnamespacing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Christ;
public class Jesus &amp;amp;#123;
    public void walkOn&amp;amp;#40;String s&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    public void turn&amp;amp;#40;String from, String to&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    public void respawn&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PHP 6 Surnamespacing (&lt;a href=&quot;http://php.net/~derick/meeting-notes.html&quot;&gt;projected usage&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Christ &amp;amp;#123;
    class Jesus &amp;amp;#123;
        public function walkOn&amp;amp;#40;$obj&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
        public function turn&amp;amp;#40;$from, $to&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
        public function respawn&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    &amp;amp;#125;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Apparently I can’t write Java code. Don’t tell work.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Don&#8217;t Let the Door Hit You Onunload <span class="widow">and Onbeforeunload</span></title>
		<link href="http://nebraskajs.com/dont-let-the-door-hit-you-onunload-and-onbeforeunload/"/>
		<updated>2008-04-22T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/dont-let-the-door-hit-you-onunload-and-onbeforeunload</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Many people attempt a last ditch effort to save page state in the browser by using the onunload or onbeforeunload events. This has been studied at great length by &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_The_Back_Button_With_Javascript&quot;&gt;Patrick Hunlock&lt;/a&gt;, who uses the perhaps now common knowledge of using a Synchronous Ajax call to perform the page state save.&lt;/p&gt;

&lt;p&gt;Another use for the onbeforeunload event to allow the user to cancel the action that initiated the user leaving in the first place. Gmail uses this technique when the user is in the middle of writing a draft of an e-mail and attempts to leave the page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.quirksmode.org/bugreports/archives/2004/11/load_and_unload.html&quot;&gt;&lt;img src=&quot;http://www.quirksmode.org/bugreports/archives/2004/11/load_and_unload.html&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;br/&gt;
&lt;em&gt;Gmail pops up this prompt when the user attempts to leave the page while drafting an email.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Worthy to note, however, is that Opera &lt;a href=&quot;http://www.quirksmode.org/bugreports/archives/2004/11/load_and_unload.html&quot;&gt;doesn’t fire the unload event&lt;/a&gt; when the browser refreshes the page, or uses the back/forward buttons to browse off of the page (I had no success with the fix posted in the comments on that page). What’s worse, Opera never fires the onbeforeunload event. This creates a serious problem with attempting to save page state prior to a user leaving your page.&lt;/p&gt;

&lt;p&gt;Browser support aside, I believe that the onbeforeunload prompt is not an ideal way to protect the user from lost work (or unsaved page state). Humanized has argued, and I agree, that &lt;a href=&quot;http://www.alistapart.com/articles/neveruseawarning&quot;&gt;an undo operation is much easier on the end user than a warning message&lt;/a&gt;. The strange thing is, Gmail could save the draft in a synchronous Ajax request in the onunload event. They aren’t using the prompt to save Opera users from losing their drafts, since the Opera web browser doesn’t even fire the onbeforeunload event. (Interestingly enough, they are using some sort of browser history management to fire a warning to the user when they press back, or forward, in Opera — but Reload can’t be caught using this method, so your draft email could be lost).&lt;/p&gt;

&lt;p&gt;From a User Interface design standpoint, I would recommend just sticking with onunload. You can still perform your synchronous Ajax call in the method to save the state of your page, so that the user can later resume their state or undo the operation. (Except for Back/Forward/Refresh in Opera, until they support a better onunload or any onbeforeunload). The onbeforeunload prompt is an unnecessary evil, and doesn’t do much besides annoy the end user with another warning message and a mouse click.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Forgive <span class="widow">My Feed</span></title>
		<link href="http://nebraskajs.com/forgive-my-feed/"/>
		<updated>2008-04-18T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/forgive-my-feed</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This is going through a bit of maintenance. I’m tagging and recategorizing my old posts, so feel free to “mark all as read” if you get a bunch of new items.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Rethinking JavaScript Grids <span class="widow">and DataTables</span></title>
		<link href="http://nebraskajs.com/rethinking-javascript-grids-and-datatables/"/>
		<updated>2008-04-13T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/rethinking-javascript-grids-and-datatables</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;In the world of front end engineering, one must consider the end-user of the interface first, and above all other things. The priorities should not start with development ease, nor external library preference. The priorities should start with the needs of the consumer of your end product.&lt;/p&gt;

&lt;p&gt;Evolution of your engineering skill is also a vital trait in this world, which means that as a developer increases his knowledge of good practices and proper methods, sometimes he must shirk his previous assertions about the world as he previously knew it. And today I’m shirking a staple of the front end as all web users know it: The Grid (DataTable) Component.&lt;/p&gt;

&lt;p&gt;Of course, I’ve written a few articles in the past about the &lt;a href=&quot;http://developer.yahoo.com/yui/datatable/&quot;&gt;YUI DataTable&lt;/a&gt;, during my long love affair with Yahoo’s User Interface library. Another popular one is jQuery’s &lt;a href=&quot;http://tablesorter.com/docs/&quot;&gt;TableSorter&lt;/a&gt;. Then there’s the &lt;a href=&quot;http://dojotoolkit.org/book/dojo-book-0-9/docx-documentation-under-development/grid&quot;&gt;Dojo Grid&lt;/a&gt;, a component &lt;a href=&quot;http://www.sitepen.com/blog/2007/09/16/the-dojo-grid/&quot;&gt;inherited from TurboAjax&lt;/a&gt;. ExtJS has a variety of nice examples as well for their &lt;a href=&quot;http://extjs.com/deploy/dev/examples/#sample-1&quot;&gt;Ext 2.0 Grid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And after using these Grids and DataTables, I certainly respect the programming that went into developing these components. But let’s take a step back for a second. Why do the users need the bells and whistles in these components? Are they worth the extra load time and complexity they add to the interface?&lt;/p&gt;

&lt;p&gt;All we’re doing here is putting a nice coat of paint on a  tag. Sure, it might have some nice ancillary features like Ajax Data Loading, but those don’t really matter – they are things that can be easily performed with some good Ajax and DOM insert utility functions. In fact, most of the core features included in these components could be described as feature creep, and not beneficial to the end user at all. Feature creep contributes to code bloat, which means the user is downloading bytes to their web browser that they don’t need, which can hamper performance. Libraries usually have online examples of their components, and the include sizes are seen below. (Gzip compression not considered)&lt;/p&gt;

&lt;p&gt;Name&lt;/p&gt;

&lt;p&gt;JavaScript Size&lt;/p&gt;

&lt;p&gt;Minimized&lt;/p&gt;

&lt;p&gt;Link&lt;/p&gt;

&lt;p&gt;YUI DataTable&lt;/p&gt;

&lt;p&gt;216.6 KB&lt;/p&gt;

&lt;p&gt;Minimized&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/examples/datatable/dt_basic_clean.html&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dojo Grid&lt;/p&gt;

&lt;p&gt;338.4 KB&lt;/p&gt;

&lt;p&gt;Unminimized&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/book/dojo-book-0-9/docx-documentation-under-development/grid/simple-grid&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ext Grid&lt;/p&gt;

&lt;p&gt;545.5 KB&lt;/p&gt;

&lt;p&gt;Minimized&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://extjs.com/deploy/dev/examples/grid/array-grid.html&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jQuery TableSorter&lt;/p&gt;

&lt;p&gt;66 KB&lt;/p&gt;

&lt;p&gt;Minimized&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tablesorter.com/&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The JavaScript include sizes listed above are directly proportional to the feature set that the components provide, and should give you an idea of the overhead involved with using them. Do we need 545.5 KB of features coming down the pipe to give our users an extra bell, or an extra whistle? Let’s analyze the features to rationalize their usage, and remove items from the feature set.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Modifying column order and display&lt;/li&gt;
&lt;li&gt;Resizing columns&lt;/li&gt;
&lt;li&gt;Editing of row data directly on the grid itself&lt;/li&gt;
&lt;li&gt;Scrolling&lt;/li&gt;
&lt;li&gt;Pagination&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data should be used in the context of its usefulness. You have a list of messages in your e-mail inbox. What’s the most useful context for this list? In order of date received. The default sort order provided by the application, to facilitate proper use of the application. Is comparing the rows in the grid by any other method as useful? Does the user need to see the list of messages ordered alphabetically by subject? In these cases where the user is in need of a specific message, &lt;em&gt;searching and filtering&lt;/em&gt; is more useful than sorting. The default sort is useful, but allowing the user to resort on the client, in most cases, is not as useful as other methods of finding a row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modifying column order and display&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same argument can be made for any of the other methods of customization provided to the end user. Does the user need to reorder or hide columns? The context provided by the application should be sufficient to use the applications data in the way it was intended. Don’t overcomplicate your user interface with needless features or a deluge of useless data. Provide succinct, appropriate data, and the user needn’t reorder or change the interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resizing columns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The default HTML  tag expands to fit the data inside of its cells. Even when you set the width of the table explicitly, the cells adjust themselves accordingly to fit the data. This should be the behavior of your table. You needn’t monkey around with widths, the browser is smart enough to do it for you. You can even customize a cell to wrap its text to multiple lines with CSS, if need be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editing of row data directly on the grid itself&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re providing an Excel spreadsheet interface for the end user to customize your data, you haven’t designed your interface correctly. Rethink how the user needs to interact with the data you’ve provided, and give them a better, simpler way to edit the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scrolling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everyone knows that internal scrollbars on a page are evil. I don’t even like scrollbars on textareas, to be honest. Previously, I had worked and reworked the YUI DataTable to handle horizontal scrolling. Looking back on this, it was a mistake. There are better ways to handle lots of data in a table, without the heavy mouse interaction and scanning that scrolling require. Which brings me to my next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pagination&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the one exception to the feature set cutting board. This is the one feature that’s is a requirement, when the data set has too many records to fit on a single page.&lt;/p&gt;

&lt;p&gt;Keep these in mind, and look at the feature set provided by a few sites using tabular data centric interfaces that know a thing or two about interface design:&lt;/p&gt;

&lt;p&gt;[![Google Mail][11]][11]&lt;/p&gt;

&lt;p&gt;[![Wordpress 2.5 Admin Interface][12]][12]&lt;/p&gt;

&lt;p&gt;[![Google Reader List View][13]][13]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, what should we include?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A simple CSS class to style your table is sufficient, with links to paginate the table (properly) and/or a hover for row selection if needed. You’re looking at 10-20 lines of jQuery code, maximum, and a few CSS declarations. In lieu of sorting, of course, you’ll need to program in a mechanism for searching and filtering as well. But really, the difficulty with programming this component is knowing what to leave out.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>ALARMd 2 Beta, with Google <span class="widow">Calendar Integration</span></title>
		<link href="http://nebraskajs.com/alarmd-2-beta-with-google-calendar-integration/"/>
		<updated>2008-04-06T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/alarmd-2-beta-with-google-calendar-integration</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/alarmd-beta/&quot;&gt;Take a look: ALARMd 2 Beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: added Metric and Unit Circle time formats.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, some of you are reading this and thinking to yourself — genital herpes is more appealing than yet another online alarm clock. But to that I say, congratulations, that’s one of the new features in ALARMd 2!&lt;/p&gt;

&lt;p&gt;Why did I make another online alarm clock? Mostly due to missing features and limitations in the old version, but also because it’s a good exercise in JavaScript programming and User Interface design. Everyone likes to hone their skills, and this is my publicly viewable work desk. But the real reason I went back to rewrite the old version is that I’m hooked on &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;. I can’t get enough of that sweet, sweet, source code, and couldn’t stand to see my old, crusty, handwritten DOM manipulations polluting web browsers across the world. Users of the Yahoo User Interface Library (what I used for the original version of ALARMd) would do well to consider jQuery a nice plugin to be used alongside YUI. It will clean up your code MAX_INT-fold.&lt;/p&gt;

&lt;p&gt;Here are a few new features and addressed limitations in ALARMd 2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy Alarm Mode: No more fumbling around when you just want one simple easy-to-add alarm.&lt;/li&gt;
&lt;li&gt;Google Calendar Alarm Mode: Customize your alarm schedule to your heart’s content, it will load your alarms straight from a publicly available Google Calendar. There are some great features with this:

&lt;ul&gt;
&lt;li&gt;Load only the first calendar event of every day&lt;/li&gt;
&lt;li&gt;Day Limiter (Example: Only load calendar events within the next 3 days)&lt;/li&gt;
&lt;li&gt;Minute Adjuster (Example: Alarm me 90 minutes before work without adding a separate event)&lt;/li&gt;
&lt;li&gt;Google does a nice job of normalizing dates as well, so you don’t have to worry about calendar time syncing. If it says 8AM on your calendar, it’s going to alarm you at 8AM on your computer’s local time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New Clock Formats:

&lt;ul&gt;
&lt;li&gt;Human Readable Clock Format: Think “Half Past Two”, or “Quarter Til Twelve”. This idea is from &lt;a href=&quot;http://www.insightoutsight.co.uk/viewproject.php?cid=2&amp;amp;pid=3&amp;amp;iid=2&quot;&gt;Laurence Willmott’s Project “It’s about Time”&lt;/a&gt;. I took some liberties with his labeling scheme, I hope he doesn’t mind too much.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zapatopi.net/metrictime/&quot;&gt;Metric Time Format&lt;/a&gt;: Shows the measurement Centi-days in Local Metric Time. Basically, it’s a percentage of much of the day has passed. If it’s 80.000, 80 percent of the day has passed, which coincides with 7:12 PM.&lt;/li&gt;
&lt;li&gt;Unit Circle Time Format: Displays the time in radians that would be shown if a clock were &lt;a href=&quot;http://www.cafepress.com/poofietomato.49111330&quot;&gt;pasted on top of a unit circle&lt;/a&gt;. If it’s 12 o’clock, it will read π/2. After programming this one, it’s starting to seem normal in my brain. Oh, it’s 3π/2? Time to eat dinner. How the hell did it get 2π/3??&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/web/2008/03/23/yet-another-pretty-date-javascript/&quot;&gt;Human Readable Alarm Dates&lt;/a&gt;: Think “29 Minutes”, “1 Hour”, “2 Days Ago”.&lt;/li&gt;
&lt;li&gt;Much cleaner interface, using a jQuery accordion to display the options.&lt;/li&gt;
&lt;li&gt;The old ALARMd required an internet connection for all sources, and provided no safeguard if your internet went down whilst you were sleeping. ALARMd 2 preloads all Youtube videos in the background when the page loads using the new &lt;a href=&quot;http://apiblog.youtube.com/2008/03/something-to-write-home-about.html&quot;&gt;Youtube JavaScript API&lt;/a&gt;. A nice benefit of this is that the browser window no longer requires focus to play the YouTube video.&lt;/li&gt;
&lt;li&gt;Less clunky interface for adding new alarm sources.&lt;/li&gt;
&lt;li&gt;Repeat option for YouTube videos and MP3′s. Turn infinite loop on or off. Careful with this one. Don’t leave ALARMd going if you’re not going to be home when it goes off.&lt;/li&gt;
&lt;li&gt;CSS Skins, Use the really simple ones I’ve included for Red, Green, or Blue, or include your own URL to your own hosted CSS file. Have a good skin? I’ll include it in the select list and give you some props here, just link to it in the comments below. Use some CSS class hooks to spice up your skins (they are mutually exclusive). These are CSS classes that are added to the body tag to allow you to style the alarm differently depending on the alarm clock’s current state. &lt;em&gt;Future enhancements&lt;/em&gt; might include more than just alarm-based hooks: Year, day of the year, and hour of the day might be useful, that way you could style the clock to show a lighter background during the day and a darker background at night.

&lt;ul&gt;
&lt;li&gt;.alarmWithin30Minutes&lt;/li&gt;
&lt;li&gt;.alarmWithin15Minutes&lt;/li&gt;
&lt;li&gt;.alarmWithin5Minutes&lt;/li&gt;
&lt;li&gt;.alarmWithin1Minute&lt;/li&gt;
&lt;li&gt;.alarmActive (Alarm is being played)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Still has all the old favorites:

&lt;ul&gt;
&lt;li&gt;Test Button to make sure the video or source is working and to check your volume.&lt;/li&gt;
&lt;li&gt;Count Down mode to show the time between now and the first alarm.&lt;/li&gt;
&lt;li&gt;Store your own list of alarm sources, using YouTube, MP3, Last.FM, or any URL (Pandora is included).&lt;/li&gt;
&lt;li&gt;Military time (24 hour clock) and seconds toggle.&lt;/li&gt;
&lt;li&gt;Naked mode (get rid of the extras)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finished reading? I’m surprised you didn’t click the link at the top: &lt;a href=&quot;http://www.zachleat.com/Projects/alarmd-beta/&quot;&gt;ALARMd 2 Beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, this is BETA. That means it’s new. I’ve done my best to test and code out all the kinks, but there may be a few that slipped through. Try it out and please report any bugs. And once again, this code is released under the BSD license.&lt;/p&gt;

&lt;p&gt;I’ll probably move this to the main ALARMd.com domain shortly.&lt;/p&gt;

&lt;p&gt;Alarmd has been personally tested with Firefox 2, Firefox 3, Internet Explorer 7, Safari 3.1, and Opera 9.27, all on Windows. Google GDATA reports an unsupported browser error on Safari and Opera, which you can hide using custom CSS.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>20000 Leagues Under the API: <span class="widow">YouTube JavaScript</span></title>
		<link href="http://nebraskajs.com/20000-leagues-under-the-api-youtube-javascript/"/>
		<updated>2008-04-05T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/20000-leagues-under-the-api-youtube-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Today, children, we’ll be exploring the wonderful world of the official JavaScript API published by YouTube a few weeks ago. I read a &lt;a href=&quot;http://apiblog.youtube.com/2008/03/something-to-write-home-about.html&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;http://blogoscoped.com/archive/2008-03-14-n11.html&quot;&gt;interesting&lt;/a&gt; &lt;a href=&quot;http://www.wait-till-i.com/2008/03/12/video-captioning-made-easy-with-the-youtube-javascript-api/&quot;&gt;posts&lt;/a&gt; on the subject when it first came out, and it’s been on my list of things to explore for the next (and hopefully last) version of &lt;a href=&quot;http://www.alarmd.com/&quot;&gt;Alarmd&lt;/a&gt;. This isn’t going to be a long post so much as a laundry list of points worth mentioning and limitations there-of regarding the API itself.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you want to change videos dynamically by loading a new video into an existing player, you must use the Chromeless player (which requires an API key). The loadVideoById() method is only available in the Chromeless player. Whatever you do, don’t try to dynamically destroy and create a new player, this will cause JavaScript errors in Internet Explorer (although not Firefox).&lt;/li&gt;
&lt;li&gt;CSS properties: When the player has the css &lt;code&gt;display: none&lt;/code&gt; applied, it will not play. When the css &lt;code&gt;visibility: hidden&lt;/code&gt; is applied, the video will still play, but will not be shown on the screen. If you wanted a headless player, like what the music search engine &lt;a href=&quot;http://humanized.com/weblog/2007/11/13/songza-launch/&quot;&gt;Songza&lt;/a&gt; does, you’d want to take this approach. Word of warning, there’s some tricky shit going on when you try to dynamically change these properties on a player and run commands on the player at the same time (or close to the same). For instance, I got into a sticky situation where I’d try to show the player and load a new video into the player in the same method. I had to separate these with a timeout to get both to run without error.&lt;/li&gt;
&lt;li&gt;To load, you must play. Unfortunately, I wanted to pre-load the video without actually playing the video. This is unsupported. To handle this, I had to play, then pause after a timeout (using window.setTimeout). Not the prettiest, but it seems to work. Obviously the API in this case has very low cohesion, as the loadVideoById method ALSO plays the video, not simply doing ONLY what the method name suggests.&lt;/li&gt;
&lt;li&gt;Forcing a global? When the player first loads after you’ve used the SWFObject embedSWF() command, it will call the function onYouTubePlayerReady(), which you can’t customize. It must be that function name, and it must be in the global namespace. Keep in mind that onYouTubePlayerReady() is called every time the player is shown (when it was otherwise hidden using the css &lt;code&gt;display: none&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Unfortunately, there is some voodoo going on here that I don’t fully understand. I’m not a flash guru, nor have I ever claimed to be. But there have been a few bugs in my experience with the API that have led me to believe that it’s not quite there yet. Maybe my use cases were a bit unique, but they weren’t that extreme. I should be able to hide and show the player without error. I should be able to destroy the player without error. I should be able to load a video without playing it.&lt;/p&gt;

&lt;p&gt;But hey, it works.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Code Like the Big <span class="widow">Boys: Flickr</span></title>
		<link href="http://nebraskajs.com/code-like-the-big-boys-flickr/"/>
		<updated>2008-03-30T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/code-like-the-big-boys-flickr</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Code like the Big Boys is a series of posts about code solutions used by major websites. What can we learn from these professional websites to use in our own code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking at the source code of the Flickr home page is actually pretty strange. For one, there is only one JavaScript source code file (other than the advertising scripts), a solution for &lt;a href=&quot;http://webfx.eae.net/dhtml/pngbehavior/pngbehavior.html&quot;&gt;PNG Alpha Transparency in Internet Explorer&lt;/a&gt;, included as an &lt;a href=&quot;http://msdn2.microsoft.com/en-us/library/ms531018(VS.85).aspx&quot;&gt;HTML Component&lt;/a&gt;. The source for the PNG Behavior script (credit to Erik Arvidsson) is unchanged, with the exception of the removal of some extraneous comments, but curiously enough no whitespace removed (a suggestion to save them a few bucks in bandwidth). Looking at their HTML source, they seem to emphasize whitespace and readability over bandwidth savings, which seems fine to me. At least their visitors (you and I) can more easily learn something from their code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br/&gt;
They’ve taken the same route as one of the tips from &lt;a href=&quot;http://snook.ca/archives/html_and_css/top_css_tips/&quot;&gt;Jonathan Snook&lt;/a&gt;, and declared all styles for an element on a single line. They use your standard css to reset to a base starting point, much like YUI’s Reset CSS we’re all familiar with. One interesting declaration I noticed prominently inside of their CSS was the .Butt css class, declared on their primary Search form button. I’m curious to know the semantic meaning behind that one.&lt;/p&gt;

&lt;p&gt;They use the &lt;a href=&quot;http://www.info.com.ph/~etan/w3pantheon/style/starhtmlbug.html&quot;&gt;tan hack&lt;/a&gt; as well to isolate a CSS declaration for IE browsers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* html #featured-image cite &amp;amp;#123;bottom: -1px;&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is to workaround for an IE limitation to absolutely positioning content at the bottom of a relatively positioned div, in this case the black box containing the credits (or citation, hence the cite tag) inside of the feature image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2008/03/flickr_cite.jpg&quot; title=&quot;flickr_cite&quot; alt=&quot;Flickr Citation Tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another interesting CSS Hack they’ve employed involves the line-height for  tags containing Unicode characters to select different languages. It starts out like &lt;a href=&quot;http://www.dustindiaz.com/min-height-fast-hack/&quot;&gt;Dustin Diaz’s min-height hack&lt;/a&gt;, but throws a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;height: 0px !important;
height /**/:13px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m not familiar with the &lt;code&gt;/**/&lt;/code&gt; syntax, and would really appreciate any information someone has on what platform this is targeting. A comment would be nice!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Standard here, and they have some nice meta tags for the I-phone:&lt;/p&gt;

&lt;p&gt;All in all, it’s short and sweet code for a home page. It’s nice to see such clean code with an eye towards standards on a commercially successful site, many props to their programmers. I’m scared to do my next in the series, because I’m 100% sure it won’t be as nice of a read as Flickr was.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Tips for Programming <span class="widow">JavaScript Functions</span></title>
		<link href="http://nebraskajs.com/tips-for-programming-javascript-functions/"/>
		<updated>2008-03-28T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/tips-for-programming-javascript-functions</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This article is about my personal coding style, given little tips and tricks that I use to make my code cleaner and more readable.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Required and Optional Arguments&lt;/h2&gt;

&lt;p&gt;There are generally two styles used when programming a new function in JavaScript. The first, most obvious, and least extensible method is putting each argument as its own argument in the function definition, as so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// For our purposes, assume arg1 is required, and arg2 and arg3 are optional.
function myFunction&amp;amp;#40;arg1, arg2, arg3&amp;amp;#41; &amp;amp;#123;
   arg2 = arg2 || 'defaultValue';
   arg3 = arg3 || 'defaultValue';
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One obvious downside to this method is that it requires a line of code for each optional argument to define a default value. What if you want to pass in an arg3, but not an arg2? Your call could end up like: &lt;code&gt;myFunction('myArg1', null, 'myArg3');&lt;/code&gt;. This might work in the beginning, but what about when you have more than 3 arguments defined? That’s going to get messier than a Dick Cheney hunting party.&lt;/p&gt;

&lt;p&gt;The next method people generally move to when they have a lot of optional arguments in their function definition is to put all the arguments into a single object argument, like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// taken from jQuery
 $.ajax&amp;amp;#40;&amp;amp;#123;
   type: &quot;POST&quot;,
   url: &quot;some.php&quot;,
   data: &quot;name=John&amp;amp;location=Boston&quot;,
   success: function&amp;amp;#40;msg&amp;amp;#41;&amp;amp;#123;&amp;amp;#125;
 &amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit to this method is that you can populate all the defaults easily by using jQuery.extend, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// simulated code, not from jQuery
$.ajax = function&amp;amp;#40;args&amp;amp;#41;
&amp;amp;#123;
    var defaultArgs = &amp;amp;#123;
        type: 'GET',
        data: '',
        dataType: 'text'
    &amp;amp;#125;;
    // overwrites defaultArgs with args values, stores result into args.
    args = jQuery.extend&amp;amp;#40;&amp;amp;#123;&amp;amp;#125;, defaultArgs, args&amp;amp;#41;;
    if&amp;amp;#40;!args&amp;amp;#91;'url'&amp;amp;#93;&amp;amp;#41; &amp;amp;#123;
          return;
    &amp;amp;#125;
&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The args object would end up with the following value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123;
   type: &quot;POST&quot;,
   url: &quot;some.php&quot;,
   data: &quot;name=John&amp;amp;location=Boston&quot;,
   success: function&amp;amp;#40;msg&amp;amp;#41;&amp;amp;#123;&amp;amp;#125;,
   dataType: 'text'
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method can be easily seen as extensible. You could put a metric shit ton of optional arguments in your function (the option is there, I won’t judge you), and you could define them in any order inside of the object without having to put in null spacers like the previous method.&lt;/p&gt;

&lt;p&gt;But what about required arguments? The Ajax method above requires a URL, and the script can’t guess a default for that variable. But it isn’t immediately obvious to the end-user that URL is always required. And what’s more, you’ll have to put specific code inside your function to check that the required arguments were sent in the object. (Think &lt;code&gt;if(!args['url']) { return; }&lt;/code&gt; as shown two code blocks up.)&lt;/p&gt;

&lt;p&gt;Which leads me to my favorite way to define functions: a combination of the two methods. Declare your required arguments as explicit arguments, and pile the rest into an optional arguments object. Here I’ll show you how I would define the Ajax function using this method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// jQuery doesn't use this argument structure, so don't copy and paste this.
 $.ajax&amp;amp;#40;'some.php', &amp;amp;#123;
   type: &quot;POST&quot;,
   data: &quot;name=John&amp;amp;location=Boston&quot;,
   success: function&amp;amp;#40;msg&amp;amp;#41;&amp;amp;#123;&amp;amp;#125;
 &amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, it is immediately obvious which is a required argument and which is optional, and your required arguments will never be accidentally assigned a default value in your code. If the end-user doesn’t send in all of the required arguments, the resulting error message will be obvious and easily fixed, without a ton of code inside of your function to check that the end-user obeyed the function defintion.&lt;/p&gt;

&lt;h2&gt;Setting Default Values for Optional Arguments&lt;/h2&gt;

&lt;p&gt;When developing code, sometimes it is obvious that the method described above for optional arguments may be overkill for a tiny little utility method. Sometimes you just want a boolean flag, or a single optional argument. When that occassion arrives, it’s time to put on your robe and coding hat, because we’re going to town.&lt;/p&gt;

&lt;p&gt;In the beginning of JavaScript maturity, my  was going through a lot of changes. I was confused about a lot of things, and you’d see a lot of lines of code like this (embarrassingly enough):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function myFunction&amp;amp;#40;runDoSomething&amp;amp;#41;
&amp;amp;#123;
     if&amp;amp;#40;runDoSomething == null&amp;amp;#41; &amp;amp;#123;
          runDoSomething = true; // never make your default true, as I'll show you below
     &amp;amp;#125;
     if&amp;amp;#40;runDoSomething&amp;amp;#41; &amp;amp;#123;
          doSomething&amp;amp;#40;&amp;amp;#41;;
     &amp;amp;#125;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ugh, checking against null? Janet Reno looked better in the morning. But now that I’m a full grown man that can open his own pickle jars, I’ve got some guidelines:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the argument is optional and might be left out, define it in your code in such a way that if it does have a value, it will not evaluate to boolean false (0, false, undefined, null, ”, NaN). In other words, don’t make the value the user passes in for this argument be false. False is the value it should have when it’s empty. See the example below:     // runDoSomething is still optional

&lt;pre&gt;&lt;code&gt;function myFunction&amp;amp;#40;runDoSomething&amp;amp;#41;
&amp;amp;#123;
     if&amp;amp;#40;runDoSomething&amp;amp;#41; &amp;amp;#123;
          doSomething&amp;amp;#40;&amp;amp;#41;;
     &amp;amp;#125;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

We didn’t have to assign a default value to arg1, because if it’s &lt;code&gt;null&lt;/code&gt;, then &lt;code&gt;doSomething()&lt;/code&gt; won’t execute. Don’t ever use arg1 in a way that would have you passing in false, because false and null are the same in a boolean comparison.

&lt;ul&gt;
&lt;li&gt;When using non-boolean optional arguments, another way to avoid assigning a default value to an optional argument is to use the OR operator to give you a default value where you’re using it. This is really only useful when you use the argument in one single place inside of your function. If you’re using it more than once, it’s best to define the default value at the top of the function.     function myFunction&amp;#40;arg1&amp;#41;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123;
     // arg1 is used only once
     jQuery&amp;amp;#40;'#myId'&amp;amp;#41;.html&amp;amp;#40;arg1 || 'myDefaultValue'&amp;amp;#41;;
&amp;amp;#125;
function myFunction&amp;amp;#40;arg1&amp;amp;#41;
&amp;amp;#123;
     arg1 = arg1 || 'myDefaultValue;
     // arg1 is used multiple times
     jQuery('#myId').html(arg1);
     jQuery('#myOtherId').html(arg1);
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Hopefully you’ve learned something from this post. It is the byproduct of many mistakes and overcomplicated functions that I’ve refactored to end up with this result.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
	<entry>
		<title>Architecture Choices: Callbacks and Events <span class="widow">in JavaScript</span></title>
		<link href="http://nebraskajs.com/architecture-choices-callbacks-and-events-in-javascript/"/>
		<updated>2008-03-28T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/architecture-choices-callbacks-and-events-in-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Warning: Blog Post written for Beginner and Intermediate JavaScript Developers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like any well intentioned programmer, you’re writing reusable code in JavaScript. Maybe it’s a simple widget, maybe it’s a higher level plug-in for your favorite JavaScript library. But now you want to provide a mechanism for your friendly neighborhood developer to extend your code by hooking into it with a little bit of code of their own. How do you accomplish this?&lt;/p&gt;

&lt;p&gt;Generally, it can be done one of two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A callback function&lt;/li&gt;
&lt;li&gt;A custom event&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A callback function is a function passed into your code as an argument that will be executed at the time the library code specifies. For instance, callback functions are usually supplied for for Ajax XmlHttpRequest’s to execute, one callback if the Ajax Request is successful, and another on failure. See the following code as an example:&lt;/p&gt;

&lt;p&gt;End-Developer’s Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajax&amp;amp;#40;&amp;amp;#123;
   type: &quot;POST&quot;,
   url: &quot;some.php&quot;,
   data: &quot;name=John&amp;amp;location=Boston&quot;,
   success: function&amp;amp;#40;msg&amp;amp;#41;&amp;amp;#123;
     alert&amp;amp;#40; &quot;Data Saved: &quot;   msg &amp;amp;#41;;
   &amp;amp;#125;
 &amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Library Code (from jQuery):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// taken out of context, just know that s stands for the options object passed into $.ajax() above.
if &amp;amp;#40; s.success &amp;amp;#41;
    s.success&amp;amp;#40; data, status &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code example taken straight from the &lt;a href=&quot;http://docs.jquery.com/Ajax/jQuery.ajax#options&quot;&gt;jQuery documentation&lt;/a&gt;, the success key of the object being passed into the ajax() function is a callback function. It will be executed after the Ajax request has successfully completed.&lt;/p&gt;

&lt;p&gt;The other mechanism you can use for controlling dependent function execution is a custom event. Custom events provide more flexability because they use the publish/subscribe mechanism. That means, instead of the library author deciding how many callbacks he or she is going to allow you to pass into their method as arguments, he or she will just trigger a custom event, which will fire all functions the end-developer has said they want to subscribe to that event. See the following example from the jQuery documentation.&lt;/p&gt;

&lt;p&gt;End-Developer’s Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;amp;#40;document&amp;amp;#41;.bind&amp;amp;#40;&quot;myCustomEvent&quot;, function&amp;amp;#40;e, msg&amp;amp;#41;&amp;amp;#123;
   alert&amp;amp;#40; &quot;Data Saved: &quot;   msg &amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
$&amp;amp;#40;document&amp;amp;#41;.bind&amp;amp;#40;&quot;myCustomEvent&quot;, function&amp;amp;#40;e, msg&amp;amp;#41;&amp;amp;#123;
   alert&amp;amp;#40; &quot;More Data Saved: &quot;   msg &amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;;
// We can subscribe as many functions as we want to myCustomEvent.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Library Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// again, no context here
$&amp;amp;#40;document&amp;amp;#41;.trigger&amp;amp;#40;&quot;myCustomEvent&quot;, &amp;amp;#91; &quot;My Message&quot; &amp;amp;#93;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see above, custom events are much more extensible and customizable to your needs. Want to attach 10 functions to myCustomEvent? Sure, go right ahead. Want to try to attach 10 callbacks to the ajax success method above, that’s going to be a bit more work. The benefit to using callbacks lies in their disposability and isolation. Perhaps you don’t want to publish to the world when your Ajax Request completes — maybe you just want to handle the completion and be done with it.&lt;/p&gt;

&lt;p&gt;Let’s Review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Callback Functions&lt;/strong&gt;: Private Disposable – Limited by Design of Parent Code (Number of callbacks)&lt;br/&gt;
&lt;strong&gt;Custom Events&lt;/strong&gt;: Extensible (Any number of functions attached) – Public – Not Disposable (Functions stay attached after execution, and continue to fire when triggered)&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Yet Another Pretty <span class="widow">Date JavaScript</span></title>
		<link href="http://nebraskajs.com/yet-another-pretty-date-javascript/"/>
		<updated>2008-03-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/yet-another-pretty-date-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;I can’t let this Pretty Date thing go. I decided to use a modification of &lt;a href=&quot;http://ejohn.org/blog/javascript-pretty-date/&quot;&gt;John Resig’s Pretty Date JavaScript implementation&lt;/a&gt; written by Dean Landolt and shared in the comments on John’s page. The script was an obvious choice for the next iteration of &lt;a href=&quot;http://www.zachleat.com/web/2007/06/18/wake-up-to-youtube-on-my-internet-alarm-clock/&quot;&gt;Alarmd&lt;/a&gt;, which is nearing completion as I type.&lt;/p&gt;

&lt;p&gt;The more I used &lt;a href=&quot;http://deanlandolt.com/archives/163&quot;&gt;Dean Landolt’s script&lt;/a&gt;, the more problems I began to see with his implementation. It was a good start, but definitely had bugs. His assumptions translating from integer second differences to human readable labels stretched too far at times (there is an error in logic to say anything between 24 hours and 48 hours from now can be labeled “Tomorrow”), and he was a bit loose with his difference categories (assumed average month length was 28 days, and always used Math.floor instead of rounding — 47 hours from now would be labeled “1 Day”). It was great code otherwise, and I definitely liked the way he used the while loop to run through the comparisons.&lt;/p&gt;

&lt;p&gt;So, I’ve cleaned up his great start, and am releasing it to the world in the spirit of cooperation and open sauce. You just read that typo out loud didn’t you?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;: &lt;a href=&quot;http://www.zachleat.com/Lib/jquery/humane.js&quot;&gt;Yet Another Pretty Date Implementation&lt;/a&gt; (2 KB)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Dates for this script must have a specific &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO8601 format&lt;/a&gt;: &lt;em&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/em&gt; (in UTC) where T and Z are literals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: This script has been moved to &lt;a href=&quot;http://github.com/zachleat/Humane-Dates&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Minor Annoyances with <span class="widow">Firefox Development</span></title>
		<link href="http://nebraskajs.com/minor-annoyances-with-firefox-development/"/>
		<updated>2008-03-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/minor-annoyances-with-firefox-development</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;When you’re developing web applications in Firefox, do you find yourself constantly clearing your cache? Cache is a useful facet of web browsing for everything but the continuous testing environment of web development. Here’s a nice alternative so that you don’t have to disable your cache entirely:&lt;/p&gt;

&lt;p&gt;Use the Firefox Plug-In called (humorously enough) &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/3817&quot;&gt;&lt;strong&gt;JohnnyCache&lt;/strong&gt;&lt;/a&gt;. I added the pattern ‘http://localhost/’ to my preferences and now I don’t have to worry about cache on my local machine anymore. Simple, easy, effective.&lt;/p&gt;

&lt;p&gt;Now only if I knew how to disable the Firefox preference that autopopulates form fields with default values when F5 is hit to refresh the page. Try creating a page with a single text field, type a value into the form, and then hit F5 to refresh the page. Your value will be prefilled into the form.&lt;/p&gt;

&lt;p&gt;I find myself always hitting “CTRL L” (goes to the Location Bar) and “Enter” to avoid that one. I looked through about:config, but only found: signon.prefillForms (related to usernames and passwords), and browser.formfill.enable (related to autocomplete dropdowns for forms, not default values).&lt;/p&gt;

&lt;p&gt;Anyone know an easier method?&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Specific Inheritance with TIBCO&#8217;s <span class="widow">General Interface</span></title>
		<link href="http://nebraskajs.com/specific-inheritance-with-tibcos-general-interface/"/>
		<updated>2008-03-03T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/specific-inheritance-with-tibcos-general-interface</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Sorry about the title, I couldn’t resist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TIBCO created the General Interface (GI) toolkit for one-page in-browser applications back before I was in my JavaScript diapers. I hadn’t even graduated from high school yet when they were building Rich Internet Applications using some of the most feature crippled browsers in Internet history, back when cross browser meant Internet Explorer and Netscape Navigator, not the Firefox/WebKit/Opera’s of today. But when I did finally start to get my feet wet in the world of JavaScript, this is the tool I started on. I learned what a DOM was, earned my stripes in XSL, and discovered the power of the browser.&lt;/p&gt;

&lt;p&gt;But just like any programmer nearing the end of their relationship with a tool, I must take a few moments to evaluate my experiences with it, not only for my benefit, but so that you, the reader, might also gain a golden nugget of wisdom from the treasure troves of its sparkling source code.&lt;/p&gt;

&lt;p&gt;When I first started using General Interface almost two years ago (~June 2006) on version 3.1, it wasn’t a cross browser tool. It had support for Internet Explorer 6, and that was it. Truthfully, it was an executive decision to use the tool, and we were using it for an intranet application. Looking back on that decision raises a huge red flag now — internally supported web browsers are subject to change, and so are audiences — applications may turn out to be more external that previously suggested. And while Firefox support was included with version 3.2, to this day I hear complaints that the application doesn’t work on the Safari browser (or, in turn, the iPhone).&lt;/p&gt;

&lt;p&gt;General Interface relies heavily on a JavaScript XSLT interface (this is why they won’t ever have support for Safari 2, or the iPhone, neither of which support a JavaScript XSLT interface), leveraging XSLT stylesheets to generate markup for the page, which turns out to be quite the speed demon when generating large amounts of markup from XML documents (or GUI components serialized into XML documents). However, a large chunk of that speediness is lost due to a heavy reliance on inline CSS. A majority of the style associated with components is generated on the fly and inserted inline using the browser native style attribute. This can cause a lot of problems when attempting to do a simple restyling of a GUI component using CSS. For example, in a DataTable/Grid component, there is no option to style the background-color of a selected row. The only option for the style of a selected row is a background-image, which I believe resulted from the inline style limitation and the background color already being specified for zebra-stripe row coloring. If you specified the background-color for the selected row, it wouldn’t know which background-color to go back to when the row was unselected, due to an unfortunate avoidance of the CSS class construct.&lt;/p&gt;

&lt;p&gt;Another drawback to General Interface is development of the GUI. I won’t get into it too much, but will just meantion that to create interfaces in GI, you must create your GUI components and layouts using the an in-browser IDE developed using the power of dog food. That’s right, it’s written in GI itself.&lt;/p&gt;

&lt;p&gt;However, General Interface has got it right in some cases. They were (I believe) the first JavaScript library/toolkit to include a mechanism for large result set DataTables/Grids. In fact, their Matrix component (the equivalent of a YUI DataTable, or a Dojo Grid) supports more features that most libraries have even begun to plan for: complete inline editing with great keyboard navigation support, clientside sorting, column reordering, dynamic column hiding and adding, hierarchical tree grids, easy options for pagination caching, as well as 4 different rendering modes (the latest YUI DataTable 2.5.0 just added their first rendering mode, what GI calls “Chunked” rendering). They were the first toolkit to include a very sophisticated client side charting package, with support for more charting types than you’d even want to put into a single demo. They’ve been developing the package with a clearly object oriented methodology in mind, and that can be easily seen in their source code. They have taken the package open source and released it with a BSD license (which is a delight of course, muddling through that obfuscated source the first year was a pain).&lt;/p&gt;

&lt;p&gt;If nothing else, TIBCO is a company with some great ideas, and you can see those ideas represented in General Interface. This tool has shaped a lot of my views on clientside development, and I’ve learned a lot from its developers. For instance, I feel like XSLT is one of the most underrated tools for speed improvements in clientside DOM manipulation (using innerHTML to insert the result of an XSL transform), especially with Safari 3 including a JavaScript XSLT interface. If you’re developing an application that deals a lot with XML web services (SOA) and you want to create a single-page in-browser application (RIA), why not give it a look? Just keep those caveats I’ve meantioned in mind and you’ll be fine. Trying something new can change your perspective, and if you keep an open mind, you might learn something.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>PHP <span class="widow">Pretty Date</span></title>
		<link href="http://nebraskajs.com/php-pretty-date/"/>
		<updated>2008-02-10T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/php-pretty-date</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This class is pretty much a direct port of &lt;a href=&quot;http://ejohn.org/blog/javascript-pretty-date/&quot;&gt;John Resig’s JavaScript Pretty Date&lt;/a&gt; to PHP 5. A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires PHP &gt;= 5.10, due to the usage of PHP’s new &lt;a href=&quot;http://us3.php.net/manual/en/function.date-create.php&quot;&gt;DateTime&lt;/a&gt;class.&lt;/li&gt;
&lt;li&gt;The new DateTime object parses strings using PHP’s &lt;a href=&quot;http://us3.php.net/manual/en/function.strtotime.php&quot;&gt;strtotime&lt;/a&gt;, so you don’t need to pass in an ISO8601 formatted date, as in JavaScript Pretty Date. Try “now”, or “next Wednesday”, or “ 2 weeks 4 days 23 hours 9 seconds”.&lt;/li&gt;
&lt;li&gt;Extended to handle Months and Years in the past (JavaScript version only goes to weeks)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// pass in a String DateTime, compared to another String DateTime (defaults to now)
$myString = Date_Difference::getStringResolved&amp;amp;#40;'-7 weeks'&amp;amp;#41;;
$myString = Date_Difference::getStringResolved&amp;amp;#40;'-7 weeks', ' 1 week'&amp;amp;#41;;
&amp;amp;nbsp;
// pass in a DateTime object, compared to another DateTime object (defaults to now)
// useful with the Propel ORM, which uses DateTime objects internally.
$myString = Date_Difference::getString&amp;amp;#40;new DateTime&amp;amp;#40;'-7 weeks'&amp;amp;#41;&amp;amp;#41;;
$myString = Date_Difference::getString&amp;amp;#40;new DateTime&amp;amp;#40;'-7 weeks'&amp;amp;#41;, new DateTime&amp;amp;#40;' 1 week'&amp;amp;#41;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/phpPrettyDate/Date_Difference.phps&quot;&gt;Download PHP Pretty Date&lt;/a&gt; (PHP 5.10 , 1.86KB)&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Online Movie Rental Review &#8211; <span class="widow">Amazon Unbox</span></title>
		<link href="http://nebraskajs.com/online-movie-rental-review-amazon-unbox/"/>
		<updated>2008-01-25T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/online-movie-rental-review-amazon-unbox</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Renting movies online. Steve Jobs was hilariously excited about his new Apple TV product and being able to rent movies online and stream them directly to your television. So, with all this movie-watching titillation, I decided to check out if the hubbub was actually worthy of my attention. Turns out, not so much.&lt;/p&gt;

&lt;p&gt;Prior to deciding which movie rental service to use, I googled to find the main competitors. Apparently they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cinemanow.com/&quot;&gt;CinemaNow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.movielink.com&quot;&gt;Movielink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.apple.com/itunes/store/movies.html&quot;&gt;iTunes Movies&lt;/a&gt; (Ugh, what a name)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Unbox-Video-Downloads/b?ie=UTF8&amp;amp;node=16261631&quot;&gt;Amazon Unbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.netflix.com/&quot;&gt;Netflix&lt;/a&gt; (Barely)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As of right now, I am not concerned with playing these movies on my television or any portable device. All I want to do is save myself a trip to the video store. Upon going to the CinemaNow and Movielink websites, they were both advertising the movie I wanted to rent on their home pages: Bourne Ultimatum. iTunes Movies didn’t even have the title — it would appear that they’re severely lacking in library quantity right now. But after a little bit more review reading, I finally found Amazon Unbox. Of course, I gravitated towards this service since I already had a consumer relationship with Amazon, and don’t want to spread my credit information all over the web. And it appeared that they had what I needed — the Bourne Ultimatum, the PC viewing experience, and an non-exorbitant price tag, at $3.99. More than ideal, but tonight I considered the trade off between not having to leave my house and letting Amazon use my bandwidth fair enough (although in a normal state, I would not consider $3.99 to be a fair price when the rental price is the same at the brick and mortar store, which should by all means include the cost of the building and the purchase of the actual DVD title I was carrying out of the store).&lt;/p&gt;

&lt;p&gt;So, considering my past dealings with Amazon, I went with their service. They already had all my information and renting the DVD was almost too easy (I don’t like the one click purchasing). To my surprise and disappointment, however, I have yet to start watching my movie 35 minutes after renting it. That’s, in fact, why I am here writing this review. I’m killing time. I realized upon launching the client is that it &lt;strong&gt;requires a download time of 90 minutes at 240 KB/s&lt;/strong&gt; (average)! What??? What year is this? That’s almost 1.2 GB of movie! This isn’t P2P, this is an actual product that I spent money on. CinemaNow, MovieLink, and iTunes movies all claim to have pseudo-instant-play, which allows you to start watching the movie immediately after purchase (with a little bit of buffering, of course). Even &lt;a href=&quot;http://www.netflix.com/&quot;&gt;Netflix &lt;/a&gt; has pseudo-instant-play, with it’s online viewable library of pre-1990′s classics (and not much else – let me tell you; Netflix definitely wants you to rent their DVDs in the mail, their online library is pathetic).&lt;/p&gt;

&lt;p&gt;So, if you’re sitting at home by yourself, with at least $4 on your credit card, a broadband internet connection at your fingertips, Windows XP or Vista on your computer browsing with Internet Explorer and the willingness to download and install a proprietary client, and you don’t mind giving away your dignity and any self respect you have going against the ideals of capitalism and the reward a good product should receive by creating usable and &lt;em&gt;non-eye-gougable value&lt;/em&gt; for the consumer in the form of a good trade off between hard earned money and the warm friendly glow of an entertaining movie, I would say that renting movies online is a great way to spend an evening. However, if you’re capable of sensing the least amount of dripping sarcasm from a well intentioned but entirely too wordy sentence, you’d be like me and wish you’d saved your money, because I still have 30 minutes to wait until my damn movie starts.&lt;/p&gt;

&lt;p&gt;[tags]Amazon, Unbox, Netflix, Movielink, CinemaNow, iTunes, Movies[/tags]&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Quine using XHTML <span class="widow">and JavaScript</span></title>
		<link href="http://nebraskajs.com/quine-using-xhtml-and-javascript/"/>
		<updated>2007-12-28T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/quine-using-xhtml-and-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Programming Hilarity! He has a &lt;a href=&quot;http://www.xn--kllberg-5wa.net/quine/quinegen.html&quot;&gt;generator&lt;/a&gt;, and a pre-generated &lt;a href=&quot;http://xn--kllberg-5wa.net/quine/quine.html&quot;&gt;example&lt;/a&gt;. Wait, what’s a quine, you say?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In computing, a quine is a program, a form of metaprogram, that produces its complete source code as its only output.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;– Courtesy of &lt;a href=&quot;http://en.wikipedia.org/wiki/Quine_(computing)&quot;&gt;Wikipedia: Quine (computing)&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Faster YUI DataTable with 5 Lines <span class="widow">of Code</span></title>
		<link href="http://nebraskajs.com/faster-yui-datatable-with-5-lines-of-code/"/>
		<updated>2007-12-27T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/faster-yui-datatable-with-5-lines-of-code</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Holy Reflows Batman! The typical usage of a DataTable in the Yahoo User Interface JavaScript library involves passing a string into the constructor signifying the ID attribute of the container you want to attach the DataTable to. However, the YUI DataTable loves the DOM and creating nodes individually using DOM methods. Normally that’d be fine, but one of the first things it does in the constructor is create the table element and attach it to the live DOM. This is a no-no. Now, every time they append a new node (for a new row or a new cell inside of a row), it causes a reflow in the browser! What does this mean? Really bad lag when you insert 40 or 50 rows. Recognize this piece of code?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myDataTable = new YAHOO.widget.DataTable&amp;amp;#40;&quot;myContainer&quot;, myColumnDefs, myDataSource&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Straight from the docs. No no no!&lt;/p&gt;

&lt;p&gt;Instead, you should pass in an unattached DOM node instead of a string!&lt;/p&gt;

&lt;p&gt;Try this code on for size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myDataTable = new YAHOO.widget.DataTable&amp;amp;#40;document.createElement&amp;amp;#40;'div'&amp;amp;#41;, myColumnDefs, myDataSource&amp;amp;#41;; 
myDataTable.subscribe&amp;amp;#40;'initEvent',function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    var d = document.getElementById&amp;amp;#40;'myContainer'&amp;amp;#41;; // CHANGE THIS -- match the id of the container you want.
    while&amp;amp;#40;d.firstChild&amp;amp;#41; &amp;amp;#123; d.removeChild&amp;amp;#40;d.firstChild&amp;amp;#41;; &amp;amp;#125;; // remove previous DataTables
    d.appendChild&amp;amp;#40;this._elContainer&amp;amp;#41;; &amp;amp;#125;&amp;amp;#41;;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Problems with Looping <span class="widow">through window.setInterval</span></title>
		<link href="http://nebraskajs.com/problems-with-looping-through-windowsetinterval/"/>
		<updated>2007-12-23T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/problems-with-looping-through-windowsetinterval</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Look at this code. What do you expect to be the outcome?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var d = new Date&amp;amp;#40;&amp;amp;#41;;
var r = &amp;amp;#91;&amp;amp;#93;;
for&amp;amp;#40;var j=,k=2;j
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>enterval, an automatic <span class="widow">setInterval chainer.</span></title>
		<link href="http://nebraskajs.com/enterval-an-automatic-setinterval-chainer/"/>
		<updated>2007-12-23T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/enterval-an-automatic-setinterval-chainer</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Hello internet. Today we’ll be exploring the magical wonders of setInterval. Have you ever worked on a project that needed multiple timers going simultaneously? Have you ever wanted to bind all of those timer callbacks into just one timer without restructuring your code manually? Well, being the Curious George that I am, I wanted to know the performance benefits of the grouping callbacks and eliminating unnecessary timers. Here’s the code I used to do it:&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.setInterval&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /* Payload! */ &amp;amp;#125;, 100&amp;amp;#41;;
window.setInterval&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /* Payload! */ &amp;amp;#125;, 100&amp;amp;#41;;
window.setInterval&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /* Payload! */ &amp;amp;#125;, 100&amp;amp;#41;; 
// results in three separate timers.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enterval.set&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /*Payload */ &amp;amp;#125;, 100&amp;amp;#41;;
enterval.set&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /*Payload */ &amp;amp;#125;, 100&amp;amp;#41;; // combines with the first 100ms interval.
enterval.set&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123; /*Payload */ &amp;amp;#125;, 100&amp;amp;#41;; // combines with the first two 100ms intervals.
// results in one timer, containing all three callbacks.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var enterval = &amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
    var intervals   = &amp;amp;#123;&amp;amp;#125;;
&amp;amp;nbsp;
    function add&amp;amp;#40;callback, interval&amp;amp;#41;
    &amp;amp;#123;
        var index = ;
        if&amp;amp;#40;intervals&amp;amp;#91;interval&amp;amp;#93;&amp;amp;#41; &amp;amp;#123;
            index = intervals&amp;amp;#91;interval&amp;amp;#93;.length;
            intervals&amp;amp;#91;interval&amp;amp;#93;.push&amp;amp;#40;callback&amp;amp;#41;;
        &amp;amp;#125; else &amp;amp;#123;
            intervals&amp;amp;#91;interval&amp;amp;#93; = &amp;amp;#91;callback&amp;amp;#93;;
            window.setTimeout&amp;amp;#40;call, interval, interval&amp;amp;#41;;
        &amp;amp;#125;
        return interval ':' index;
    &amp;amp;#125;
&amp;amp;nbsp;
    function call&amp;amp;#40;interval&amp;amp;#41;
    &amp;amp;#123;
        var d = intervals&amp;amp;#91;interval&amp;amp;#93;;
        for&amp;amp;#40;var j=,k=d.length;j
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Speed up Including <span class="widow">Google Analytics</span></title>
		<link href="http://nebraskajs.com/speed-up-google-analytics-with-dynamic-includes/"/>
		<updated>2007-11-01T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/speed-up-google-analytics-with-dynamic-includes</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Have you ever noticed that your homepage hangs when including the Google Analytics JavaScript file? I think &lt;a href=&quot;http://nutrun.com/weblog/does-google-analytics-make-your-pages-slow/&quot;&gt;a few&lt;/a&gt; &lt;a href=&quot;http://resistmedia.net/blog/2007/10/02/get-rid-of-google-analytics/&quot;&gt;people&lt;/a&gt; have noticed a delay. Well, let’s try something different. Let’s create the script node dynamically using DOM methods and put a timeout on this creation so that it inserts just enough delay so that your page won’t hang (we’ll move out of the current execution path with the timeout, thus allowing your page to finish loading). The obvious benefit here is that even when the Google servers lag a little bit serving you the JavaScript file, your page will appear as if it has already finished loading. Given optimally performing Google Servers, this method will perform slower most of the time, but it shines in those rare instances where there is a bit of a delay. Give it a try, and let me know if it works any better.&lt;/p&gt;

&lt;p&gt;Of course, remember to put near the end of your &lt;code&gt;, and not directly in your&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
    setTimeout&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
    &amp;amp;#123;
        var node = document.createElement&amp;amp;#40;&quot;script&quot;&amp;amp;#41;;
        node.src = 'http://www.google-analytics.com/urchin.js';
        //for SSL
        //node.src = 'https://ssl.google-analytics.com/urchin.js';
        node.type = 'text/javascript';
        document.getElementsByTagName&amp;amp;#40;&quot;head&quot;&amp;amp;#41;&amp;amp;#91;&amp;amp;#93;.appendChild&amp;amp;#40;node&amp;amp;#41;;
        var init = setInterval&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
        &amp;amp;#123;
            _uacct = 'UA-XXXXXX-X'; // INSERT YOUR CODE HERE
            if&amp;amp;#40;typeof urchinTracker != 'undefined'&amp;amp;#41; &amp;amp;#123;
                urchinTracker&amp;amp;#40;&amp;amp;#41;;
                clearInterval&amp;amp;#40;init&amp;amp;#41;;
            &amp;amp;#125;
        &amp;amp;#125;, 100&amp;amp;#41;;
    &amp;amp;#125;, &amp;amp;#41;;
&amp;amp;#125;&amp;amp;#41;&amp;amp;#40;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/googleAnalytics/&quot;&gt;Try it on my benchmark page.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Obscurity, Security, <span class="widow">and Captcha</span></title>
		<link href="http://nebraskajs.com/obscurity-security-and-captcha/"/>
		<updated>2007-11-01T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/obscurity-security-and-captcha</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;On Ajaxian recently, there have been a few posts touting new and inventive replacements for the more traditional distorted and discolored “What does this image say?” Captcha gatekeeper for your web form. Of course these are all intended to provide a mechanism to tell the difference between an automated web bot that is spamming your web form and a human being.&lt;/p&gt;

&lt;p&gt;Obviously there are some accessibility issues with Captcha images, in that they are useless to those that are vision impaired. Some sites provide an alternate link to an audio file that speaks a random word that you must then enter into the form.&lt;/p&gt;

&lt;p&gt;One of the easiest ways to implement a Captcha on your site is to use the &lt;a href=&quot;http://recaptcha.net/&quot;&gt;reCAPTCHA plugin&lt;/a&gt;. But that’s not what I’m going to talk about here. What I want to talk about is these new methods being introduced.&lt;/p&gt;

&lt;p&gt;The first that was recently linked was &lt;a href=&quot;http://ajaxian.com/archives/preventing-spam-with-drag-and-drop&quot;&gt;a method that involved drag and drop&lt;/a&gt; to authenticate the user. Obviously this method is flawed, especially if the automated robot has access to fire JavaScript events. It does nothing but introduce a different door that the spammer may not have seen before. When this method gains any sort of popularity, or if a spammer decides to attack the site implementing this method specifically, it would not be difficult to bypass the Captcha. This is referred to in the computer world as “&lt;a href=&quot;http://en.wikipedia.org/wiki/Security_through_obscurity&quot;&gt;Security through Obscurity&lt;/a&gt;“. This is not good practice.&lt;/p&gt;

&lt;p&gt;The next post I read was &lt;a href=&quot;http://almaer.com/blog/are-you-human&quot;&gt;regarding an implementation that presented the user with 8 boxes&lt;/a&gt;, with one of those boxes colored differently with an invitation to find and click on the differently colored box. The was implemented by &lt;a href=&quot;http://www.passpack.com/info/home/&quot;&gt;Passpack&lt;/a&gt; (a password hosting service — should be focused on security, right?). Correctly me if I’m wrong, but how is this difficult for the Spammer at all? The whole point of a Captcha is to distort the text inside the image so much that the image can’t be read by an &lt;a href=&quot;http://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;Optical Character Recognition (OCR)&lt;/a&gt; program. Basically, they’ve simplified it down to a one pixel image, which is an infinitely easier optical recognition problem. You don’t even have to recognize characters, you can just see if the pixel is a 1 or a 0. Forgive me for asking, but is that problem NP complete?&lt;/p&gt;

&lt;p&gt;I am all for having more friendly humane methods of Spam Bot detection. Just be wary of the methods you’re using. Are they actually secure, or are they just obscure?&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Forward Compatibility <span class="widow">and JavaScript</span></title>
		<link href="http://nebraskajs.com/forward-compatibility-and-javascript/"/>
		<updated>2007-11-01T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/forward-compatibility-and-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Many developers (myself included) complain endlessly about the problematic ECMAScript implementation that Internet Explorer uses called JScript. And after reading &lt;a href=&quot;http://blogs.msdn.com/dmassy/archive/2006/11/30/vpc-to-run-ie6-and-ie7-on-the-same-machine.aspx&quot;&gt;one such very detailed complaint&lt;/a&gt; in the comments on Dave Massy’s website at MSDN, and reading &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2007/10/30/ecmascript-3-and-beyond.aspx&quot;&gt;Chris Wilson’s post about ECMAScript 3&lt;/a&gt;, it has become increasingly obvious of Microsoft’s opinion on the subject of Forward Compatibility with JavaScript. It’s something they keep pounding their fists on the ground about, how they are adamant that new versions of their browser not “Break the Web.”&lt;/p&gt;

&lt;p&gt;Of course, “Breaking the Web” refers to the amount of code on the internet today that is an equal and opposite reaction to the broken bug-ridden JavaScript implementation of their browser. It describes the unimaginable future in which Internet Explorer fixed the many well documented &lt;em&gt;intricacies&lt;/em&gt; of JScript and thereby ruins the code that was originally written to support the problem. What a conundrum.&lt;/p&gt;

&lt;p&gt;But haven’t we already been through this problem? Isn’t this the same exact thing we saw in the early days of CSS? And how did the major browser players react? By implementing both a &lt;a href=&quot;http://www.quirksmode.org/css/quirksmode.html&quot;&gt;Quirks and Standards mode for CSS through DocType switching&lt;/a&gt;. Now my question is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why haven’t we seen a Quirks and Standards Compatibility Mode for JavaScript?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m not necessarily encouraging the Quirks and Standards modes to be toggled with the DocType (as with CSS), but why not have these two modes? To enable your site to use the Standards mode of JavaScript, the browser might require a certain DocType to be declared, or it might require a different script type in the browser:&lt;/p&gt;

&lt;p&gt;Either that, or &lt;a href=&quot;http://dean.edwards.name/weblog/2007/03/yet-another/&quot;&gt;I could just use Base2&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Nursery Rhyme Code <span class="widow">Poem [CSS]</span></title>
		<link href="http://nebraskajs.com/nursery-rhyme-code-poem-css/"/>
		<updated>2007-10-27T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/nursery-rhyme-code-poem-css</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Code Poems are fun! The trick is to take a &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_nursery_rhymes_in_English&quot;&gt;nursery rhyme&lt;/a&gt; (but really, it could be any commonplace work of writing – Famous Speeches, Bible Verses, Famous Quotes, etc.), and then turn it into pseudocode. The code must follow both the programming or markup language you’re using and the rhyme as closely as possible. See how precise you can make your rhyme fit. I accept critiques and suggestions for improving me rhyme code (or you could just rewrite my rhyme as you see fit).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#theChurch &amp;amp;#123;&amp;amp;#125;
#theChurch #theSteeple &amp;amp;#123;&amp;amp;#125;
#theChurch .door&amp;amp;#91;state=&quot;open&quot;&amp;amp;#93; .people &amp;amp;#123; visibility: visible; &amp;amp;#125;
#theChurch #theParson &amp;amp;#123; display: none; &amp;amp;#125;
#theChurch &amp;gt; .upstairs #theParson:active &amp;amp;#123; display: block; &amp;amp;#125;
#theChurch #theParson:lang&amp;amp;#40;prayers&amp;amp;#41; &amp;amp;#123; display: block; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The above code poem is released under the BSD license.&lt;/em&gt; To use in production environment without error, do not include an element with an id attribute of “theChurch”. Obviously I’m kidding, don’t use this code. Not even for enterprise software.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Nursery Rhyme Code <span class="widow">Poem [PHP]</span></title>
		<link href="http://nebraskajs.com/nursery-rhyme-design-patterns-php/"/>
		<updated>2007-10-26T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/nursery-rhyme-design-patterns-php</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; ?php
class I &amp;amp;#123;
    public __construct&amp;amp;#40;&amp;amp;#41;
    &amp;amp;#123;
        $star = new Star&amp;amp;#40;&amp;amp;#41;;
        $star-&amp;gt;size = 'little';
        $star-&amp;gt;twinkle&amp;amp;#40;&amp;amp;#41;;
        $star-&amp;gt;twinkle&amp;amp;#40;&amp;amp;#41;;
&amp;amp;nbsp;
        self::wonder&amp;amp;#40;$star, 'What are you?'&amp;amp;#41;;
&amp;amp;nbsp;
        $world = new World&amp;amp;#40;&amp;amp;#41;;
        $world-&amp;gt;elevation = 'So High';
        $star-&amp;gt;setAbove&amp;amp;#40;$world&amp;amp;#41;;
&amp;amp;nbsp;
        $d = new Diamond&amp;amp;#40;&amp;amp;#41;;
        $d-&amp;gt;position = 'In the sky';
        $star-&amp;gt;setLike&amp;amp;#40;$d&amp;amp;#41;;
&amp;amp;nbsp;
        $star-&amp;gt;twinkle&amp;amp;#40;&amp;amp;#41;;
        $star-&amp;gt;twinkle&amp;amp;#40;&amp;amp;#41;;
        $star-&amp;gt;size; // returns 'little'
&amp;amp;nbsp;
        self::wonder&amp;amp;#40;$star, 'What are you?'&amp;amp;#41;;
    &amp;amp;#125;
&amp;amp;nbsp;
    public static function wonder&amp;amp;#40;$obj, $query&amp;amp;#41;
    &amp;amp;#123;
        $obj-&amp;gt;query&amp;amp;#40;$query&amp;amp;#41;;
    &amp;amp;#125;
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The above &lt;strong&gt;code poem&lt;/strong&gt; is released under the BSD license.&lt;/em&gt; To use in production environment without error, please precede with the following command: &lt;code&gt;error_reporting(0);&lt;/code&gt; Obviously I’m kidding, don’t use this code. Not even for enterprise software.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Nursery Rhyme Code <span class="widow">Poem [JavaScript]</span></title>
		<link href="http://nebraskajs.com/nursery-rhyme-code-poem-js/"/>
		<updated>2007-10-26T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/nursery-rhyme-code-poem-js</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#40;function&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
    function BlindMouse&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    BlindMouse.prototype.tail = true;
    BlindMouse.prototype.run = function&amp;amp;#40;after&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;;
&amp;amp;nbsp;
    function Mice&amp;amp;#40;mouse1, mouse2, mouse3&amp;amp;#41;
    &amp;amp;#123;
        this.mice = &amp;amp;#91;&amp;amp;#93;;
        this.mice.push&amp;amp;#40;mouse1, mouse2, mouse3&amp;amp;#41;;
        this.declare = function&amp;amp;#40;&amp;amp;#41;
        &amp;amp;#123;
            return this.mice.length   ' Blind Mice';
        &amp;amp;#125;;
        this.run = function&amp;amp;#40;after&amp;amp;#41;
        &amp;amp;#123;
            for&amp;amp;#40;var j=,k=this.mice.length;j
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Write More Efficient Javascript in YUI with <span class="widow">CSS Selectors</span></title>
		<link href="http://nebraskajs.com/write-more-efficient-javascript-in-yui-with-css-selectors/"/>
		<updated>2007-09-03T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/write-more-efficient-javascript-in-yui-with-css-selectors</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This is an updated version of a previous article entitled &lt;a href=&quot;http://www.zachleat.com/web/2007/07/30/using-dom-query-libraries-in-yui/&quot;&gt;Using DOM Query Libraries in YUI&lt;/a&gt; for the new version of YAHOO.util.Dom included with YUI 2.3.0 as well as including support for passing context nodes into Dom functions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we are again. I just love those CSS Selectors. If you haven’t read Part One of the series linked above, I would encourage it to get a little background on why we’re attempting this approach.&lt;/p&gt;

&lt;h1&gt;Download the appropriate files:&lt;/h1&gt;

&lt;h1&gt;Get the easy &lt;strong&gt;ALL-IN-ONE file&lt;/strong&gt;: &lt;a href=&quot;/Lib/Y2/Y2.js&quot;&gt;Y2.js&lt;/a&gt; (31 KB original source) OR &lt;a href=&quot;/Lib/Y2/Y2-p.js&quot;&gt;Y2-p.js&lt;/a&gt; (11 KB minimized)&lt;/h1&gt;

&lt;h2&gt;Get the files separately (if you want to use a custom selector library, or have already included DomQuery or jQuery): &lt;a href=&quot;/Lib/Y2/Y2-solo.js&quot;&gt;Y2-solo.js&lt;/a&gt; (9 KB original source) OR &lt;a href=&quot;/Lib/Y2/Y2-solo-p.js&quot;&gt;Y2-solo-p.js&lt;/a&gt; (4 KB minimized)&lt;/h2&gt;

&lt;p&gt;Also, first you’ll need to get Jack’s nice DomQuery class.&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&quot;/Lib/Y2/DomQuery.js&quot;&gt;Jack Slocum’s DomQuery Standalone File (24 KB)&lt;/a&gt; 1.0 Alpha 3 – Rev 4&lt;br/&gt;
Download: &lt;a href=&quot;/Lib/Y2/DomQuery-packer.js&quot;&gt;Jack Slocum’s DomQuery Standalone File Packed (7 KB)&lt;/a&gt; 1.0 Alpha 3 – Rev 4&lt;/p&gt;

&lt;p&gt;You can use the jDomQuery standalone, or any jQuery version, (instead of DomQuery) linked in the previous article, but there is an unresolved bug with the getRegion method since jQuery doesn’t return actual Array’s. But if you’re not using that method, have at it.&lt;/p&gt;

&lt;h1&gt;What can I do with it?&lt;/h1&gt;

&lt;p&gt;I have not included ALL functions in this class, only the ones that take nodes in as arguments. If you use these functions, you are encouraged to use the unmodified versions contained in YAHOO.util.Dom. Functions not included here: getClientHeight, getClientWidth, getDocumentHeight, getDocumentScrollLeft, getDocumentScrollTop, getDocumentWidth, getViewportHeight, getViewportWidth.&lt;/p&gt;

&lt;p&gt;Let’s see some documentation on this mother (if you’re wondering what the original functions do, see the &lt;a href=&quot;http://developer.yahoo.com/yui/docs/YAHOO.util.Dom.html&quot;&gt;original documentation&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this is the test context node we're going to pass in
var context = YAHOO.util.Dom.get&amp;amp;#40;'context'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;addClass&lt;/h1&gt;

&lt;p&gt;Adds a CSS class to first matching node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.addClass&amp;amp;#40; 'div div:last', 'myClass'&amp;amp;#41;;
Y2.util.Dom.addClass&amp;amp;#40;'div div:last', context, 'myClassContext'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;addClassAll&lt;/h1&gt;

&lt;p&gt;Adds a CSS class to all matching nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.addClassAll&amp;amp;#40; 'div div:last', 'myClass'&amp;amp;#41;;
Y2.util.Dom.addClassAll&amp;amp;#40;'div div:last', context, 'myClassContext'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;hasClass&lt;/h1&gt;

&lt;p&gt;Tests the first result node returned to see if it has a CSS class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Booleans.
Y2.util.Dom.hasClass&amp;amp;#40;'div div:last', 'myClass'&amp;amp;#41;;
Y2.util.Dom.hasClass&amp;amp;#40;'div div:last', context, 'myClassContext'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;hasClassAll&lt;/h1&gt;

&lt;p&gt;Tests all matching nodes to see if they have a CSS class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of Booleans.
Y2.util.Dom.hasClassAll&amp;amp;#40;'div div:last', 'myClass'&amp;amp;#41;;
Y2.util.Dom.hasClassAll&amp;amp;#40;'div div:last', context, 'myClassContext'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;removeClass&lt;/h1&gt;

&lt;p&gt;Removes a CSS class from first matched node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Boolean (misdocumented on the YAHOO.util.Dom page)
Y2.util.Dom.removeClass&amp;amp;#40;'div.third','third'&amp;amp;#41;;
Y2.util.Dom.removeClass&amp;amp;#40;'div.third', context,'third'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;removeClassAll&lt;/h1&gt;

&lt;p&gt;Removes a CSS class from all matched nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of Booleans (misdocumented on the YAHOO.util.Dom page)
Y2.util.Dom.removeClassAll&amp;amp;#40;'div.third','third'&amp;amp;#41;;
Y2.util.Dom.removeClassAll&amp;amp;#40;'div.third', context,'third'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;replaceClass&lt;/h1&gt;

&lt;p&gt;Replaces a CSS class on first matched node with a new CSS class, or adds it if the old CSS class doesn’t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Boolean (misdocumented on the YAHOO.util.Dom page)
Y2.util.Dom.replaceClass&amp;amp;#40;'div.fourth','fourth','third'&amp;amp;#41;;
Y2.util.Dom.replaceClass&amp;amp;#40;'div.fourth', context,'fourth','third'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;replaceClassAll&lt;/h1&gt;

&lt;p&gt;Replaces a CSS class on all matched nodes with a new CSS class, or adds it if the old CSS class doesn’t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of Booleans (misdocumented on the YAHOO.util.Dom page)
Y2.util.Dom.replaceClassAll&amp;amp;#40;'div.fourth','fourth','third'&amp;amp;#41;;
Y2.util.Dom.replaceClassAll&amp;amp;#40;'div.fourth', context,'fourth','third'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;get&lt;/h1&gt;

&lt;p&gt;Get first matched node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.get&amp;amp;#40;'div b'&amp;amp;#41;;
Y2.util.Dom.get&amp;amp;#40;'div b', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getAll&lt;/h1&gt;

&lt;p&gt;Get all matched nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of HTMLElement
Y2.util.Dom.getAll&amp;amp;#40;'div b'&amp;amp;#41;;
Y2.util.Dom.getAll&amp;amp;#40;'div b', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;batch&lt;/h1&gt;

&lt;p&gt;Executes a function against first matched node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns single return value from the function
Y2.util.Dom.batch&amp;amp;#40;'div.second b', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el;&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.batch&amp;amp;#40;'div b', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el;&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;batchAll&lt;/h1&gt;

&lt;p&gt;Executes a function against all matched nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of return values from the function
Y2.util.Dom.batchAll&amp;amp;#40;'div.second b', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el;&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.batchAll&amp;amp;#40;'div b', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el;&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;generateId&lt;/h1&gt;

&lt;p&gt;Generates and assigns a unique ID attribute if not present on first matched element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns String (new ID attribute)
Y2.util.Dom.generateId&amp;amp;#40;'div.first'&amp;amp;#41;;
Y2.util.Dom.generateId&amp;amp;#40;'div.third', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;generateIdAll&lt;/h1&gt;

&lt;p&gt;Generates and assigns a unique ID attribute if not present on matched elements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of String (new ID attributes)
Y2.util.Dom.generateIdAll&amp;amp;#40;'div.first'&amp;amp;#41;;
Y2.util.Dom.generateIdAll&amp;amp;#40;'div.third', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getChildren&lt;/h1&gt;

&lt;p&gt;Gets all HTMLElement children of the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of HTMLElement
Y2.util.Dom.getChildren&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getChildren&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getChildrenBy&lt;/h1&gt;

&lt;p&gt;Returns all HTMLElement children of the first matched node that pass a Boolean function test. (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of HTMLElement
Y2.util.Dom.getChildrenBy&amp;amp;#40;'div.second', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getChildrenBy&amp;amp;#40;'div.second', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getAncestorBy&lt;/h1&gt;

&lt;p&gt;Returns the first HTMLElement ancestor of the first matched node that passes a Boolean function test. (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getAncestorBy&amp;amp;#40;'div.third', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='context';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getAncestorBy&amp;amp;#40;'div.third', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123;return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='context';&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getAncestorByClassName&lt;/h1&gt;

&lt;p&gt;Returns the first HTMLElement ancestor of the first matched node that has a CSS Class. (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getAncestorByClassName&amp;amp;#40;'div.third', 'contextClass'&amp;amp;#41;;
Y2.util.Dom.getAncestorByClassName&amp;amp;#40;'div.third', context, 'contextClass'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getAncestorByClassName&lt;/h1&gt;

&lt;p&gt;Returns the first HTMLElement ancestor of the first matched node that is a certain tag (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getAncestorByTagName&amp;amp;#40;'div.third', 'div'&amp;amp;#41;;
Y2.util.Dom.getAncestorByTagName&amp;amp;#40;'div.third', context, 'div'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getFirstChild&lt;/h1&gt;

&lt;p&gt;Returns the first HTMLElement child of the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getFirstChild&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getFirstChild&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getFirstChildBy&lt;/h1&gt;

&lt;p&gt;Returns the first HTMLElement child that passes a boolean function test from the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getFirstChildBy&amp;amp;#40;'div.second', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getFirstChildBy&amp;amp;#40;'div.second', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getLastChild&lt;/h1&gt;

&lt;p&gt;Returns the last HTMLElement child of the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getLastChild&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getLastChild&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getLastChildBy&lt;/h1&gt;

&lt;p&gt;Returns the last HTMLElement child that passes a boolean function test from the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getLastChildBy&amp;amp;#40;'div.second', function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getLastChildBy&amp;amp;#40;'div.second', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'id'&amp;amp;#41;=='theMiddleB';&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getNextSibling&lt;/h1&gt;

&lt;p&gt;Returns the next HTMLElement sibling of the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getNextSibling&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getNextSibling&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getNextSiblingBy&lt;/h1&gt;

&lt;p&gt;Returns the next HTMLElement sibling that passes a boolean function test from the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getNextSiblingBy&amp;amp;#40;'div.second',function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'class'&amp;amp;#41;=='third';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getNextSiblingBy&amp;amp;#40;'div.second', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return YAHOO.util.Dom.hasClass&amp;amp;#40;el,'third'&amp;amp;#41;;&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getPreviousSibling&lt;/h1&gt;

&lt;p&gt;Returns the previous HTMLElement sibling of the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getPreviousSibling&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getPreviousSibling&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getPreviousSiblingBy&lt;/h1&gt;

&lt;p&gt;Returns the previous HTMLElement sibling that passes a boolean function test from the first matched node (does not include text nodes or whitespace)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns HTMLElement
Y2.util.Dom.getPreviousSiblingBy&amp;amp;#40;'div.second',function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return el.getAttribute&amp;amp;#40;'class'&amp;amp;#41;=='third';&amp;amp;#125;&amp;amp;#41;;
Y2.util.Dom.getPreviousSiblingBy&amp;amp;#40;'div.second', context, function&amp;amp;#40;el&amp;amp;#41;&amp;amp;#123; return YAHOO.util.Dom.hasClass&amp;amp;#40;el,'third'&amp;amp;#41;;&amp;amp;#125;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getRegion&lt;/h1&gt;

&lt;p&gt;Gets the &lt;a href=&quot;http://developer.yahoo.com/yui/docs/YAHOO.util.Region.html&quot;&gt;Region&lt;/a&gt; containing the first matched element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns YAHOO.util.Region
Y2.util.Dom.getRegion&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getRegion&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getRegionAll&lt;/h1&gt;

&lt;p&gt;Gets all &lt;a href=&quot;http://developer.yahoo.com/yui/docs/YAHOO.util.Region.html&quot;&gt;Regions&lt;/a&gt; containing all matched elements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of YAHOO.util.Region
Y2.util.Dom.getRegionAll&amp;amp;#40;'div.myClass'&amp;amp;#41;;
Y2.util.Dom.getRegionAll&amp;amp;#40;'div.myClass', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;setStyle&lt;/h1&gt;

&lt;p&gt;Sets the style for the first matched node&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.setStyle&amp;amp;#40;'div', 'border', '1px'&amp;amp;#41;;
Y2.util.Dom.setStyle&amp;amp;#40;'div', context, 'border', '10px'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;setStyleAll&lt;/h1&gt;

&lt;p&gt;Sets style for all matched nodes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.setStyleAll&amp;amp;#40;'div', 'border', '1px'&amp;amp;#41;;
Y2.util.Dom.setStyleAll&amp;amp;#40;'div', context, 'border', '10px'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getStyle&lt;/h1&gt;

&lt;p&gt;Gets a specific style property from the first matched node&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns String of specific style property
Y2.util.Dom.getStyle&amp;amp;#40;'div', 'border'&amp;amp;#41;;
Y2.util.Dom.getStyle&amp;amp;#40;'div', context, 'border'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getStyleAll&lt;/h1&gt;

&lt;p&gt;Gets a specific style property from all matched nodes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of Strings of specific style property
Y2.util.Dom.getStyleAll&amp;amp;#40;'div', 'border'&amp;amp;#41;;
Y2.util.Dom.getStyleAll&amp;amp;#40;'div', context, 'border'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;setX, setY, setXY&lt;/h1&gt;

&lt;p&gt;Sets the horizontal placement (X), vertical placement (Y), or both (XY) of the first matched element&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.setX&amp;amp;#40;'div.second', 60&amp;amp;#41;;
Y2.util.Dom.setX&amp;amp;#40;'div.second', context, 60&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.setY&amp;amp;#40;'div.second', 60&amp;amp;#41;;
Y2.util.Dom.setY&amp;amp;#40;'div.second', context, 60&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.setXY&amp;amp;#40;'div.second', &amp;amp;#91;120,120&amp;amp;#93;&amp;amp;#41;;
Y2.util.Dom.setXY&amp;amp;#40;'div.second', context, &amp;amp;#91;120,120&amp;amp;#93;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;setXAll, setYAll, setXYAll&lt;/h1&gt;

&lt;p&gt;Sets the horizontal placement (X), vertical placement (Y), or both (XY) of all matched elements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns void
Y2.util.Dom.setXAll&amp;amp;#40;'div.second', 60&amp;amp;#41;;
Y2.util.Dom.setXAll&amp;amp;#40;'div.second', context, 60&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.setYAll&amp;amp;#40;'div.second', 60&amp;amp;#41;;
Y2.util.Dom.setYAll&amp;amp;#40;'div.second', context, 60&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.setXYAll&amp;amp;#40;'div.second', &amp;amp;#91;120,120&amp;amp;#93;&amp;amp;#41;;
Y2.util.Dom.setXYAll&amp;amp;#40;'div.second', context, &amp;amp;#91;120,120&amp;amp;#93;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getX, getY, getXY&lt;/h1&gt;

&lt;p&gt;Gets the horizontal placement (X), vertical placement (Y), or both (XY) of the first matched element&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Integer
Y2.util.Dom.getX&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getX&amp;amp;#40;'div.second', context&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.getY&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getY&amp;amp;#40;'div.second', context&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.getXY&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getXY&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;getXAll, getYAll, getXYAll&lt;/h1&gt;

&lt;p&gt;Gets the horizontal placement (X), vertical placement (Y), or both (XY) of all matched elements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Array of Integers
Y2.util.Dom.getXAll&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getXAll&amp;amp;#40;'div.second', context&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.getYAll&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getYAll&amp;amp;#40;'div.second', context&amp;amp;#41;;
&amp;amp;nbsp;
Y2.util.Dom.getXYAll&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.getXYAll&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;inDocument&lt;/h1&gt;

&lt;p&gt;Find out whether the first matched element is in the current document&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// returns Boolean
Y2.util.Dom.inDocument&amp;amp;#40;'div.second'&amp;amp;#41;;
Y2.util.Dom.inDocument&amp;amp;#40;'div.second', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;insertAfter&lt;/h1&gt;

&lt;p&gt;Take the first matched node of the first selector and insert after the first matched node of the second selector&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Note that this function handles context nodes on the first or second selectors, both, or none.
// returns the moved HTMLElement
Y2.util.Dom.insertAfter&amp;amp;#40;'div.third','div.fourth'&amp;amp;#41;;
Y2.util.Dom.insertAfter&amp;amp;#40;'div.third', context,'div.fourth'&amp;amp;#41;;
Y2.util.Dom.insertAfter&amp;amp;#40;'div.third', 'div.fourth', context&amp;amp;#41;;
Y2.util.Dom.insertAfter&amp;amp;#40;'div.third', context,'div.fourth', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;insertBefore&lt;/h1&gt;

&lt;p&gt;Take the first matched node of the first selector and insert before the first matched node of the second selector&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Note that this function handles context nodes on the first or second selectors, both, or none.
// returns the moved HTMLElement
Y2.util.Dom.insertBefore&amp;amp;#40;'div.third','div.fourth'&amp;amp;#41;;
Y2.util.Dom.insertBefore&amp;amp;#40;'div.third', context,'div.fourth'&amp;amp;#41;;
Y2.util.Dom.insertBefore&amp;amp;#40;'div.third','div.fourth', context&amp;amp;#41;;
Y2.util.Dom.insertBefore&amp;amp;#40;'div.third', context,'div.fourth', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;isAncestor&lt;/h1&gt;

&lt;p&gt;Find out whether the first matched node of the first selector is an ancestor of the first matched node of the second selector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Note that this function handles context nodes on the first or second selectors, both, or none.
// return Boolean
Y2.util.Dom.isAncestor&amp;amp;#40;'div.second','b#theFirstB'&amp;amp;#41;;
Y2.util.Dom.isAncestor&amp;amp;#40;'div.second', context,'b#theFirstB'&amp;amp;#41;;
Y2.util.Dom.isAncestor&amp;amp;#40;'div.second','b#theFirstB', context&amp;amp;#41;;
Y2.util.Dom.isAncestor&amp;amp;#40;'div.second', context,'b#theFirstB', context&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Documentation is a bitch!)&lt;/p&gt;

&lt;h1&gt;Additional Information&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/Y2/test.html&quot;&gt;Run the test document.&lt;/a&gt; (Might convert this to YUI Test framework if there is enough interest in this extension)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Cross Domain XHR with <span class="widow">Firefox 2</span></title>
		<link href="http://nebraskajs.com/cross-domain-xhr-with-firefox/"/>
		<updated>2007-08-30T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/cross-domain-xhr-with-firefox</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;By now know you know that trying to do an XMLHttpRequest (XHR or AJAX) call to a domain that is different from the domain of the hosted JavaScript in Firefox will throw an exception.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Error: uncaught exception: Permission denied to call method XMLHttpRequest.open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you don’t want a history of the past solutions, page down to see the final solution.&lt;/p&gt;

&lt;p&gt;The web has solutions to this problem, but most of them involve changing your JavaScript code, which I thought to be less than ideal. A common solution involves setting the UniversalBrowserRead security property in your JavaScript code [&lt;a href=&quot;http://almaer.com/blog/archives/000794.html&quot;&gt;Dion Almaer&lt;/a&gt;, of Ajaxian fame]:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netscape.security.PrivilegeManager.enablePrivilege&amp;amp;#40;'UniversalBrowserRead'&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with that solution (obviously) lies in single browser proprietary JavaScript polluting your code. And you have to set this property inside the scope of any usage (ie: inside your library file that does your AJAX calls and inside your callbacks, etc).&lt;/p&gt;

&lt;p&gt;Why can’t it just be as easy as Internet Explorer? They just pop-up a little security dialog asking you if you want to allow this access (which is also what the &lt;code&gt;enablePrivilege&lt;/code&gt; function does as well).&lt;/p&gt;

&lt;p&gt;Another solution involves setting the &lt;code&gt;capability.policy.default.XMLHttpRequest.open&lt;/code&gt; preference inside your prefs.js Firefox preference file [&lt;a href=&quot;http://blog.dirolf.com/2007/06/enabling-cross-domain-ajax-in-firefox.html&quot;&gt;Mike Dirolf&lt;/a&gt;]. This worked as desired and allowed the AJAX call, but anytime you attempt to access the resulting XML you received a nice exception as well. It turns out this is the solution we wanted, it’s just incomplete.&lt;/p&gt;

&lt;h2&gt;The Final Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Close Firefox. It will overwrite your changes to the prefs.js file if you have it open.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Optional step&lt;/em&gt;: This approach will open up your Firefox security quite a bit, so I’d recommend setting up a separate profile in Firefox to use when testing. It will &lt;strong&gt;not &lt;/strong&gt;pop up a security dialog when a cross-domain AJAX call is made.&lt;/li&gt;
&lt;li&gt;Find your prefs.js file. In Windows, it is typically located in the &lt;code&gt;C:Documents and Settings{YOUR_USERNAME}ApplicationDataMozillaFirefoxProfiles{YOUR_TEST_USER_PROFILE_ID}prefs.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open it up and add the following lines:     user_pref&amp;#40;&quot;capability.policy.default.XMLHttpRequest.open&quot;, &quot;allAccess&quot;&amp;#41;;

&lt;pre&gt;&lt;code&gt;user_pref&amp;amp;#40;&quot;capability.policy.default.CDATASection.nodeValue&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Element.attributes&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Element.childNodes&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Element.firstChild&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Element.getElementsByTagName&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Element.tagName&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.HTMLCollection.length&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.HTMLCollection.item&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.Text.nodeValue&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLDocument.documentElement&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLDocument.getElementsByTagName&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.channel&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.open&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.responseText&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.responseXML&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.send&quot;, &quot;allAccess&quot;&amp;amp;#41;;
user_pref&amp;amp;#40;&quot;capability.policy.default.XMLHttpRequest.setRequestHeader&quot;, &quot;allAccess&quot;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This code was copied (with the exception of 1 line) from a source repository at [&lt;a href=&quot;http://svn.kryogenix.org/filedetails.php?repname=kryogenix.org&amp;amp;path=/jackfield/trunk/htmlui/prefs.js&amp;amp;rev=0&amp;amp;sc=0&quot;&gt;kryogenix.org&lt;/a&gt;]&lt;br/&gt;
used in jackfield. It wasn’t intended to be used for this purpose, but it works.&lt;/p&gt;

&lt;p&gt;If you still get &lt;code&gt;Error: uncaught exception: Permission denied to call method _________&lt;/code&gt; errors, you can add the method to your prefs.js. I would appreciate a comment with any commonly used methods not included above. Thanks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Because this article is deprecated (applies to an older version of Firefox), I’m updating the blog title in the interest of minimizing the number of disappointed users. Some might think this is a stupid thing to do, since it’s the most popular page on my blog, but I’m more interested in helping people than getting traffic.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Namespacing outside of the <span class="widow">YAHOO Namespace</span></title>
		<link href="http://nebraskajs.com/namespacing-outside-of-the-yahoo-namespace/"/>
		<updated>2007-08-28T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/namespacing-outside-of-the-yahoo-namespace</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;YAHOO.namespace(). A lovely little utility function subject that &lt;a href=&quot;http://www.zachleat.com/web/2007/08/09/yui-code-review-yahoonamespace/&quot;&gt;I’ve written about before&lt;/a&gt;. If you’ve never heard of YAHOO.namespace or aren’t even familiar with namespacing, I’d read that article first.&lt;/p&gt;

&lt;p&gt;I’ll be honest, using the YAHOO namespace to store my own code makes my bunghole tighten just a little bit. What if I had written code stored under YAHOO.tool, which was unused prior to YUI 2.3.0? What would I do now? I’d have to rewrite my code, or never include any of the wonderful &lt;code&gt;YAHOO.tool.TestCase&lt;/code&gt;, put together by &lt;a href=&quot;http://www.nczonline.net/&quot;&gt;Nicholas Zakas&lt;/a&gt;. As is traditional with most of my weblog posts, I try not to just complain about a problem without giving you a solution (but let’s be honest, only if it doesn’t take too much work).&lt;/p&gt;

&lt;p&gt;Let’s rewrite the YAHOO.namespace function to work outside of the YAHOO Namespace, so we can do things like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace&amp;amp;#40; 'zachsWorld.partyTime' &amp;amp;#41;;
zachsWorld.partyTime = function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    alert&amp;amp;#40; 'Excellent.' &amp;amp;#41;;
&amp;amp;#125;
zachsWorld.partyTime&amp;amp;#40;&amp;amp;#41;; // obviously would alert: Excellent.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s some code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function namespace&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    var a=arguments, o=null, i, j, d;
    for &amp;amp;#40;i=; i
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Enlarging your YUI DataTable in 29 Seconds <span class="widow">or Less!</span></title>
		<link href="http://nebraskajs.com/enlarging-your-yui-datatable-in-29-seconds-or-less/"/>
		<updated>2007-08-28T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/enlarging-your-yui-datatable-in-29-seconds-or-less</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This is an updated version of the &lt;a href=&quot;http://www.zachleat.com/web/2007/06/07/enlarging-your-yui-datatable-in-30-seconds-or-less/&quot;&gt;Enlarging your YUI DataTable in 30 Seconds or Less!&lt;/a&gt; modified for the newly released YUI 2.3.0.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This method adds an extra row to the YUI DataTable when a row is selected, below the selected row. This allows the developer to add additional content that might not be applicable to the column constraints of a typical datatable or grid and allow that content be displayed more fluidly inside a single row spanning all of the viewable columns.&lt;/p&gt;

&lt;p&gt;I know you’re anxious for an example, so let’s see some screenshots of a simple YUI DataTable:&lt;/p&gt;

&lt;p&gt;[![Default DataTable][3]][3]&lt;/p&gt;

&lt;p&gt;Turns into this when a row is selected:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Lib/ymod/ymod-tableExtension-2.3.0.js&quot;&gt;&lt;img src=&quot;http://www.zachleat.com/Lib/ymod/ymod-tableExtension-2.3.0.js&quot; alt=&quot;Row selected&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click any of the above images for a live example.&lt;/p&gt;

&lt;p&gt;Any HTML can be added. You can make an AJAX call and put the result into the newly inserted row (that will be left as an exercise for the reader [you]).&lt;/p&gt;

&lt;p&gt;I know you’re asking yourself, how the hell do I add this to my YUI DataTable? WHERE IS THE DAMN SOURCE CODE? Calm down, you know I’m getting to it.&lt;/p&gt;

&lt;h3&gt;How To&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Include the &lt;a href=&quot;http://www.zachleat.com/Lib/ymod/ymod-tableExtension-2.3.0.js&quot;&gt;ymod-tableExtension-2.3.0.js&lt;/a&gt; file.&lt;/li&gt;
&lt;li&gt;Create your DataTable. If you don’t know how to do this, go to the &lt;a href=&quot;http://developer.yahoo.com/yui/datatable/&quot;&gt;official documentation for help and examples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure your DataTable has the selectionMode parameter set to ‘single’. This can be achieved by passing in &lt;code&gt;{ selectionMode: 'single' }&lt;/code&gt; in as the 4th argument to the DataTable constructor.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the following code to setup your table extension:&lt;/p&gt;

&lt;p&gt; // myDataTable is your DataTable object
 YAHOO.ymod.tableExtension.setup&amp;#40; myDataTable, function&amp;#40; contentDiv &amp;#41;
 &amp;#123;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var myContent = '';
 var selectedRows = this.getSelectedRows&amp;amp;#40;&amp;amp;#41;;
 if&amp;amp;#40; selectedRows.length &amp;gt;  &amp;amp;#41;
 &amp;amp;#123;
     myContent  = 'Do something based onthe row that is selected!';
 &amp;amp;#125;
 contentDiv.innerHTML = myContent;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &amp;#125; &amp;#41;;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The setup function is basically a convenience method to add the event listeners. You can just as easily do this yourself manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// myDataTable is your DataTable object.
myDataTable.subscribe&amp;amp;#40; 'headerRowMousedownEvent', YAHOO.ymod.tableExtension.cleanUp &amp;amp;#41;;
myDataTable.subscribe&amp;amp;#40; 'rowClickEvent', YAHOO.ymod.tableExtension.selectRow, function&amp;amp;#40; contentDiv &amp;amp;#41; &amp;amp;#123; /* same as function appears above */ &amp;amp;#125; &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;p&gt;Here’s some CSS hooks to do some styling. The expanded row will include the yui-dt-selected class by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* The original table row clicked on */
tr.ymod-expanded &amp;amp;#123;&amp;amp;#125;
/* Row containing the expanded content */
tr.ymod-expandedData &amp;amp;#123;&amp;amp;#125;
/* Div containing the expanded content inside the row */
tr.ymod-expandedData div.ymod-expandedDataContent &amp;amp;#123; background-color: navy; padding: 2px 6px; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Limitations&lt;/h3&gt;

&lt;p&gt;– Resorting removes the expanded content. Otherwise it was messing with the sort.&lt;br/&gt;
– It only works with single row selection mode, which allows only one row to be selected at a time. This is not the default (standard), which allows multiple rows to be selected with SHIFT or CTRL. Feel free to modify this to work with other modes!&lt;/p&gt;

&lt;h1&gt;&lt;a href=&quot;http://www.zachleat.com/Lib/ymod/ymod-tableExtension-2.3.0.js&quot;&gt;Download ymod-tableExtension-2.3.0.js&lt;/a&gt;&lt;/h1&gt;
</content>
 </entry>
 
	<entry>
		<title>ALARMd now <span class="widow">supports URLs</span></title>
		<link href="http://nebraskajs.com/alarmd-now-supports-urls/"/>
		<updated>2007-08-21T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/alarmd-now-supports-urls</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;When you add an alarm source to &lt;a href=&quot;http://www.zachleat.com/Projects/alarmd/&quot;&gt;ALARMd, the Internet Alarm Clock&lt;/a&gt;, it will now default to opening the input URL in a new window, if the URL is determined not to be an MP3, Youtube video, or a LAST.FM user or tag.&lt;/p&gt;

&lt;p&gt;I added this to use &lt;a href=&quot;http://www.zachleat.com/Projects/Malarquee/&quot;&gt;maLArquee&lt;/a&gt; as an alarm. For instance you can try adding this one to your ALARMd for a nice wake up message.&lt;/p&gt;

&lt;p&gt;Of course the obvious downfall of this approach is that your target website would need sound if you wanted to actually use it to wake up. But you could also use it to open up a new window at a specific time to prank a friend, coworker, or loved one. Try setting up ALARMd to use a naked lady website as a target url on your coworkers computer and set the time for right after lunch! Or open ALARMd up on your colleague’s computer and get it to open a competitor’s website during a big presentation to the company president.&lt;/p&gt;

&lt;p&gt;Fun to be had by all, I’m sure.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>maLArquee, Bringing Back <span class="widow">the Marquee</span></title>
		<link href="http://nebraskajs.com/malarquee-bringing-back-the-marquee/"/>
		<updated>2007-08-20T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/malarquee-bringing-back-the-marquee</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;What did you spend your Saturday afternoon on? Did you kick up your feet in your hammock with a nice glass of lemonade in the shade of your favorite tree and read the HTML specification? Me too! Who knew that we’d have so much in common? Since you’re obviously like me, you’ve probably wondered to yourself: where did the marquee tag go? Why isn’t the internet graced with scrolling text gently flowing like a babbling brook across the pixels of your web browser? Well since you spent your Saturday reading the HTML specifications, you would know that the &lt;code&gt;tag was only supported by Internet Explorer, and wasn’t even a part of the HTML spec. Unbelievable right? And to think the&lt;/code&gt; tag I came to know and love wasn’t part of the spec either! I’m just offended as you, let me reassure you.&lt;/p&gt;

&lt;p&gt;Well today, we’re going to solve all of that. Today, I’m going to show you a full screen web browser marquee that will both amaze and excite you. Here we go:&lt;/p&gt;

&lt;h2&gt;What is it for?&lt;/h2&gt;

&lt;p&gt;There are a few obvious uses, I suppose. You can send someone a nice greeting in an email link (it does a ROT13 encoding to mask the text inside the link). Try one of these:&lt;/p&gt;

&lt;p&gt;For a spouse: &lt;a href=&quot;http://www.zachleat.com/Projects/Malarquee/index.html?text=V%20jnag%20n%20qvibepr.&quot;&gt;I want a divorce.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an employee: &lt;a href=&quot;http://www.zachleat.com/Projects/Malarquee/index.html?text=Lbh'er%20sverq.&quot;&gt;You’re fired.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a doctor: &lt;a href=&quot;http://www.zachleat.com/Projects/Malarquee/index.html?text=V'z%20fbeel%7Cohg%20lbh%20unir%7Cnany%20jnegf.&quot;&gt;I’m sorry but you have anal warts.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For your son or daughter: &lt;a href=&quot;http://www.zachleat.com/Projects/Malarquee/index.html?text=Lbh%20jrer%20nqbcgrq.&quot;&gt;You were adopted.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;So, what else does it do?&lt;/h2&gt;

&lt;p&gt;I knew you’d ask. If you click the Options link in the top right corner, you can scroll your text across &lt;strong&gt;multiple web clients&lt;/strong&gt;! Input the number of clients you’d like to use and the number of your current client. Hit the update and save button to refresh your page. It will automatically parse your text accordingly (adding extra spaces at the end as blank slides if needed). You can test this using one computer by bringing up the following two links in separate windows side by side (you can use a different web browser for each link if you’d like):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/Projects/Malarquee/index.html?c=1&amp;amp;n=2&quot;&gt;maLArquee Client #1&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;/Projects/Malarquee/index.html?c=2&amp;amp;n=2&quot;&gt;maLArquee Client #2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could also go into a computer lab and scroll some text on a couple different computers.&lt;/p&gt;

&lt;h2&gt;Why?&lt;/h2&gt;

&lt;p&gt;I think it’s fun to try new things on the web, experiment a bit. That’s also why I made &lt;a href=&quot;http://www.zachleat.com/web/2007/06/18/wake-up-to-youtube-on-my-internet-alarm-clock/&quot;&gt;ALARMd, an Internet Alarm Clock&lt;/a&gt;. For this project, I think it might be fun to try a new JavaScript library, just to get a little bit more experience with a range of different coding types. So I decided to use &lt;a href=&quot;http://www.mootools.net/&quot;&gt;MooTools&lt;/a&gt;, and wrote &lt;a href=&quot;http://www.zachleat.com/web/2007/07/22/what-sound-does-a-cow-make-mootools/&quot;&gt;a little review&lt;/a&gt; on my experience, coming from a YUI and jQuery background.&lt;/p&gt;

&lt;h2&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;Every 5 scrolls (I reserve the right to change this number at any time I so wish to conserve bandwidth), the page makes an XmlHttpRequest to the server, gets the server time, and adjusts the delay of the next scroll event to synchronize scrolling between multiple browsers. Ideally, if every computer were the same, we could just do a single XmlHttpRequest at page load and do a standard interval for scrolling. But we all know that every web browser is different, and just because you do a setInterval(yourFunction,1000) doesn’t mean it’s actually going to run yourFunction every second. It might run in 1010 ms or 990 ms. Thus, the XmlHttpRequest is needed to resynchronize all of the clients to a standard clock.&lt;/p&gt;

&lt;p&gt;If there is any interest, I’ll post the code to the time.php script that returns the JSON containing the server time.&lt;/p&gt;

&lt;h2&gt;What would you do different next time?&lt;/h2&gt;

&lt;p&gt;I told my gracious web host about this project after I was approximately 90% complete with it, and his response was: “Did you use NTP?”, with which I replied: “What is NTP?” Ugh. There is even a &lt;a href=&quot;http://jehiah.cz/archive/ntp-for-javascript&quot;&gt;JavaScript implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to provide balance and order to the universe, please read &lt;a href=&quot;http://www.mcli.dist.maricopa.edu/tut/tut17.html&quot;&gt;the following link&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Using Phing to automate JavaScript and <span class="widow">CSS Minimization</span></title>
		<link href="http://nebraskajs.com/using-phing-to-automate-javascript-and-css-minimization/"/>
		<updated>2007-08-11T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/using-phing-to-automate-javascript-and-css-minimization</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This article may be too advanced for beginner programmers. Unfortunately, I will not support any code that I do not write (in this case), so if you have troubles installing some of the packages required below, please see the authors of the problem code. Thank you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PHING! &lt;a href=&quot;http://en.wikipedia.org/wiki/Wayne's_World&quot;&gt;Party on Wayne. Party on Garth!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’ve never used Phing, it’s an automation tool for PHP that is a port of Java’s ANT Build tool. But it’s not just for building (obviously, that’d be silly). You can hook all kinds of tasks into Phing: unit tests for your PHP code (you’re doing test driven development, aren’t you?), building your documentation, etc. But today, let’s look at automation of my favorite front end development tasks: packing (minimizing) our JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;To do this, I’m going to hook you up with two Filters for Phing that will use the &lt;a href=&quot;http://joliclic.free.fr/php/javascript-packer/en/&quot;&gt;PHP port of Dean Edwards JavaScript Packer&lt;/a&gt;, and the PHP class &lt;a href=&quot;http://csstidy.sourceforge.net/&quot;&gt;CSSTidy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what you’ll be responsible for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download both CSSTidy and the PHP port of Packer using the links above.&lt;/li&gt;
&lt;li&gt;Download Phing if you don’t already have it, and install it. Note the following change I had to make to my Phing binphing.bat file to get it working: Change &lt;code&gt;set PHP_CLASSPATH=&quot;%PHING_HOME%classes&quot;&lt;/code&gt; to remove the quotes: &lt;code&gt;set PHP_CLASSPATH=%PHING_HOME%classes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download the two Filters I made for Phing: &lt;strong&gt;&lt;a href=&quot;/Projects/phing/JSPackerFilter.phps&quot;&gt;JSPackerFilter.phps&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;/Projects/phing/CssTidyFilter.phps&quot;&gt;CssTidyFilter.phps&lt;/a&gt;&lt;/strong&gt;, change the extensions to .php and copy into your phing directory classesphingfilters&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the path in the include_once declaration at the top of each of the files to point to the csstidy and packer libraries you downloaded above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_once &quot;C:Libpacker.php-1.0class.JavaScriptPacker.php&quot;;


include_once &quot;C:Libcsstidy-1.3class.csstidy.php&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a working build file set up to point the directories your project is using. Here is a sample I made:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;














&amp;amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Templates for CssTidy include: low_compression, default, high_compression (declarations are limited to one line apiece), highest_compression (everything is put on one line).&lt;/p&gt;

&lt;p&gt;The above build file is set up to work with the following directory structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build

&lt;ul&gt;
&lt;li&gt;Web

&lt;ul&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build.xml&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web

&lt;ul&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Files are copied from the source in /Web to the /Build/Web directory. I hope that you can see from the build.xml file above that the target directory is specified in the copy tag, todir attribute.&lt;/p&gt;

&lt;p&gt;and the source directory is specified in the fileset tag, dir attribute.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And then, all you need to do is navigate to the directory holding your build.xml and run the phing command (if you have phing in your path. If not, you can use an absolute link to phing, for example c:softwarephingbinphing). Your minimized javascript and css will be in the Build directory!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>YUI Code <span class="widow">Review: YAHOO.namespace</span></title>
		<link href="http://nebraskajs.com/yui-code-review-yahoonamespace/"/>
		<updated>2007-08-09T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/yui-code-review-yahoonamespace</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This is the first in a one part series of posts (the is optional) reviewing the actual code contained in the YUI library. This series is not intended for advanced JavaScripters, so if you’re insulted by reading things you already know, you probably aren’t a very good student.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;YAHOO.namespace. This is a great little utility function that gives you an easy way to encourage low coupling throughout your JavaScript code. Divide your functions into functional units! If you already know how to use this function, you can skip to the bottom to learn a few JavaScript tricks Yahoo has put in. If not, keep reading! Are you making a new package you want to put under the YAHOO namespace? Just declare it in a string argument passed into the YAHOO.namespace function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.namespace&amp;amp;#40; 'myNamespace' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a YAHOO.myNamespace object that can be used many different ways. You can assign a single function to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.myNamespace = function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;;
&amp;amp;nbsp;
YAHOO.myNamespace&amp;amp;#40;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can assign multiple functions to it (with private variables included) using the &lt;a href=&quot;http://yuiblog.com/blog/2007/06/12/module-pattern/&quot;&gt;amazing Module Pattern&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.myNamespace = function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    var myPrivateVariable;
&amp;amp;nbsp;
    return &amp;amp;#123;
        myFirstFunction: function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123; return myPrivateVariable; &amp;amp;#125;,
        mySecondFunction: function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;&amp;amp;#125;
    &amp;amp;#125;
&amp;amp;#125;&amp;amp;#40;&amp;amp;#41;;
&amp;amp;nbsp;
var hisOrHerPrivateVariable = YAHOO.myNamespace.myFirstFunction&amp;amp;#40;&amp;amp;#41;;
YAHOO.myNamespace.mySecondFunction&amp;amp;#40;&amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you know that you can pass multiple arguments into YAHOO.namespace? I’ve been using YUI all this time and didn’t know about this feature. But the more I think about it, the more I doubt it’s usefulness. When are you going to declare two unrelated namespaces adjacently in code? For example, doing this is redundant in YUI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.namespace&amp;amp;#40; 'myNamespace' &amp;amp;#41;;
YAHOO.namespace&amp;amp;#40; 'myNamespace.myNestedNamespace' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second call to YAHOO.namespace will reuse ‘myNamespace’ if it exists, and create it if it doesn’t. But the point here is that you can do something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.namespace&amp;amp;#40; 'myNamespace', 'myOtherNamespace' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will create YAHOO.myNamespace and YAHOO.myOtherNamespace, and return a reference to the last one created, in this case YAHOO.myOtherNamespace.&lt;/p&gt;

&lt;p&gt;Here’s the code from this nice little function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.namespace = function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    var a=arguments, o=null, i, j, d;
    for &amp;amp;#40;i=; i
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Using DOM Query Libraries <span class="widow">in YUI</span></title>
		<link href="http://nebraskajs.com/using-dom-query-libraries-in-yui/"/>
		<updated>2007-07-30T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/using-dom-query-libraries-in-yui</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Recently, I posted the top 8 things I thought the YUI Library needed to be a top tier JavaScript library again. One of those things included a CSS Selector DOM Querying class. Use one of these babies for awhile, and you’ll never be able to code without it again. They’re amazingly useful and will shorten your code quite beautifully.&lt;/p&gt;

&lt;p&gt;So, let’s plug one of them into YUI! Let’s get some of that power under the hood. And let’s make it work identically to how we write our code for YUI currently, instead of changing the coding style (a la Dustin Diaz’s great extension to YUI called &lt;a href=&quot;http://dedchain.dustindiaz.com/&quot;&gt;DED|Chain&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;How are we going to do this? Let’s dive into the shallow end of the pool.&lt;/p&gt;

&lt;p&gt;The include order of our javascript files is going to be important. So, first we’ll do the YUI library core file (either yahoo-dom-event.js or utilities.js depending on your need for animation). Next, we need to include a CSS Selector DOM Querying class. For this proof of concept, I’ve provided examples for my two favorites, the jQuery engine and Jack Slocum’s DomQuery. These files are released under the MIT license, so make sure that complies with your project. It’s pretty liberal, so you shouldn’t have any problems. If you find these querying libraries useful, please donate to these projects!&lt;/p&gt;

&lt;p&gt;For code simplicity, I’ve added a one liner to Jack’s DomQuery to make it work as a standalone file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if&amp;amp;#40; typeof Ext == 'undefined' &amp;amp;#41; var Ext = function&amp;amp;#40;&amp;amp;#41;&amp;amp;#123;&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to read more about DomQuery, you can go to &lt;a href=&quot;http://www.jackslocum.com/blog/2007/01/11/domquery-css-selector-basic-xpath-implementation-with-benchmarks/&quot;&gt;Jack’s site all about syntax and benchmarks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&quot;/Projects/Y2/DomQuery.js&quot;&gt;Jack Slocum’s DomQuery Standalone File (24 KB)&lt;/a&gt; 1.0 Alpha 3 – Rev 4&lt;br/&gt;
Download: &lt;a href=&quot;/Projects/Y2/DomQuery-packer.js&quot;&gt;Jack Slocum’s DomQuery Standalone File Packed (7 KB)&lt;/a&gt; 1.0 Alpha 3 – Rev 4&lt;/p&gt;

&lt;p&gt;If you want to use jQuery’s selector engine, I’ve stripped out the functions unnecessary to the selector engine in the 1.1.3.1 release and packaged it up as jDomQuery. There are differences between these two package’s syntax, so make sure you keep that in mind, especially when looking at the pseudos, like :gt() and :lt() for example.&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&quot;/Projects/Y2/jdomquery-1.1.3.1.js&quot;&gt;jDomQuery Standalone File (23 KB)&lt;/a&gt; 1.1.3.1&lt;br/&gt;
Download: &lt;a href=&quot;/Projects/Y2/jdomquery-1.1.3.1-packer.js&quot;&gt;jDomQuery Standalone File Packed (10 KB)&lt;/a&gt; 1.1.3.1&lt;/p&gt;

&lt;p&gt;If you want to read about jQuery syntax, &lt;a href=&quot;http://docs.jquery.com/Selectors&quot;&gt;go over to their documentation&lt;/a&gt;. My current preference is the jQuery syntax, given that it &lt;a href=&quot;http://www.zachleat.com/web/2007/07/10/javascript-frameworks-and-jsf/&quot;&gt;works with poorly implemented JSF ID attributes&lt;/a&gt;. But that’s a different argument.&lt;/p&gt;

&lt;p&gt;If you want to use the full jQuery library, that should work too, but if you want to do that, you might just want to switch to using jQuery at that point (dare I say it).&lt;/p&gt;

&lt;p&gt;Next, we’ll extend the YAHOO.util.Dom class into a new Y2 namespace. This will map all of the functions from YAHOO.util.Dom into a new CSS Selector extension.&lt;/p&gt;

&lt;h1&gt;Download: &lt;a href=&quot;/Projects/Y2/Dom.js&quot;&gt;Y2.util.Dom (2 KB)&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;(pack at your own leisure, you can do it online at &lt;a href=&quot;http://dean.edwards.name/packer/&quot;&gt;Dean Edward’s Packer&lt;/a&gt;)&lt;/p&gt;

&lt;h1&gt;Putting It All Together&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;        Y2.util.Dom.addClass( 'div div:last', 'myClass' )
        Y2.util.Dom.hasClass( 'div div:last', 'myClass' ); // returns true
        var b = Y2.util.Dom.get( 'div div:last b' );
        Y2.util.Dom.addClass( b, 'myOtherClass' );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One important thing to note is that when using the CSS Selector syntax, when only one node is selected, functions will return a scalar instead of an array. So if you’re expecting to select multiple nodes in your selector query and only one node results, make sure your code handling the result is prepared for such an instance.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>8 Things the YUI Library Needs to Win <span class="widow">Me Back</span></title>
		<link href="http://nebraskajs.com/8-things-the-yui-library-needs-to-win-me-back/"/>
		<updated>2007-07-24T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/8-things-the-yui-library-needs-to-win-me-back</id>
		<content type="html">
</content>
 </entry>
 
	<entry>
		<title>What Sound Does a Cow <span class="widow">Make?  MooTools.</span></title>
		<link href="http://nebraskajs.com/what-sound-does-a-cow-make-mootools/"/>
		<updated>2007-07-22T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/what-sound-does-a-cow-make-mootools</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Frameworks, Frameworks everywhere. There are the big six: Dojo, jQuery, prototype/scriptaculous, Ext, Mootools, and YUI. (Honorable meantion to Open Rico and Mochikit) I’ve had limited experience with all of these frameworks, but have actually worked on projects involving YUI and jQuery. So when I was shopping around for a framework that I didn’t have extensive experience with for my next project, I decided to with Mootools. They’ve been getting a lot of traffic lately for posting their &lt;a href=&quot;http://mootools.net/slickspeed/&quot;&gt;SlickSpeed Selectors Test&lt;/a&gt;, so I figured why not try their wares.&lt;/p&gt;

&lt;p&gt;Originally coming from the YUI Library (a strictly namespaced, well organized package), and then learning jQuery (a language with object chaining, a more object oriented approach, and a much larger community), the Mootools package definitely caught me off guard.&lt;/p&gt;

&lt;p&gt;My first surprise was that it put functions EVERYWHERE! The Core file puts approximately ten functions in the global namespace, with the only indicator that they belong to Mootools being that they had a dollar sign prefix (e.g. $extend). Couldn’t these go into one global Mootools object? $E, $ES? These are given shortcuts with the normal $ and $$ functions. It just seems all over the place.&lt;/p&gt;

&lt;p&gt;That being said, there is a lot of good functionality in the base Mootools distribution. A built in class to do Json communication (something YUI is lacking, although I’m sure it wouldn’t be too hard to port it in from Captain Crockford’s Code on his website), a class to Scroll to elements with nice transitions. It seems like everytime I would hit a “functional” snag in my project, I could find the exact code I needed already included in the core file.&lt;/p&gt;

&lt;p&gt;I love their download page! Autopackaged code using Dean Edwards’ Packer. One small complaint is that there is no option to disable automatic include of dependencies. They want you to package Mootools into one single file everytime (which is unwieldy, considering I have to maintain my own text file of which packages I put into the source code, if I don’t want everything), and don’t let you download just a certain package for separate inclusion. But when the whole thing weighs in at 40KB, why does it even matter? I would recommend just downloading all the Components together and just not worrying about it.&lt;/p&gt;

&lt;p&gt;All in all, I’m quite happy with my Mootools experience. I’ve definitely found that their SmoothScroll class and easy Color fading techniques are used pretty heavily by developers using Mootools, which gives you a sixth sense that the page you’re viewing is using the Mootools library. Sometimes I can just tell without even looking at the source files, which in this case is a good thing, given that we’re talking about animation techniques and not raw widget style. But I plan on writing more about my pet peeves with framework widget styles later on.&lt;/p&gt;

&lt;p&gt;If you’ve been using one framework for a really long time, I would recommend checking out Mootools. Or any other framework. The more frameworks that you’ve tried, the better your perspective is on JavaScript in general, and what your framework’s strengths and weaknesses are. Mix it up!&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>20/20 Hindsight, a Look Back <span class="widow">at ALARMd</span></title>
		<link href="http://nebraskajs.com/2020-hindsight-a-look-back-at-alarmd/"/>
		<updated>2007-07-22T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/2020-hindsight-a-look-back-at-alarmd</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Now that the traffic has died down a little bit on ALARMd, I’d like to write a little bit about my experiences with something I don’t think anyone predicted would garner so much interest.&lt;/p&gt;

&lt;p&gt;The day I sent the link to the LifeHacker editor, I purchased the alarmd.com domain. My thoughts on the domain were that I should have it just in case I decided to host the clock on the domain for easy access, and I certainly didn’t want anyone else to have it. That turned out to be a good idea since an unnamed internet charlatan purchased a similar domain mere hours after I had purchased mine and pointed it to his website. This same person was going onto various blogs and websites where ALARMd had been posted saying that it was a ripoff of his site, which of course was not true. I’m sure he got some traffic from it, and certainly am curious about the liberties he takes with the truth just to make a buck. Obviously I am not going to post a link to his website, since I do not want him to receive any traffic to his Google Ads machine. I hope that you, as a reader of my website, will trust that anything linked to this guy’s name is not worth any of your time.&lt;/p&gt;

&lt;p&gt;The link was posted to LifeHacker, and my meager website went from an average of 50 hits a day to receiving 87000 hits in two weeks. In the end, I got more visitors from stumbleupon than LifeHacker, which is really a testament to that website’s popularity.&lt;/p&gt;

&lt;p&gt;It was on delicious popular bookmarks for a while. It actually also ended up being on television. I know, I know, it seems ridiculous to even put websites on television, but it was. A lady named Erin O’Hearn does a segment called “Right Now on the Net” for Channel 6 Action News in Philadelphia. She had a blurb about it and you can &lt;a href=&quot;http://rightnow.6abc.com/2007/06/great-discoveri.html&quot;&gt;even watch it here&lt;/a&gt; [Skip to 1:07]. I guess it was also on an internet radio show called “Techtalk Radio” and was featured as their site of the week. You can &lt;a href=&quot;http://www.techtalkradio.com/podcast/07152007.mp3&quot;&gt;listen to that podcast here&lt;/a&gt; [Skip to 47:09], even though they pronounce my name “Zach-A-Lot” and are obsessed with the “Naked” checkbox. But to be fair, who isn’t obsessed with Naked checkboxes?&lt;/p&gt;

&lt;p&gt;And just recently, I put up the alarmd.com domain as a redirect to the site for all the hard-core users still going to it and using it. It’s still getting a couple of hundred hits a day.&lt;/p&gt;

&lt;p&gt;So, hindsight. The alarm clock is a device that everyone uses and easily relates to, but also a device that people have low expectations for. Most alarms only have one or two times they go off for, and with only a few options for alerting: buzzer or radio. Most go off every day, even on the weekends when you want to sleep in. But people put up with their crappy alarm clocks because there is literally no good alarm clock hardware out there. And some of the features I’ve put into ALARMd can also be seen in alarm clocks that cost over $100 USD. Ridiculous. I would bet that there is a huge market for someone to come out with an alarm clock that does suck and costs $40, or maybe people just want to use their cell phones all the time. I wonder if the iPhone alarm is any good. Look for my next project, which will be just as, if not more, retarded as the Internet Alarm Clock.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>JavaScript Frameworks <span class="widow">and JSF</span></title>
		<link href="http://nebraskajs.com/javascript-frameworks-and-jsf/"/>
		<updated>2007-07-10T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/javascript-frameworks-and-jsf</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;You’re programming a new web application using JSF, maybe with Facelets, maybe without. Which client-side JavaScript framework is going to work with it’s unstandardized method of assigning ID attributes to it’s elements? Here is an example of a JSF file:&lt;br/&gt;
`&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;or maybe the same thing using Facelets:&lt;br/&gt;
`&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;These will both output the following result:&lt;br/&gt;
`&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Notice how the resulting text field has an ID attribute with the parent id prepended on. Now the real question is, how do we select this result node using the various JavaScript frameworks that are available to us?&lt;/p&gt;

&lt;h1&gt;Works, but we don’t care: Raw JavaScript or any GetById Function&lt;/h1&gt;

&lt;p&gt;Obviously using &lt;code&gt;document.getElementById( 'myForm:myText' );&lt;/code&gt; will function correctly. As will any framework that has a similar “GetById” function (YAHOO.util.Dom.get, or $ in Prototype, etc) What is more interesting to us is the behavior using the various CSS selector packages included with each JavaScript library.&lt;/p&gt;

&lt;h1&gt;Does not work: &lt;a href=&quot;http://extjs.com/deploy/ext/docs/output/Ext.DomQuery.html&quot;&gt;DomQuery&lt;/a&gt; in Ext 1.1 Beta 2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Ext.query&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
Ext.query&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two tests will throw the error &lt;code&gt;Ext.DomQuery.pseudos[name] is not a function&lt;/code&gt;, which obviously means that myText is not a pseudo class like :first or :last.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ext.query&amp;amp;#40; '#myForm\:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Throws the error: &lt;code&gt;Error parsing selector, parsing failed at &quot;:myText&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;Works: &lt;a href=&quot;http://docs.jquery.com/DOM/Traversing/Selectors&quot;&gt;jQuery&lt;/a&gt; 1.1.3&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;jQuery&amp;amp;#40; '#myForm\:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of version 1.1.3 (the latest of this writing), they have added support for the colon in ID selection when escaped with a double backslash. Versions older than 1.1.3 will not function properly. This is not yet in the documentation but can be viewed in the &lt;a href=&quot;http://jquery.com/blog/2007/07/01/jquery-113-800-faster-still-20kb/&quot;&gt;Escape selectors section of a blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Does not Work: &lt;a href=&quot;http://www.prototypejs.org/api/utility/dollar-dollar&quot;&gt;Prototype&lt;/a&gt; 1.5.1.1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$$&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
$$&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returns the form instead of the input element and treats myText as a pseudo class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$$&amp;amp;#40; '#myForm\:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interprets as XPATH selectors (\ means anywhere in the document), using myText as a pseudo selector now, so it returns ALL nodes in the document.&lt;/p&gt;

&lt;h1&gt;Does not Work: &lt;a href=&quot;http://dojotoolkit.org/node/336&quot;&gt;Dojo query&lt;/a&gt; 0.9.0 Beta&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;dojo.query&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
dojo.query&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
dojo.query&amp;amp;#40; '#myForm\:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s becoming mind numbingly obvious that if the framework doesn’t specifically say that you can escape selectors, it’s not going to let you do so. In the first two tests, Dojo performs the same as Prototype. In the double backslash test however, Dojo returns no result nodes.&lt;/p&gt;

&lt;h1&gt;Does not Work: &lt;a href=&quot;http://docs.mootools.net/Element/Element-Selectors.js&quot;&gt;Mootools&lt;/a&gt; 1.11&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$$&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
$$&amp;amp;#40; '#myForm:myText' &amp;amp;#41;;
$$&amp;amp;#40; '#myForm\:myText' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All throw the error &lt;code&gt;The expression is not a legal expression.&quot; code: &quot;51&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There you have it folks. jQuery is the JavaScript library of choice for the discerning JSF applications developer. Kudos to you if you’re already using it.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>DOMDom, easy DOM <span class="widow">Element Creation</span></title>
		<link href="http://nebraskajs.com/domdom-easy-dom-element-creation/"/>
		<updated>2007-07-07T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/domdom-easy-dom-element-creation</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Generally when approaching a complex problem involving web programming in JavaScript, the first question I ask myself is ‘What would Jesus do?’ As much as I am entertained by a mental picture of Mr. Jesus himself sitting on his &lt;a href=&quot;http://www.geocities.com/ResearchTriangle/Node/4081/&quot;&gt;Jesux Distro&lt;/a&gt; appending children (and parents) into his DOM, I am instead distracted by an intense “passionate” hatred for Mel Gibson swelling in my chest. It’s actually quite distracting to the problem I am having, but I calm myself by punching my 4 foot tall inflatable Mad Max and wonder how much time I waste doing this. I figure it happens about twice an hour. (Digression)&lt;/p&gt;

&lt;p&gt;The DOM. Arch-nemesis of web developers attempting to support the ultimately tiny (I think it’s down to about 5 or 8% now?) sliver of browser market share that Internet Explorer currently entails. Let’s make it easier on ourselves and make a little package to do it for us. Run a function, pass in an argument with a description of the DOM node(s) we wish to create, and have the package auto-correct any bugs we would have encountered during manual creation, and maybe even have it inserted or appended for us.&lt;/p&gt;

&lt;p&gt;But wait, why are we doing this when there are literally 80 billion other DOM element creation classes already out there? It’s all about syntax. The existing packages are incredibly verbose, focusing too much on a complex object structure to describe the nodes, in some cases even having separate objects for attributes inside a single node. Why not use the syntax we’ve already come to love in the various DOM query libraries that are available? Why not use DOMDom? Let’s see a few examples:&lt;/p&gt;

&lt;p&gt;Single Node String&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single Node String with ID and Classes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div#id1.class1.class2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single Node String for a Form Element&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'input[name=&quot;myTextBox&quot;,type=&quot;text&quot;,maxlength=&quot;5&quot;]'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single Node String with Style Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div{height=80px,color=#f90,border=1px solid #000}'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complex Single Node String with ID, multiple classes, Style, and Namespaced Attribute)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div#id1.class1.class2[style=&quot;width:60px;color:#f90&quot;,@class=&quot;class4&quot;,@att=&quot;true&quot;,@namespace:att=&quot;false&quot;]'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple Node String: Linear (Parents with one Child)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div span div'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple Node String: Non-Linear (Parent with more than one Child)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123; 'div': &amp;amp;#91; 'span', 'span' &amp;amp;#93; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;How Does It Work?&lt;/h1&gt;

&lt;p&gt;By default, it’s set up to do HTML Fragments (innerHTML) because they are much speedier than the manual DOM element creation (createElement). But if you desire, you can toggle a boolean in the code and it will switch back to DOM element creation. When in DOM element creation mode, it will account for the following browser bugs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(IE6) Standardized for attribute representation (pointer to htmlFor)&lt;/li&gt;
&lt;li&gt;(IE6) Standardized case for accesskey, usemap, maxlength, and frameborder attributes.&lt;/li&gt;
&lt;li&gt;(IE6) Standardized checked attribute for radio and checkboxes.&lt;/li&gt;
&lt;li&gt;(IE6) Special consideration for dynamic handling of name and type attributes (on form elements).&lt;/li&gt;
&lt;li&gt;(Firefox) &lt;a href=&quot;http://developer.mozilla.org/en/docs/Whitespace_in_the_DOM&quot;&gt;Works with whitespace that is treated as a node.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Syntax&lt;/h1&gt;

&lt;p&gt;You should already be able to tell how to create a node from the examples above. Here are some more things you might not have guessed:&lt;/p&gt;

&lt;p&gt;Creating a node with an id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div#myId'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a node with CSS classes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div.class1.class2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating two nodes at the same level&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#91; 'div', 'div' &amp;amp;#93;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a node with two children&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#123; 'div': &amp;amp;#91; 'div', 'div' &amp;amp;#93; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can mix the {} and [] syntax wherever you like, but if you want a node to have non-linear children, you have to use the {} object notation.&lt;/p&gt;

&lt;p&gt;Creating a text node (start the node declaration with a #, you can change this to another non-conflicting character in the code if you like)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'#Any Text Here'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a node with attributes (the @ is optional)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div[class=&quot;class3&quot;,style=&quot;width:60px;color:#f90&quot;,@att=&quot;true&quot;,@namespace:att=&quot;false&quot;]'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a node with a Style Shortcut (mixing with a style attribute is handled properly)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div{color=#f90,border=1px solid #000}[style=&quot;height:80px;background:#fff&quot;]'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes on attributes. Quotes are required on attributes (single or double but be consistent), but are not required in the style shortcut declaration. Quotes are not allowed to be nested inside of attributes (a single quote cannot be inside of a double quote and vice versa).&lt;/p&gt;

&lt;p&gt;And of course, all of the above can be mixed together&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'div#myId.class1.class2{color=#f90}[customAttr=&quot;true&quot;,@customAttr2=&quot;false&quot;] div#child1 div#child2'
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Appending&lt;/strong&gt; at the end of a parent’s children:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOMDom.append&amp;amp;#40; 'div', yourParentNode &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Replacing&lt;/strong&gt; the children of a parent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOMDom.replace&amp;amp;#40; 'div', yourParentNode &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Unshifting &lt;/strong&gt;(inserting at the beginning of a parent’s children):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOMDom.unshift&amp;amp;#40; 'div', yourParentNode &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inserting&lt;/strong&gt; before a certain integer index of a parent’s children:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOMDom.insert&amp;amp;#40; 'div', yourParentNode, 2 &amp;amp;#41;; // must have at least 3 children, the index is 0 based, if index is null with unshift by default
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Templates&lt;/h1&gt;

&lt;p&gt;Use  to indicate a variable, in this example&lt;/p&gt;

&lt;p&gt;`
// &quot;Compile&quot; the template
var str = DOMDom.compile( { 'div.test span': '#Test ' } );
// Use your template in some context, notice the test variable being set.
for( var j = 0; j &amp;lt; 1000; j   )
{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// knows we're using a compiled template since we're passing in variables as a third argument.
DOMDom.append( str, d, { test: j } );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
`&lt;/p&gt;

&lt;h3&gt;Benchmarks&lt;/h3&gt;

&lt;h4&gt;(If you have Firebug open, make sure it's not on the HTML tab, this will slow down the benchmark significantly)&lt;/h4&gt;

&lt;p&gt;Most of my work here has been inspired by the DomQuery and DomHelper classes written by JavaScript rock star Jack Slocum (the guy's initials are J.S. for God's sake), so I modeled my benchmark after &lt;a href=&quot;http://www.jackslocum.com/blog/examples/domhelper.php&quot;&gt;his benchmark hosted on his website to test the DomHelper class&lt;/a&gt;. I'm running the same nodes he's testing on his website, so the results should be comparable. You can &lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/benchmark.html&quot;&gt;test my benchmark for DOMDom here&lt;/a&gt;. Here are some results, reporting the average of 3 results with the format of an uncompiled element first and the compiled template in square brackets.&lt;/p&gt;

&lt;h2&gt;DOMDom Results&lt;/h2&gt;

&lt;p&gt;Internet Explorer 6: 666 ms [328 ms]&lt;br/&gt;
Firefox 2.0.0.4: 1880 ms [666 ms]&lt;br/&gt;
Safari 3.0.2 [Windows]: 546 ms [151 ms]&lt;br/&gt;
Opera 9.21: 343 ms [140 ms]&lt;/p&gt;

&lt;h2&gt;Comparative numbers from Jack Slocum's DomHelper&lt;/h2&gt;

&lt;p&gt;Internet Explorer 6: 2458 ms [677 ms]&lt;br/&gt;
Firefox 2.0.0.4: 672 ms [458 ms]&lt;br/&gt;
Safari 3.0.2 [Windows]: 291 ms [119 ms]&lt;br/&gt;
Opera 9.21: 370 ms [166 ms]&lt;/p&gt;

&lt;p&gt;The thing to take away from this is the question of why Satan is haunting my benchmarks? Two 666 averages? Anyway, DOMDom is quite a bit faster in the most popular browser, Internet Explorer, although I haven't tested it on IE7 yet. In Firefox, the opposite is true, with DomHelper taking the lead. Opera is comparable and Safari is faster in DomHelper as well. You can run your own tests using the links above.&lt;/p&gt;

&lt;h1&gt;Dependencies&lt;/h1&gt;

&lt;p&gt;This library was built to work with Yahoo User Interface (YUI), but could be trivially ported to another library by changing the function dependencies listed in the ADAPTER variable in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ADAPTER = &amp;amp;#123;
    setStyle: YAHOO.util.Dom.setStyle,
    addClass: YAHOO.util.Dom.addClass,
    isString: YAHOO.lang.isString,
    isArray: YAHOO.lang.isArray,
    isNumber: YAHOO.lang.isNumber,
    isObject: YAHOO.lang.isObject,
    get: YAHOO.util.Dom.get
&amp;amp;#125;; // to port, change these references
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're still reading this encyclopedia, here are some links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/DOMDom.js&quot;&gt;DOWNLOAD DOMDom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/DOMDom-min-jsmin.js&quot;&gt;DOWNLOAD DOMDom Minimized with JSMIN (10KB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/DOMDom-min-packer.js&quot;&gt;DOWNLOAD DOMDom Minimized with Packer (6KB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/benchmark.html&quot;&gt;See the benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/DOMDom/tests.html&quot;&gt;See the test file with a bunch of examples of syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.encyclopedia.com/doc/1O27-dom1.html&quot;&gt;&lt;em&gt;-dom suffix denoting condition or state, as in freedom, wisdom, or DOMDom&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: changed the variable syntax to allow variables inside of nodes (not just text).&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Wake up to YouTube on my Internet <span class="widow">Alarm Clock</span></title>
		<link href="http://nebraskajs.com/wake-up-to-youtube-on-my-internet-alarm-clock/"/>
		<updated>2007-06-18T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/wake-up-to-youtube-on-my-internet-alarm-clock</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Try the new &lt;a href=&quot;http://www.zachleat.com/web/2008/04/06/alarmd-2-beta-with-google-calendar-integration/&quot;&gt;ALARMd 2 Beta&lt;/a&gt;, with Google Calendar integration and offline Youtube caching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Did you take your contacts out last night and you can’t see the time on your alarm clock from all the way across the room?&lt;/p&gt;

&lt;p&gt;I’m here to calm your fears. Enter &lt;a href=&quot;http://www.zachleat.com/Projects/alarmd/&quot;&gt;ALARMD, the Internet Alarm Clock&lt;/a&gt;. Wake up to any Youtube video (that allows embedding), a last.fm user stream or tag, or any mp3 hosted online. There are a few defaults in there, but you can add and modify your own.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/4650&quot;&gt;&lt;img src=&quot;https://addons.mozilla.org/en-US/firefox/addon/4650&quot; alt=&quot;Now that's an alarm clock&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports multiple alarms (ALT R to add an alarm or use the Add Alarm button).&lt;/li&gt;
&lt;li&gt;Options for 24 Hour (Military) time and Seconds display&lt;/li&gt;
&lt;li&gt;Supports MP3 (hosted online), YouTube videos (that allow embedding), and last.fm user or tag streams.&lt;/li&gt;
&lt;li&gt;Key Mash Mode to kill the alarm (hit five random keys in one second)&lt;/li&gt;
&lt;li&gt;Time Font Size customization (automatically size to the width of the window using the Max option)&lt;/li&gt;
&lt;li&gt;Typical alarm clock colors: Red, Green, or Blue&lt;/li&gt;
&lt;li&gt;Alarm Toggle based on the Day of the Week&lt;/li&gt;
&lt;li&gt;Test button to make sure your speaker volume is set correctly.&lt;/li&gt;
&lt;li&gt;Sleep Mode button to get rid of the extra GUI while you don’t need it.&lt;/li&gt;
&lt;li&gt;Save all of your settings, URL’s, and alarms locally in a cookie (you &lt;strong&gt;don’t&lt;/strong&gt; need yet another account to use this)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Things to think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Power Settings – disable your screen saver, or any sort of automatic suspend or sleep setting. In my testing, having your monitor go into power save mode is acceptable, and the alarms will still sound (but you might want to test this yourself and leave a comment with your result).&lt;/li&gt;
&lt;li&gt;You might not want to use with a CRT, for fear of burn in.&lt;/li&gt;
&lt;li&gt;Personally, I like to use this in Opera, just because their default full screen mode (F11) doesn’t have toolbars or a status bar. But you can use the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/4650&quot;&gt;Fuller Screen Firefox plug-in&lt;/a&gt; to soup up your Firefox for similar functionality.&lt;/li&gt;
&lt;li&gt;Word of warning, the window &lt;strong&gt;must&lt;/strong&gt; have focus to autoplay YouTube videos.&lt;/li&gt;
&lt;li&gt;Make sure your local time on your computer is correct, especially if you are traveling between time zones. It doesn’t do any server side validation on the time (yet?).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Possible Future Improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Countdown mode, displays amount of time until next alarm in place of the clock (good for timed presentations, where you want to see how much time is left before you have to quit).&lt;/li&gt;
&lt;li&gt;Google Gears integration for offline mode (if your internet goes out during the night)&lt;/li&gt;
&lt;li&gt;Support customizing source URL’s on a per alarm basis.&lt;/li&gt;
&lt;li&gt;Support days of the week toggle on a per alarm basis.&lt;/li&gt;
&lt;li&gt;Support user specified color customization.&lt;/li&gt;
&lt;li&gt;A crescendo alarm MP3 that increases in volume for a more peaceful wake up experience.&lt;/li&gt;
&lt;li&gt;An alarm MP3 with especially violent noises for heavy sleepers.&lt;/li&gt;
&lt;li&gt;An alarm MP3 of my mom’s voice to get that nice feeling of childhood back.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This internet application was built using the Yahoo UI Libraries (YUI) and Jack Slocum’s Ext DomQuery class. It is written entirely without using any server side programming languages, and therefore can be saved to your local machine. Not that anyone might want to use the Internet Alarm Clock, but if you do, I declare it officially released under the BSD license. Just don’t forget to cite the source when you redistribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: added a couple more things to think about.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Enlarging your YUI DataTable in 30 Seconds <span class="widow">or Less!</span></title>
		<link href="http://nebraskajs.com/enlarging-your-yui-datatable-in-30-seconds-or-less/"/>
		<updated>2007-06-07T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/enlarging-your-yui-datatable-in-30-seconds-or-less</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Please note that this post has been updated to the new version of YUI, 2.3.0 in an article called &lt;a href=&quot;http://www.zachleat.com/web/2007/08/28/enlarging-your-yui-datatable-in-29-seconds-or-less/&quot;&gt;“Enlarging your YUI DataTable in 29 Seconds or Less!”&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you want to fit more content onto your DataTable, but don’t know how? Do you wish that you had fewer columns, or more horizontal screen-estate? Well now you can enlarge your table easily with these simple functions! Instead of adding more information into additional columns, we have used our patented method of not actually patenting anything to bring you a secret formula that will allow you to dynamically insert rows into your table, designed for holding additional, non-constrained customizable content!&lt;/p&gt;

&lt;p&gt;Do you mean to tell me that your formula will give that special lady in your life the DataTable that she has always wanted?&lt;/p&gt;

&lt;p&gt;Of course! In fact, we guarantee this DataTable to satisfy all of the women you know and don’t know in the world or we’ll give you a full refund of the purchase price!&lt;/p&gt;

&lt;p&gt;Wow! How does it work?&lt;/p&gt;

&lt;p&gt;Click here for an example!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/06/datatable.gif&quot; alt=&quot;Normal DataTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/06/datatableexpanded.gif&quot; alt=&quot;Expanded DataTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you click on a row in the DataTable, it inserts a child row beneath the row with an HTML string passed in to populate the dynamic content. When you click on the parent row or the new row that was inserted, the content disappears! It’s that easy! You don’t have to apply any gross awful smelling creams, or take any large horse-sized pills for this to work! You literally only use the following code to do it:&lt;/p&gt;

&lt;p&gt;Usage Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myDataTable = new YAHOO.widget.DataTable&amp;amp;#40;&quot;myContainer&quot;,myColumnSet,myDataSource&amp;amp;#41;;  
myDataTable.subscribe&amp;amp;#40;&quot;cellClickEvent&quot;, myDataTable.onEventSelectRow&amp;amp;#41;; // make sure you're firing the row selection event
myDataTable.subscribe&amp;amp;#40;&quot;cellClickEvent&quot;, function&amp;amp;#40; e &amp;amp;#41; &amp;amp;#123;
   var myCustomHtml = 'Hello, this is my expanded content.:-)'; // generate the string, could use an ajax call if you wanted.
   YAHOO.ymod.datatable.clickAndExpand.call&amp;amp;#40; this, e, myCustomHtml &amp;amp;#41;; // if you do use an ajax call, this function returns a reference to the newly created div that you can put the ajax results into.
&amp;amp;#125; &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Library Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.namespace&amp;amp;#40; 'YAHOO.ymod.datatable' &amp;amp;#41;;
YAHOO.ymod.datatable.clickAndExpand = function&amp;amp;#40; e, expandedHtml &amp;amp;#41;
&amp;amp;#123;
    var selectedRows = this.getSelectedRows&amp;amp;#40;&amp;amp;#41;;
    if&amp;amp;#40; selectedRows.length &amp;gt;  &amp;amp;#41;
    &amp;amp;#123;
        if&amp;amp;#40; YAHOO.util.Dom.hasClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'ymod-expandedData' &amp;amp;#41; &amp;amp;#41;
        &amp;amp;#123;
            YAHOO.util.Dom.removeClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;.previousSibling, 'expanded' &amp;amp;#41;;
            selectedRows&amp;amp;#91;  &amp;amp;#93;.parentNode.removeChild&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93; &amp;amp;#41;;
        &amp;amp;#125; else if&amp;amp;#40; !YAHOO.util.Dom.hasClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'ymod-expanded' &amp;amp;#41; &amp;amp;#41; &amp;amp;#123;
            var newRow = document.createElement&amp;amp;#40; 'tr' &amp;amp;#41;;
            var newCell = document.createElement&amp;amp;#40; 'td' &amp;amp;#41;;
            var newDiv = document.createElement&amp;amp;#40; 'div' &amp;amp;#41;;
            YAHOO.util.Dom.addClass&amp;amp;#40; newDiv, 'ymod-expandedDataContent' &amp;amp;#41;;
            if&amp;amp;#40; expandedHtml != null &amp;amp;#41; newDiv.innerHTML = expandedHtml;
            newCell.appendChild&amp;amp;#40; newDiv &amp;amp;#41;;
            newCell.colSpan = selectedRows&amp;amp;#91;  &amp;amp;#93;.childNodes.length;
            newRow.appendChild&amp;amp;#40; newCell &amp;amp;#41;;      
            YAHOO.util.Dom.addClass&amp;amp;#40; newRow, 'ymod-expandedData' &amp;amp;#41;;
            if&amp;amp;#40; YAHOO.util.Dom.hasClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'yui-dt-odd' &amp;amp;#41; &amp;amp;#41; YAHOO.util.Dom.addClass&amp;amp;#40; newRow, 'yui-dt-odd' &amp;amp;#41;;
            else if&amp;amp;#40; YAHOO.util.Dom.hasClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'yui-dt-even' &amp;amp;#41; &amp;amp;#41; YAHOO.util.Dom.addClass&amp;amp;#40; newRow, 'yui-dt-even' &amp;amp;#41;;
            YAHOO.util.Dom.addClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'ymod-expanded' &amp;amp;#41;;
            selectedRows&amp;amp;#91;  &amp;amp;#93;.parentNode.insertBefore&amp;amp;#40; newRow, selectedRows&amp;amp;#91;  &amp;amp;#93;.nextSibling &amp;amp;#41;;
            YAHOO.util.Event.addListener&amp;amp;#40; newRow, 'click', function&amp;amp;#40; e &amp;amp;#41;
            &amp;amp;#123;
                YAHOO.ymod.datatable.collapseRow&amp;amp;#40; this &amp;amp;#41;;
                YAHOO.util.Event.stopEvent&amp;amp;#40; e &amp;amp;#41;;
            &amp;amp;#125; &amp;amp;#41;;
            YAHOO.util.Dom.removeClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'yui-dt-selected' &amp;amp;#41;;
            YAHOO.util.Event.stopEvent&amp;amp;#40; e &amp;amp;#41;;
            return newDiv;
        &amp;amp;#125; else &amp;amp;#123;
            selectedRows&amp;amp;#91;  &amp;amp;#93;.parentNode.removeChild&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;.nextSibling &amp;amp;#41;;
            YAHOO.util.Dom.removeClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'ymod-expanded' &amp;amp;#41;;
            YAHOO.util.Dom.removeClass&amp;amp;#40; selectedRows&amp;amp;#91;  &amp;amp;#93;, 'yui-dt-selected' &amp;amp;#41;;
            YAHOO.util.Event.stopEvent&amp;amp;#40; e &amp;amp;#41;;
        &amp;amp;#125;
    &amp;amp;#125;
&amp;amp;#125;;
&amp;amp;nbsp;
// pass in the expanded content, NOT the parent row.
YAHOO.ymod.datatable.collapseRow = function&amp;amp;#40; row &amp;amp;#41;
&amp;amp;#123;
    YAHOO.util.Dom.removeClass&amp;amp;#40; row.previousSibling, 'ymod-expanded' &amp;amp;#41;;
    YAHOO.util.Dom.removeClass&amp;amp;#40; row.previousSibling, 'yui-dt-selected' &amp;amp;#41;;
    row.parentNode.removeChild&amp;amp;#40; row &amp;amp;#41;;
&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Customize the CSS, if desired.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.yui-dt-table tr.ymod-expandedData &amp;amp;#123; background-color: #bdcede; cursor: pointer; &amp;amp;#125;
.yui-dt-table tr.ymod-expandedData td &amp;amp;#123; padding-right: 5px; padding-bottom: 5px; white-space: normal; overflow: visible; &amp;amp;#125;
.yui-dt-table tr.ymod-expanded &amp;amp;#123; background-color: #bdcede; &amp;amp;#125;
.yui-dt-table tr.ymod-expanded td &amp;amp;#123; border-bottom: ; &amp;amp;#125;
.yui-dt-table div.ymod-expandedDataContent &amp;amp;#123; background-color: #f4f4f4; border: 1px inset #aaa; padding: 2px 5px; white-space: normal; zoom: 1; overflow: hidden; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might even want to put a little and – into the first column of each row to give a visual cue that there is more information for display available on click.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Screen Readers and Listening at the Speed <span class="widow">of Sound</span></title>
		<link href="http://nebraskajs.com/screen-readers-and-listening-at-the-speed-of-sound/"/>
		<updated>2007-05-17T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/screen-readers-and-listening-at-the-speed-of-sound</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Here is a &lt;a href=&quot;http://yuiblog.com/blog/2007/05/14/video-intro-to-screenreaders/&quot;&gt;presentation&lt;/a&gt; given by a guy named Victor Tsaran on how he personally uses screen readers to browse the web. As web developers, accessibility is an important aspect of our work and cannot be ignored. How many websites have you browsed that had flash navigation? If you’re not a web developer, you need to skip ahead to time stamp 25:44 to see the mega-fast speed this guy uses the screen reader at. I couldn’t understand a single word coming out of my speaker.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Wash your mouth out with SOAP and the YUI <span class="widow">Connection Manager</span></title>
		<link href="http://nebraskajs.com/wash-your-mouth-out-with-soap-and-the-yui-connection-manager/"/>
		<updated>2007-05-09T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/wash-your-mouth-out-with-soap-and-the-yui-connection-manager</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Now you’ve done it. You watched an R rated movie while your parents weren’t looking and used some of your newfound acquired colorful language in front of them. Your mom goes for the Dial Liquid Soap, she’s going to wash that profanity right out of your dirty little mouth.&lt;/p&gt;

&lt;p&gt;Harsh? Maybe, but I couldn’t say the word ‘Bastards’ without feeling Dial on my cleansed taste buds. Maybe I should take legal action against the cinematic classic ‘&lt;a href=&quot;http://www.imdb.com/title/tt0102059/&quot;&gt;Hot Shots&lt;/a&gt;.’&lt;/p&gt;

&lt;p&gt;What are we here for? Not liquid soap, perhaps some profanity. But really, you want to use the SOAP web services protocol with your Yahoo User Interface application, in particular the Connection Manager component. This tutorial assumes you are at least familiar with &lt;a href=&quot;http://developer.yahoo.com/yui/connection/&quot;&gt;the examples provided on the Yahoo! UI Library: Connection Manager website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How is SOAP different than any other AJAX call using the Connection Manager? Well, normally, when you perform an HTTP Post AJAX call, it is passing in a key-value pair string encoded with the normal key=value&amp;amp;key2=value format. But when doing a SOAP call, we want to post an XML SOAP Envelope to the server instead of this key-value pair string. In case you’re reading this article and don’t know what a SOAP Envelope looks like, I’ll post a sample here:&lt;br/&gt;
`&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Of course, it is beyond the scope of this article to argue whether a REST or a SOAP format for your Service Oriented Architecture is a better choice. You’re stuck with SOAP, otherwise you wouldn’t have read this far.&lt;/p&gt;

&lt;p&gt;So, let’s post our SOAP Envelope using the YUI Connection Manager with the code provided below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var targetUrl = 'http://www.zachleat.com/postToServer.php'; // this is not a real URL
&amp;amp;nbsp;
var callback = &amp;amp;#123;
    success: function&amp;amp;#40;o&amp;amp;#41;
    &amp;amp;#123;
        var root = o.responseXML.documentElement; 
        if&amp;amp;#40; root.getElementsByTagName&amp;amp;#40; 'faultstring' &amp;amp;#41;.length &amp;gt;  &amp;amp;#41; // faultstring is a standard SOAP error message format
        &amp;amp;#123;
            var faultstring = root.getElementsByTagName&amp;amp;#40; 'faultstring' &amp;amp;#41;&amp;amp;#91;&amp;amp;#93;.firstChild.nodeValue;
            var detailed = '';
            YAHOO.UP.util.each&amp;amp;#40; root.getElementsByTagName&amp;amp;#40; 'detail' &amp;amp;#41;&amp;amp;#91;&amp;amp;#93;.childNodes, function&amp;amp;#40; j, textNode &amp;amp;#41;
            &amp;amp;#123;
                if&amp;amp;#40; textNode.nodeValue != null &amp;amp;#41; detailed  = textNode.nodeValue;
            &amp;amp;#125; &amp;amp;#41;;
            // do something with your error message stored in the faultstring variable, with a more detailed message in the detailed variable
        &amp;amp;#125; else &amp;amp;#123;
            // this is an actual success.
        &amp;amp;#125;
    &amp;amp;#125;, 
    failure: function&amp;amp;#40; o &amp;amp;#41;
    &amp;amp;#123;
        // do something with your failure.
    &amp;amp;#125;
&amp;amp;#125;;
&amp;amp;nbsp;
var message = '
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>YUI DataTable and You: Making the <span class="widow">Marriage Work</span></title>
		<link href="http://nebraskajs.com/yui-datatable-and-you-making-the-marriage-work/"/>
		<updated>2007-04-30T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/yui-datatable-and-you-making-the-marriage-work</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;The DataTable/Grid Component, the ball and chain of GUI components. It doesn’t let you go out and instantiate beers to create a inebriated subclass of yourself with your friends on Friday night. It makes you do household garbage collection during the last minute of your favorite sporting event. And you’d think it would die before it would ever encapsulate your private class member. Just to warn you, the previous sentence was not safe for work.&lt;/p&gt;

&lt;p&gt;Earlier I published an article entitled &lt;a href=&quot;/web/2007/04/04/problems-with-yui-datatable/&quot;&gt;Problems with the YUI DataTable&lt;/a&gt;. Now we’re going to work out those problems together, through better communication and more effective problem solving techniques. We’re going to save your marriage.&lt;/p&gt;

&lt;p&gt;Earlier I had stated that there were a few problems with the DataTable, in its current form. Let’s review (but not play the blame game).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bug #1: Table headers weren’t lining up correctly in Firefox (personal ignorance on Box Models)&lt;/li&gt;
&lt;li&gt;Bug #2: Single Select bug where multiple rows were being selected when column was sorted (All browsers, Sortable and SingleSelect Tables)&lt;/li&gt;
&lt;li&gt;Bug #3: Header displayed out of document flow when the window was resized (IE6, Scrollable Tables)&lt;/li&gt;
&lt;li&gt;Bug #4: Content was being displayed approximately 60-70 pixels inside the bottom table boundary. (Firefox, Scrollable Tables) Note the position of the ‘Top’ links in the test document below.&lt;/li&gt;
&lt;li&gt;Bug #5: More of a limitation than a bug, the DataTable does not allow a fixed width table with horizontal overflow. Say you have a table that you have fixed column widths for, but if the width of the real estate available for the table is less than this minimum, the table should overflow with a scroll bar, but at the same time showing the column headers if you scroll vertically. A picture is better:&lt;br/&gt;
&lt;img src=&quot;/web/wp-content/uploads/2007/04/yui-datatable1.gif&quot; alt=&quot;Scrollable&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;See the following &lt;a href=&quot;http://www.zachleat.com/Projects/valdi/__test_yui_datatable_original.html&quot;&gt;test document&lt;/a&gt; for relevant table tests. (Note that for the purposes of testing, I’ve decided to test all combinations of the Top 3 DataTable features: scrolling, nested table headers, and sorting)&lt;/p&gt;

&lt;p&gt;Just like your favorite professor, now I’m going to post the &lt;strong&gt;Solutions&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Bug #1: What is your Box Model?&lt;/p&gt;

&lt;p&gt;Use the following JavaScript code to tell if you’re in Standards Mode or Quirks Mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert&amp;amp;#40; document.compatMode=='CSS1Compat' ? 'Standards Mode' : 'Quirks Mode' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Standards mode forces your document into using the W3C Box Model, which is currently the standard. The W3C Box Model means any width declarations you make in your CSS code will not include padding, border, or margins. So if you put padding on your table cells and headers, it will need &lt;em&gt;to be added on separately to the total width of your table&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bug #2: Someone has posted the solution on the &lt;a href=&quot;http://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=1701632&amp;amp;group_id=165715&amp;amp;atid=836476&quot;&gt;Sourceforge Bug Tracker here&lt;/a&gt;. (This is included in the DataTable javascript file below)&lt;/p&gt;

&lt;p&gt;Bug #3, #4, and #5: I have produced an alternate DataTable file that fixes these bugs using JavaScript code. All lines that were added or changed are commented with //ADDED or //CHANGED&lt;/p&gt;

&lt;p&gt;Developed in and last tested with YUI version 2.2.2.&lt;/p&gt;

&lt;p&gt;Download it here:&lt;br/&gt;
Full (169 KB): &lt;a href=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/04/ymod-datatable-beta.js&quot; title=&quot;ymod-datatable-beta.js&quot;&gt;ymod-datatable-beta.js&lt;/a&gt;&lt;br/&gt;
Minimized using &lt;a href=&quot;http://www.crockford.com/javascript/jsmin.html&quot;&gt;JSMIN&lt;/a&gt; (67 KB): &lt;a href=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/04/ymod-datatable-beta-min.js&quot; title=&quot;ymod-datatable-beta-min.js&quot;&gt;ymod-datatable-beta-min.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The original and minimized YUI DataTable files are 166 KB and 66 KB respectively.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;/Projects/valdi/__test_yui_datatable_fluid.html&quot;&gt;fluid width DataTables in action here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few notes on doing a fixed width DataTable using the code provided above. The total width of the table body must be 16px less than the width of the header, if you have vertical scrolling (to account for the scrollbar). So, if the total width of your header is 800px, the total width of your body must be 784px (put the last table cell as 16px smaller).&lt;/p&gt;

&lt;p&gt;Here’s the CSS to go along with a horizontal scrolling DataTable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.yui-dt-table th, .yui-dt-table td &amp;amp;#123; padding: 2px  2px 5px; vertical-align: top; &amp;amp;#125;
.yui-dt-table th, .yui-dt-table tr.yui-dt-first td &amp;amp;#123; width: 100px; &amp;amp;#125; /* table header and only the first row (for drag and drop) */
.ymod-scrollingBody .yui-dt-table tr.yui-dt-first td.yui-dt-last &amp;amp;#123; width: 84px; &amp;amp;#125; /* last table cell (for crappy scrollbar problem) */
.yui-dt-table .yui-dt-even &amp;amp;#123;background-color:#fff;&amp;amp;#125;
.yui-dt-table .yui-dt-odd &amp;amp;#123;background-color:#e0dfe0;&amp;amp;#125;
.yui-dt-table .yui-dt-selected &amp;amp;#123;background-color:#bdcede;&amp;amp;#125;
.yui-dt-table thead &amp;amp;#123;background-color:#933;color:#fff;&amp;amp;#125;
.yui-dt-table th a &amp;amp;#123;color:#fff ! important;&amp;amp;#125;
.ymod-scrollingHeader &amp;amp;#123;
    width: 100%;
    height: 20px;
    overflow: hidden;
    position: relative;
&amp;amp;#125;
.ymod-nestedHeaders &amp;amp;#123;
    height: 40px; /* gotta set this manually, unfortunately */
&amp;amp;#125;
.ymod-scrollingHeader table &amp;amp;#123;
    position: absolute;
    top: ;
    left: ;
&amp;amp;#125;
.ymod-scrollingBody &amp;amp;#123;
    width: 100%;
    overflow: auto;
    height: 160px;
&amp;amp;#125;
.ymod-scrollingHeader table &amp;amp;#123; width: 800px; &amp;amp;#125; /* Set your widths! */
.ymod-scrollingBody table &amp;amp;#123; width: 784px; &amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>I-Frame Shims or How I Learned to Stop Worrying and Love <span class="widow">the Bomb</span></title>
		<link href="http://nebraskajs.com/adventures-in-i-frame-shims-or-how-i-learned-to-love-the-bomb/"/>
		<updated>2007-04-24T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/adventures-in-i-frame-shims-or-how-i-learned-to-love-the-bomb</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;So again, I show up late to the party. IE7 is already out, but my target customers are still using IE6. So today, boys and girls, we’re going to discover the magical world of using I-Frame shims to hide those bleeding heart select boxes from showing through our layered elements.&lt;/p&gt;

&lt;p&gt;Typically, when creating an I-Frame shim, you’re going to create the i-frame dynamically using document.createElement. Let’s start out with some successful code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var iframeShim = document.createElement&amp;amp;#40; 'iframe' &amp;amp;#41;;
iframeShim.setAttribute&amp;amp;#40; 'src', 'javascript:&quot;&quot;;' &amp;amp;#41;;
iframeShim.setAttribute&amp;amp;#40; 'frameBorder', '0' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for some caveats you might have encountered with code not matching the above:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I-Frame frameBorder attribute&lt;/strong&gt;&lt;br/&gt;
Are you trying to get rid of that nasty i-frame border in Internet Explorer 6 (IE6)? Tried CSS properties? Tried setting the frameBorder attribute? It turns out that when setting the frameBorder attribute, the name of the attribute is case sensitive. Using frameborder will not work correctly, but using frameBorder (with a capital B) will give the desired result. [Source: &lt;a href=&quot;http://www.visible-form.com/blog/createelement-and-events-and-iframe-borders/&quot;&gt;FlashApe&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS and I-Frame src attribute&lt;/strong&gt;&lt;br/&gt;
Is your page hosted on a secure domain (https instead of just http)? Is the dynamically created iframe causing the following error message in Internet Explorer?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This page contains both secure and nonsecure items. Do you want to display the nonsecure items?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some have suggested that changing the src attribute to point to a blank html page with no content is the solution, but that’s an extra http request on your page that is unnecessary. Others have suggested that that changing the src attribute to javascript:false works. It does, in fact, but writes the text ‘false’ to your iframe content. Others have suggested javascript:void(0) as your src attribute value [Source: &lt;a href=&quot;http://ewbi.blogs.com/develops/2004/07/ie_iframe_and_h.html&quot;&gt;ewbi.develops&lt;/a&gt;], but some Internet Explorer clients still have secure and nonsecure items alert popup. I have not figured out the factors that separate these Internet Explorer clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The correct solution is in face setting “javascript:false;document.write(“”);” as your src value, as I found in the &lt;a href=&quot;http://malsup.com/jquery/block/&quot;&gt;jQuery BlockUI&lt;/a&gt; plugin. This is a silver bullet fix that will avoid all the problems I have encountered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update Again&lt;/strong&gt;: I have revisited this problem and it looks like (as mentioned in the comments) there is a problem with the solution presented in the first update (infinite load). After researching some DOMContentLoaded solutions, I thought to try the “//:” source they were attempting for their deferred script source. Alas, it didn’t work. However, &lt;code&gt;javascript:&quot;&quot;;&lt;/code&gt; &lt;strong&gt;does work&lt;/strong&gt;, so the above solution has been modified. Keep in mind, the whole point of this solution is to &lt;strong&gt;avoid&lt;/strong&gt; an additional unnecessary HTTP request.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>JavaScript Code Coverage Tool <span class="widow">for Firebug</span></title>
		<link href="http://nebraskajs.com/javascript-code-coverage-tool-for-firebug/"/>
		<updated>2007-04-18T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/javascript-code-coverage-tool-for-firebug</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/firebugCodeCoverage/FirebugCodeCoverage-0.1.xpi&quot;&gt;&lt;strong&gt;Download FirebugCodeCoverage-0.1.xpi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, I’ve become interested in client side automated testing tools. When I found the &lt;a href=&quot;http://www.openqa.org/selenium-ide/&quot;&gt;Selenium&lt;/a&gt; plug-in for Firefox, I was blown away. I can record actions in my browser and play them back! No more manual testing of JavaScript code!&lt;/p&gt;

&lt;p&gt;Researching a little bit more about automated testing tools led to the discovery of a metric called ‘Code Coverage’, a statistic that gives you a percentage of how much of your code executed during a certain period of time (usually while your automated test was executing).&lt;/p&gt;

&lt;p&gt;Of course, I immediately thought of &lt;a href=&quot;http://www.getfirebug.com/&quot;&gt;Joe Hewitt’s Firebug&lt;/a&gt; extension for Firefox, which includes a feature for JavaScript Profiling. The Profile feature of Firebug was similar to a Function Entry Code Coverage report, so I decided to modify the feature and release an add-on for Firefox that showed (at a file level) a list of which functions executed and which functions did not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/04/coverage.gif&quot; alt=&quot;coverage.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, now, to test my JavaScript code coverage, I will write automated tests using the Selenium IDE plug-in for Firefox, hit the Code Coverage button in Firebug, and try to get my Code Coverage statistics in the upper 90%’s.&lt;/p&gt;

&lt;p&gt;Screenshot Example of running the tool at yahoo.com&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/04/coverage2.gif&quot; alt=&quot;Code Coverage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/Projects/firebugCodeCoverage/FirebugCodeCoverage-0.1.xpi&quot;&gt;&lt;strong&gt;Download FirebugCodeCoverage-0.1.xpi&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements (obviously)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla Firefox&lt;/li&gt;
&lt;li&gt;Firebug Extension for Mozilla Firefox&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does not include statistics on anonymous functions.&lt;/li&gt;
&lt;li&gt;Is limited to function (entry) code coverage, does not include other forms such as exit, statement, condition, or path code coverage. (Description: &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_coverage&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Is my first Firefox add-on, so there was a learning curve involved.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Future Improvements&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automated integration with Selenium IDE (one button to run tests and do code coverage)&lt;/li&gt;
&lt;li&gt;Better display of results, instead of a big kludge of function names&lt;/li&gt;
&lt;li&gt;Additional types of coverage, depending on what options are available from &lt;a href=&quot;http://www.xulplanet.com/references/xpcomref/ifaces/jsdIDebuggerService.html&quot;&gt;jsdIDebuggerService&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; After many requests and much self deliberation, I have decided not to update the plugin to work with newer versions of Firefox. Code Coverage doesn’t belong in the browser, it’s just the wrong place in the tool chain to have something like this. Code Coverage results need to be exportable, and the utility must be executable from the command line to use with unit tests and continuous integration.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Google Using YUI <span class="widow">Grids CSS</span></title>
		<link href="http://nebraskajs.com/google-using-yui-grids-css/"/>
		<updated>2007-04-05T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/google-using-yui-grids-css</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Head over to the &lt;a href=&quot;http://www.google.com/ig?hl=en&quot;&gt;Google Homepage&lt;/a&gt;. Log In using your Google Account. Make sure you’re at your &lt;a href=&quot;http://www.google.com/ig?hl=en&quot;&gt;Personalized Homepage&lt;/a&gt;. Take a look at the source CSS file &lt;a href=&quot;http://www.google.com/ig/f/tB22vfBbv0g/ig.css&quot;&gt;ig.css&lt;/a&gt; included on the page. There are a few peculiar lines of code that I recognized from another source, the Yahoo User Interface Grids CSS file. Yahoo has provided a set of standard CSS definitions under the BSD license that allow a developer to easily make fluid or fixed width column layouts. And on the Google Personalized Homepage, there are the following class definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#modules .yui-b&amp;amp;#123;position:static;display:block;margin:  1em ;float:none;width:auto;overflow:hidden;&amp;amp;#125;
.yui-gb .yui-u&amp;amp;#123;float:left;margin-left:2%;*margin-left:1.895%;width:32%;&amp;amp;#125;
.yui-gb div.first&amp;amp;#123;margin-left:;&amp;amp;#125;
#modules,.yui-gb&amp;amp;#123;zoom:1;&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code includes identical Class names taken from the &lt;a href=&quot;http://developer.yahoo.com/yui/grids/&quot;&gt;Yahoo User Interface library Grids CSS&lt;/a&gt; component. Here is the source in the &lt;a href=&quot;http://yui.yahooapis.com/2.2.0/build/grids/grids-min.css&quot;&gt;grids.css&lt;/a&gt; file from Yahoo (truncated for simplicity).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#yui-main .yui-b&amp;amp;#123;position:static;&amp;amp;#125;
.yui-t7 #yui-main .yui-b &amp;amp;#123;
    display:block;margin:  1em ;
&amp;amp;#125;
#yui-main .yui-b &amp;amp;#123;float:none;width:auto;&amp;amp;#125;
.yui-gb .yui-u&amp;amp;#123;float:left;margin-left:2%;*margin-left:1.895%;width:32%;&amp;amp;#125;
.yui-gb div.first&amp;amp;#123;margin-left:;&amp;amp;#125;
#bd,.yui-gb&amp;amp;#123;zoom:1;&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, it’s the same code, with a few minor differences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/04/yuigrids-google1.jpg&quot; alt=&quot;Screenshot proof&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interesting thing to note is that the YUI Grids CSS source code is licensed under a &lt;a href=&quot;http://developer.yahoo.com/yui/license.html&quot;&gt;BSD license&lt;/a&gt;, which includes the following provisions:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the&lt;br/&gt;
following disclaimer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The copyright notice they’re referring to is not included anywhere on the Google Personalized Homepage (and would seem to be a violation of the license). Now this may seem like a small infraction when we’re just talking about 4 lines of CSS code. But really, if they think the code is good enough that they will use it in such a prominent way and not write it from scratch using their own means, they should follow the licensing agreements stipulated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;br/&gt;
Google has added the BSD license statement and attribution to Yahoo in their CSS file (&lt;a href=&quot;http://www.google.com/ig/f/tB22vfBbv0g/ig.css&quot;&gt;ig.css&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* ===============BEGIN BSD LICENSED PORTION============= */
/*
Copyright (c) 2007, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.net/yui/license.txt
version: 2.2.0
*/
&amp;amp;nbsp;
#modules .yui-b &amp;amp;#123;
  position:static;
  display:block;
  margin:  1em ;
  float:none;
  width:auto;
  overflow:hidden;
&amp;amp;#125;
.yui-gb .yui-u &amp;amp;#123;
  float:left;
  margin-left:2%;
  *margin-left:1.895%;
  width:32%;
&amp;amp;#125;
.yui-gb div.first &amp;amp;#123;
  margin-left:;
&amp;amp;#125;
#modules,.yui-gb &amp;amp;#123;
  zoom:1;
&amp;amp;#125;
/* ===============END BSD LICENSED PORTION============= */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sorry to everyone visiting the page for the extra millisecond or two it will take to load these comments.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Problems with <span class="widow">YUI DataTable</span></title>
		<link href="http://nebraskajs.com/problems-with-yui-datatable/"/>
		<updated>2007-04-04T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/problems-with-yui-datatable</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;If you have read anything I’ve written before or know me at all, you know that my go-to JavaScript library is the one and only YUI. So obviously, when I was looking around for a Grid (or as YUI jargon goes, a DataTable), naturally I’m going to turn to YUI compatible components. First, I looked at Jack Slocum’s EXT, which has a nice looking Grid component that had a lot of features I wouldn’t need, but I didn’t really want to take a 0.5 MB hit for the limited feature set I was requiring. Adding the YUI DataTable would only tack on approximately 70-75 KB of additional download. So first, let me establish what I’m going for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Side Sorting: I don’t want it to do an XMLHttpRequest to sort the data, I want it to be done all clientside.&lt;/li&gt;
&lt;li&gt;Simple inline editing: Edit a field in the table right there on the table. I hadn’t established what types of data I would need to edit yet.&lt;/li&gt;
&lt;li&gt;Data Sources: load from a native JavaScript array or a XMLHttpRequest returning XML or JSON.&lt;/li&gt;
&lt;li&gt;Data Type Sort Algorithms: at the very minimum different sorting algorithms for numeric columns and string columns.&lt;/li&gt;
&lt;li&gt;Hierarchical Columns: group column headers together under a parent header.&lt;/li&gt;
&lt;li&gt;Easily customizable: must be able to customize the look and feel of the grid easily using CSS and not by editing Javascript.&lt;/li&gt;
&lt;li&gt;Header Freeze: If I have overflow on my table vertically causing a scroll bar, I want the table headers to remain shown at the top of the table while I scroll from top to bottom.&lt;/li&gt;
&lt;li&gt;Custom Cell Rendering: I have the data I’m loading, but I want to change how it looks when it is rendered to the table. Common for date formatting.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Luxury Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resizeable Columns: change the width of a column by dragging on the column header’s right border.&lt;/li&gt;
&lt;li&gt;Movable Columns: dragging a column will cause it to be moved on the table (TIBCO General Interface supports this).&lt;/li&gt;
&lt;li&gt;Custom Sort Algorithm: write my own algorithm to specify how data is sorted, or provide a way to do multi-column sorting (sort within one column, ties are sorted by another column, and so on).&lt;/li&gt;
&lt;li&gt;Dynamic Paging (don’t make me click numbered links, load the data automatically when I scroll) both on the client (dynamically insert only what I’m looking at and remove what I’ve scrolled past) and using the server (load more data through an XMLHttpRequest)&lt;/li&gt;
&lt;li&gt;Column Freeze: if the table is going to scroll horizontally, allow the developer to freeze a column or multiple columns so that they are shown when scrolling from left to right.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Evaluation of Options&lt;/strong&gt;: How does the YUI DataTable stack up?&lt;/p&gt;

&lt;p&gt;Basic Items: Client-Side Sorting, Simple inline editing, Data Sources, Data Type Sort Algorithms (&lt;em&gt;stock types not yet implemented out of the box&lt;/em&gt;), Hierarchical Columns, Header Freeze (&lt;em&gt;buggy&lt;/em&gt;), Custom Cell Rendering, and is easily customizable with CSS.&lt;/p&gt;

&lt;p&gt;Luxury Items: Resizeable Columns, Movable Columns (&lt;em&gt;not supported&lt;/em&gt;), Custom Sort Algorithms are supported (you can right your own Data Type Sort Algorithms with this feature), Dynamic Paging (manually, not dynamic), Column Freeze (&lt;em&gt;not supported&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any sort of fixed width table is going to be problematic. Putting a fixed width on the table causes the table headers to be misaligned with the associated table data. It’s a mess. The only viable option here is to let the table do it’s own width calculations. You can’t even set the column widths manually using the {width} variable as suggested when using a fixed width table.&lt;/li&gt;
&lt;li&gt;Data Type Sort Algorithms supposedly work from the column type, but this feature is documented in the code as being a TODO. All columns are sorted by a string datatype, meaning that if your column is numeric and you had the following rows: { 3, 7, 40 }, the sort result would be { 3, 40, 7 }.&lt;/li&gt;
&lt;li&gt;Header Freeze was problematic. Implementing the {scrollable=true} feature as recommended by the documentation causes the table headers to be misaligned with the data in a fixed width table.&lt;/li&gt;
&lt;li&gt;Paging uses the old school numbers method. This wasn’t a deal breaker, since I classified this feature as a luxury item.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Granted, the DataTable in it’s current form is a beta component, but that 0.5 MB ExtJS hit is looking pretty nice right now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minor Update&lt;/strong&gt;: to do a fixed width table that will overflow horizontally, this is the method you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div#dataTableId &amp;amp;#123; /* change this to whatever id you're using to hold the dataTable */
    width:520px; /* put in your own fixed width */
    overflow-x:auto;
    overflow-y:hidden;
&amp;amp;#125;
.yui-dt-headtext, .yui-dt-headcontainer &amp;amp;#123;
    position: static; /* without this declaration, the headers weren't horizontally scrolling with the data in IE6 */
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>YUI <span class="widow">Button Lite</span></title>
		<link href="http://nebraskajs.com/yui-button-lite/"/>
		<updated>2007-03-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/yui-button-lite</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Do you want the cool clean look of the new YUI Button component, but without all the seedy overhead of split buttons or button groups or components that shouldn’t even be pigeonholed into a button component to begin with? Keep in mind that this approach only works for the method called “&lt;a href=&quot;http://developer.yahoo.com/yui/button/#buildingfromtemplate&quot;&gt;Using pre-defined Button Control HTML.&lt;/a&gt;”&lt;/p&gt;

&lt;p&gt;Well, here’s the trick to do it.&lt;/p&gt;

&lt;p&gt;Create the button as the YUI Button Examples and Documentation say to do so. Include the Button CSS file button/assets/button.css. But just &lt;strong&gt;don’t&lt;/strong&gt; include the YUI JavaScript file button-beta[-min].js.&lt;/p&gt;

&lt;p&gt;Instead, use the following JavaScript to replace the functions for button coloring for hover, focus, and active.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.util.Event.addListener&amp;amp;#40; window, 'load', function&amp;amp;#40; e &amp;amp;#41;
&amp;amp;#123;
    var yuiButtons = YAHOO.util.Dom.getElementsByClassName&amp;amp;#40; 'yuibutton', 'span' &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'mouseover', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.addClass&amp;amp;#40; this, 'hover' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'mouseout', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.removeClass&amp;amp;#40; this, 'hover' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'mousedown', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.addClass&amp;amp;#40; this, 'active' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'mouseup', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.removeClass&amp;amp;#40; this, 'active' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'focus', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.addClass&amp;amp;#40; this, 'focus' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
    YAHOO.util.Event.addListener&amp;amp;#40; yuiButtons, 'blur', function&amp;amp;#40; e &amp;amp;#41;
    &amp;amp;#123;
        YAHOO.util.Dom.removeClass&amp;amp;#40; this, 'focus' &amp;amp;#41;;
    &amp;amp;#125; &amp;amp;#41;;
&amp;amp;#125; &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re just using the standard buttons anyway, you’re going to see a speed improvement in performance on hover color changes.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Logical XOR <span class="widow">in JavaScript</span></title>
		<link href="http://nebraskajs.com/logical-xor-in-javascript/"/>
		<updated>2007-03-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/logical-xor-in-javascript</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Of course there wouldn’t be an XOR function in JavaScript when I needed one. So I googled around and found an implementation at &lt;a href=&quot;http://www.howtocreate.co.uk/xor.html&quot;&gt;How To Create&lt;/a&gt;. But it only took two arguments. So I rolled my own supporting a variable number of arguments. In my personal stuff, I’ve put it into a Math library under the YAHOO namespace, and you can decide if you want to do that on your own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function xor&amp;amp;#40;&amp;amp;#41;
&amp;amp;#123;
    var b = false;
    for&amp;amp;#40; var j = ; j &amp;lt; arguments.length; j   &amp;amp;#41;
    &amp;amp;#123;
        if&amp;amp;#40; arguments&amp;amp;#91; j &amp;amp;#93; &amp;amp;&amp;amp; !b &amp;amp;#41; b = true;
        else if&amp;amp;#40; arguments&amp;amp;#91; j &amp;amp;#93; &amp;amp;&amp;amp; b &amp;amp;#41; return false;
    &amp;amp;#125;
    return b;
&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xor&amp;amp;#40; false, true &amp;amp;#41;; // true
xor&amp;amp;#40; true, true &amp;amp;#41;; // false
xor&amp;amp;#40; false, false, true, true, true, false, true, false &amp;amp;#41;; // false
xor&amp;amp;#40; false, false, false, true, false, false, false, false &amp;amp;#41;; // true
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design Example: <span class="widow">Hierarchical Options</span></title>
		<link href="http://nebraskajs.com/conservative-design-example-hierarchical-options/"/>
		<updated>2007-03-23T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/conservative-design-example-hierarchical-options</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Welcome, one and all, to the second installment of actual code examples for the Conservative Design series. The decision was made (by me) to rename the component in question from the original Hierarchical Select to Hierarchical Options, due to the fact that the hierarchy can consist of any multiple option component, and is not limited to just a select. And to this face, this particular component was documented in the original post entitled &lt;a href=&quot;http://www.zachleat.com/web/2007/02/22/conservative-design-hierarchical-select-boxes/&quot;&gt;Conservative Design: Hierarchical Select Boxes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[![Hierarchical Options][3]][3]&lt;br/&gt;
Click the image above to go to the example.&lt;/p&gt;

&lt;p&gt;Notes on the example: The Tree structure is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primary

&lt;ul&gt;
&lt;li&gt;Secondary

&lt;ul&gt;
&lt;li&gt;Tertiary

&lt;ul&gt;
&lt;li&gt;Quaternary

&lt;ul&gt;
&lt;li&gt;Quinary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2nd Tertiary (is a static element that doesn’t hide)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So without further adieu or out of place french, what do we have? 3 out of 4 requirements and 1 of 2 luxury items.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handles any number of select elements in a linear or tree (luxury item) like structure.&lt;/li&gt;
&lt;li&gt;Child select elements are optional based on parent selection. Can hide entire div element or display a message stating no options are available.&lt;/li&gt;
&lt;li&gt;Compliant with the Reset button.&lt;/li&gt;
&lt;li&gt;Right now only loads from standard HTML markup (not yet from JavaScript or JSON or an XMLHTTPRequest)&lt;/li&gt;
&lt;li&gt;Only supports Select elements for now, in the future should be abstracted to support Checkbox Lists or any multiple option component.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Outstanding Bugs&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opera button doesn’t reset properly with Reset Button&lt;/li&gt;
&lt;li&gt;Clicking off of the default and then back onto the default has the original selections downstream (but doesn’t propagate more than one level)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Fundamental Problem with <span class="widow">YUI Button</span></title>
		<link href="http://nebraskajs.com/fundamental-problem-with-yui-button/"/>
		<updated>2007-03-22T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/fundamental-problem-with-yui-button</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Buttons! Let’s make them obvious and good looking. Let’s make them have inline images and cool hover colors. Let’s make them three dimensional. Especially so, let’s make them from markup so that we don’t take functionality away from technology disabled users.&lt;/p&gt;

&lt;p&gt;Ruh roh Shaggy! The &lt;a href=&quot;http://yuiblog.com/blog/2007/02/20/yui-220-released/&quot;&gt;YUI Button&lt;/a&gt; component is misbehaving. It is taking away the submit event fired when the button is clicked and firing the submit() function programmatically.&lt;/p&gt;

&lt;p&gt;So, how do you fire the listener functions that are waiting for the submit event to fire, while at the same time using the sleek buttons provided by YUI?&lt;/p&gt;

&lt;p&gt;Try this plug and play function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.widget.Button.prototype._submitForm = function&amp;amp;#40;&amp;amp;#41; &amp;amp;#123;
    var oForm = this.getForm&amp;amp;#40;&amp;amp;#41;;
    if&amp;amp;#40;oForm&amp;amp;#41; &amp;amp;#123;
        YAHOO.widget.Button.addHiddenFieldsToForm&amp;amp;#40;oForm&amp;amp;#41;;
        this.createHiddenField&amp;amp;#40;&amp;amp;#41;;
        var listeners = YAHOO.util.Event.getListeners&amp;amp;#40; oForm, 'submit' &amp;amp;#41;;
        var submitForm = true;
        for&amp;amp;#40; var j = ; j &amp;lt; listeners.length; j   &amp;amp;#41;
        &amp;amp;#123;
            if&amp;amp;#40; listeners&amp;amp;#91; j &amp;amp;#93;.fn.apply&amp;amp;#40; listeners&amp;amp;#91; j &amp;amp;#93;.adjust &amp;amp;#41; == false &amp;amp;#41; submitForm = false;
        &amp;amp;#125;
        if&amp;amp;#40; submitForm &amp;amp;#41; oForm.submit&amp;amp;#40;&amp;amp;#41;;
    &amp;amp;#125;
&amp;amp;#125;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Make sure you include this after you’ve loaded the YUI Button javascript file.) There are a few caveats to this approach.&lt;/p&gt;

&lt;p&gt;First, you’ll have to remove any references to the event object inside your listener function (most of the examples use the variable e). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.util.Event.addListener&amp;amp;#40; myForm, 'submit', function&amp;amp;#40; e &amp;amp;#41; &amp;amp;#123;&amp;amp;#125; &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside my submit listener functions, I just check to make sure e is not null prior to using it.&lt;/p&gt;

&lt;p&gt;Second, if you wish to cancel the submit, you’ll have to return false inside of your submit listener function.&lt;/p&gt;

&lt;p&gt;A sleeker approach would be to revert back to having the button fire the ‘submit’ event. But I’ll leave that as an exercise to the original developer, Mr. Todd Kloots (props).&lt;/p&gt;

&lt;p&gt;Update: After a little more code searching, it would seem like the submit event is never being canceled by the YUI Button javascript. However, when you comment out the line that that fires the submit programmatically (oForm.submit();), the form still isn’t submitted. I’ll have to research a bit more.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>OMG SOA</title>
		<link href="http://nebraskajs.com/omg-soa/"/>
		<updated>2007-03-12T00:00:00-05:00</updated>
		<id>http://zachleat.com/web/omg-soa</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;In today’s Web 2.0 world of &lt;strong&gt;ultimate abstraction&lt;/strong&gt;, you don’t need to be bothered with the rudimentary low level programming functions of everyday languages. Client Side implementation of JavaScript functions across the browser landscape is unreliable at best, so why should you trust it for anything? So using forward thinking and futureproof compatibility design, naturally we will turn to the next great phase of web’s evolutionary growth, the Service Oriented Architecture (SOA). Using SOAP envelopes to package our function calls, I will now demo what is certainly to be the future of web development, and maybe, all programming endeavors. I call it: &lt;strong&gt;OMG SOA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://soa.omg.org/&quot;&gt;&lt;img src=&quot;http://soa.omg.org/&quot; alt=&quot;OMG SOA&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you programming a for loop? How do you know that the client will increment your integers through the loop correctly? That’s why you need to call our &lt;strong&gt;Incrementer Web Service&lt;/strong&gt; to increment your loop counter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Service Calls&lt;/em&gt;:&lt;br/&gt;
Increment 0: &lt;br/&gt;
Increment 3920: &lt;br/&gt;
Increment 98:&lt;/p&gt;

&lt;p&gt;Are you programming an array that needs to be magically combined into a string? Do you think you can reliably count on Internet Explorer to perform the function in the same way as your Firefox’s, or your Opera’s, or even your (God Forbid) Safari’s??? No, dare I say it, no.&lt;/p&gt;

&lt;p&gt;But don’t fear. We are here to comfort your pain, with a shot in the arm of standarditity. Welcome the &lt;strong&gt;String Concatenation Web Service&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Service Call&lt;/em&gt;:&lt;br/&gt;
Concatenate string1 with string2 with string3:&lt;/p&gt;

&lt;p&gt;And finally, are you feeling lost in this sea of amorphous web technologies mixing and mashing together to form the gelatinous blob of money and media whores we know as Web 2.0? Don’t worry, OMG SOA is here for you again to solve all of your identity crisis problems. Ask our &lt;strong&gt;Are you Web 2.0 Web Service&lt;/strong&gt; with your URL and the magic 8 ball service will answer your question.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Service Call&lt;/em&gt;:&lt;br/&gt;
Is www.zachleat.com Web 2.0?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: apparently there is already a company called the Object Management Group with a &lt;a href=&quot;http://soa.omg.org/&quot;&gt;website about SOA&lt;/a&gt;. Whoops?&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design Example: Multiple <span class="widow">Option List</span></title>
		<link href="http://nebraskajs.com/conservative-design-example-multiple-option-list/"/>
		<updated>2007-03-10T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/conservative-design-example-multiple-option-list</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;All of the posts in the Conservative Design series so far have been brainstorming of design patterns. But how about some real life examples, some actual code? Let’s dive in.&lt;/p&gt;

&lt;p&gt;The first example I decided to tackle was the &lt;a href=&quot;http://www.zachleat.com/web/2007/02/26/conservative-design-option-list/&quot;&gt;Option List&lt;/a&gt;, specifically the variant that allows multiple options to be selected. Let me start out by saying that I didn’t abstract out the type of source element that you could put into this example, I only programmed the element for a  element. For the impatient, let’s just start with the result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/optionlist_multiple_real1.gif&quot;&gt;&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/optionlist_multiple_real1.gif&quot; alt=&quot;Multiple Option List Real Example&quot; /&gt;&lt;/a&gt;&lt;br/&gt;
Click the image to see the actual example.&lt;/p&gt;

&lt;p&gt;This element was constructed using the YUI Library and Jack Slocum’s DomQuery selector class, as well as using the new form validation CSS and JavaScript code I’m currently developing entitled ‘&lt;strong&gt;Valdi&lt;/strong&gt;‘.&lt;/p&gt;

&lt;p&gt;It includes 3 of the 4 of the minimum features required as set in the original specification.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: there is no submit button, but if there were, it would validate if the form has been entry has a value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quick Links&lt;/strong&gt;: Select All, Select None, and Sort the Options&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customizable Options&lt;/strong&gt;: Allow the user to add their own options for selection.&lt;/li&gt;
&lt;li&gt;Does &lt;strong&gt;not &lt;/strong&gt;abstract option types (checkbox, etc)&lt;/li&gt;
&lt;li&gt;Keyboard Support: CTRL A inside of the select box selects all options, Delete or Backspace removes the selected options, Enter key inside Add input field automatically adds option to the select.&lt;/li&gt;
&lt;li&gt;Can be &lt;em&gt;easily&lt;/em&gt; transformed into a Single Option List by removing the multiple=”multiple” option in the html.&lt;/li&gt;
&lt;li&gt;Sort will toggle between Ascending and Descending and maintain the selected options&lt;/li&gt;
&lt;li&gt;When the number of options outweighs the select size, the number of options is displayed next to the Add button. Try adding 5 or more options to the select list.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Screenshots for the Lazy People:&lt;/p&gt;

&lt;p&gt;Multiple Options are Added&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/optionlist_multiple_real1.gif&quot; alt=&quot;Multiple Option List Real Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Validation when an Option is not selected:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/optionlist_multiple_real21.gif&quot; alt=&quot;Multiple Option List Real Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success, they selected something and submitted:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/optionlist_multiple_real31.gif&quot; alt=&quot;Multiple Option List Real Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Watch for another separate article about Valdi later on.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design: Command <span class="widow">Line Interface</span></title>
		<link href="http://nebraskajs.com/conservative-design-command-line-interface/"/>
		<updated>2007-03-07T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/conservative-design-command-line-interface</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This is another post in the series entitled &lt;a href=&quot;http://www.zachleat.com/web/2007/02/22/conservative-design-patterns-for-form-elements/&quot;&gt;Conservative Design Patterns for Form Elements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The argument has existed since the dawn of the Graphical User Interface (GUI). Which is better, keyboard-exclusive Command Line or mouse-intensive GUI’s? As more enterprise architectures are moving from terminals to web interfaces for their products, and as time is moving forward with the everyman user desiring an interface that looks pretty and easy to use, we’re seeing a drastic reduction in the utilization of the keyboard.&lt;/p&gt;

&lt;p&gt;But with the exception of form input, we’ve almost completely moved away from the keyboard as a means to execute functions and navigation. I’m proposing that we bring back the power of the keyboard. Obviously we can’t get rid of the GUI altogether, but instead complement it with a powerful command line.&lt;/p&gt;

&lt;p&gt;This component could exist as a standalone command line interface component or as a supplement to any search bar your page may contain. The basic premise of the Command Line Interface component is to provide a standardized method of navigating your website using nothing but the keyboard. It could fulfill more complex operations, but the scope of this article will just cover command line rudimentary navigation.&lt;/p&gt;

&lt;p&gt;Screen Printing: Fake Command Line Example&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/commandline.gif&quot; alt=&quot;Command Line&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screen Printing: Fake Command Line Example of AutoComplete Capabilities&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/03/commandline_f.gif&quot; alt=&quot;Command Line AutoComplete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum Feature Set&lt;/strong&gt;: (&lt;a href=&quot;http://jfulton.org/?page=Software&amp;amp;file=gui.php&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autocomplete: must be able to finish the current command being typed by presenting a list of available options to the user. Must be compatible with keyboard navigation:

&lt;ul&gt;
&lt;li&gt;UP and DOWN arrows to select from list&lt;/li&gt;
&lt;li&gt;TAB autocompletes to first option&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Markup Scanning for Applicable Links: scan the current dom for  tags with a href element that could be used in autocomplete.&lt;/li&gt;
&lt;li&gt;Quick commands: markup options (custom attributes?) to allow the programmer to define commands in the html. These are one to three character combinations that execute a link or event.&lt;/li&gt;
&lt;li&gt;Standardized Command Set: standardized hot key to force focus to the command line. Also, for navigation options that are standardized between every website, have a standard set of commands that will execute with the same behavior, regardless of navigation implementation (Home [H], Login [L], Register [R], Forgotten Password [FP], Contact Us Page [C], Privacy Policy [PRIV], Terms of Service [TOS])&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Luxury Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markup Scanning for Events: sometimes navigation is executed through event handling. Scan the events assigned to nodes for any available options that could be executed in navigation.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limitations on any sort of mouse-required interface: drag and drop&lt;/li&gt;
&lt;li&gt;Interaction with flash?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Idea Credits&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.softpanorama.org/OFM/gui_vs_command_line.shtml&quot;&gt;GUI vs Command line interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.humanized.com/weblog/2007/02/24/your_grandmothers_command_line_the_command_line_co/&quot;&gt;Command Line for the Common Man: The Command Line Comeback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Namespaces in <span class="widow">Ext DomQuery</span></title>
		<link href="http://nebraskajs.com/namespaces-in-ext-domquery/"/>
		<updated>2007-03-06T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/namespaces-in-ext-domquery</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Do you want to use &lt;a href=&quot;http://unspace.ca/discover/attributes/&quot;&gt;custom attributes&lt;/a&gt; in your XHTML? Do you use the YUI Library and Jack Slocum’s wonderful &lt;a href=&quot;http://www.jackslocum.com/blog/2007/01/11/domquery-css-selector-basic-xpath-implementation-with-benchmarks/&quot;&gt;DomQuery selector engine&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If you want to select attribute nodes with a namespace in your XHTML, DomQuery does not support namespaces as an option to do so. But by adding a small snippet of code to DomQuery, we can make it do so.&lt;/p&gt;

&lt;p&gt;As a standalone snippet executed after DomQuery is loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ext.DomQuery.matchers.push&amp;amp;#40; &amp;amp;#123;
    re: /^(?:([[{])(?:@)?([w-] (?::[w-] ))s?(?:(=|.=)s?['&quot;]?(.*?)[&quot;']?)?[]}])/,
    select: 'n = byAttribute(n, &quot;{2}&quot;, &quot;{4}&quot;, &quot;{3}&quot;, &quot;{1}&quot;);'
&amp;amp;#125; &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt; by adding an array entry into the DomQuery code matchers array (paste &lt;em&gt;after&lt;/em&gt; line 479 of the &lt;a href=&quot;http://www.yui-ext.com/deploy/yui-ext.0.40-alpha/source/DomQuery.js&quot;&gt;17 January 2007 2:26:32 PM version&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;,&amp;amp;#123;
    re: /^(?:([[{])(?:@)?([w-] (?::[w-] ))s?(?:(=|.=)s?['&quot;]?(.*?)[&quot;']?)?[]}])/,
    select: 'n = byAttribute(n, &quot;{2}&quot;, &quot;{4}&quot;, &quot;{3}&quot;, &quot;{1}&quot;);'
&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not modify the existing matcher for attribute selection because I didn’t want to modify the speed of the existing code for non-namespaced attributes. So by appending another entry to the end of the array, it’ll be used as a last resort if the other entries aren’t matched.&lt;/p&gt;

&lt;p&gt;This approach relies on the assumption that when selecting an attribute with getAttribute, the browser interprets any namespace automatically: getAttribute(‘myNamespace:myAttributeName’), as documented by the &lt;a href=&quot;http://blogger.xs4all.nl/peterned/archive/2005/12/11/70033.aspx&quot;&gt;peterned weblog&lt;/a&gt;. This was tested in Firefox 2 and IE 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ext.query&amp;amp;#40; '#test-data span[myNameSpace:myAttribute=myValue]' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on the following DOM&lt;/p&gt;

&lt;p&gt;Other notes regarding DomQuery:&lt;/p&gt;

&lt;p&gt;To select a node with a non-empty attribute value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ext.query&amp;amp;#40; '#test-data span[myNameSpace:myAttribute]' &amp;amp;#41;;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
	<entry>
		<title>Beaten to the <span class="widow">Spiked Punch</span></title>
		<link href="http://nebraskajs.com/beaten-to-the-spiked-punch/"/>
		<updated>2007-03-03T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/beaten-to-the-spiked-punch</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;No matter what you think, &lt;a href=&quot;http://hyku.com/blog/archives/000786.html&quot;&gt;someone else is thinking the same thing&lt;/a&gt;. I guess this guy might just be living with my same brain waves but a year or so earlier. It has never been a better time to just stop thinking.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design: <span class="widow">Option List</span></title>
		<link href="http://nebraskajs.com/conservative-design-option-list/"/>
		<updated>2007-02-26T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/conservative-design-option-list</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This is another post in the series entitled &lt;a href=&quot;http://www.zachleat.com/web/2007/02/22/conservative-design-patterns-for-form-elements/&quot;&gt;Conservative Design Patterns for Form Elements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we’ll look at a web component that is almost ubiquitous among user interfaces today, the Option List. The Option List can take any one of the following three forms.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Multiple Selections: User can select any number of the options presented to them. Types: &lt;strong&gt;Checkbox Group&lt;/strong&gt;, &lt;strong&gt;Multiple Select Element&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Single Selection: User can select none or one of the options available. Types: &lt;strong&gt;Radio Group&lt;/strong&gt;, &lt;strong&gt;Select Element&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User Input List: User types in the options that they want to use. All inputs are marked as selected. Types: &lt;strong&gt;Group of Textboxes&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;We’ll describe each of these variants separately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple Selections&lt;/strong&gt;:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/02/optionlist_multiple1.gif&quot; alt=&quot;Option List Multiple Selections&quot; /&gt;&lt;br/&gt;
&lt;strong&gt;Minimum Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validation: The user can select at least one, an integer range of options, or any number of the options presented.&lt;/li&gt;
&lt;li&gt;Quick Links: optional links to select all options, clear the options, and toggle the options to the opposite value of what they currently hold.&lt;/li&gt;
&lt;li&gt;Customizable Values: optionally allow the user to add their own options (one, an integer range, or many) to the list.&lt;/li&gt;
&lt;li&gt;Other Variants: Any Select Element, as described in the original post.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Single Selection&lt;/strong&gt;:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/02/optionlist_single1.gif&quot; alt=&quot;Option List Single Selection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validation: The user can select at most one of the options presented.&lt;/li&gt;
&lt;li&gt;Quick Link: optional link to clear the options&lt;/li&gt;
&lt;li&gt;Customizable Value: optionally allow the user to add their own option (only one is required, since only one can be selected).&lt;/li&gt;
&lt;li&gt;Other Variants: Any Select1 Element, as described in the original post.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;User Input List&lt;/strong&gt;:&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/02/optionlist_all4.gif&quot; alt=&quot;Option List User Input&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum Feature Set&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validation: The user must have at least one of the text fields with a value (doesn’t matter which one). Or the user must have an integer range number of fields with values.&lt;/li&gt;
&lt;li&gt;Quick Link: optional link next to an element to remove that element from the list (not clear it, remove it)&lt;/li&gt;
&lt;li&gt;Customizable Values: optionally allow the user to add their own options (up to an integer limit).&lt;/li&gt;
&lt;li&gt;Other Variants: Any List of InputX Elements, as described in the original post (could be passwords or textareas).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The images above for all three component types show a textbox for the addition of another option, but this should also allow customization to allow any type of (Select or InputX) element for the addition of another option.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design Patterns for <span class="widow">Form Elements</span></title>
		<link href="http://nebraskajs.com/conservative-design-patterns-for-form-elements/"/>
		<updated>2007-02-22T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/conservative-design-patterns-for-form-elements</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Have you ever been to a web site that looks as though it has been built exclusively using pre-made bulky widgets cookie cuttered right onto the page? Lovely grid components, sweet over-featured WYSIWYG editors, maybe a Google or Yahoo map thrown in on the page for good measure. Conformist web sites using the conditioning forced upon them by time, executive, or work-ethic based constraints. The widgets on these websites either seem too bulky, reinventing the wheel with avant-garde user interaction for a confusing user experience, or they are just too lightweight to justify using at all.&lt;/p&gt;

&lt;p&gt;What I’m proposing is a standard set of Design Patterns for form input, as an extension to already existing HTML form elements. By describing the best practices for certain use cases of input, we can form a set of building blocks that can be used to enhance existing forms, instead of replacing them with totally new ways of user interaction.&lt;/p&gt;

&lt;p&gt;So keeping away from &lt;a href=&quot;http://www.adaptivepath.com/publications/essays/archives/000385.php&quot;&gt;the spirit of inventing names for things that are already being done&lt;/a&gt;, I won’t be trivializing this idea with a catch phrase. Instead I hope you will realize the value of &lt;strong&gt;BUILDING BLOCKS&lt;/strong&gt; over &lt;strong&gt;cookie cutters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These components be used to handle the tween cases of GUI development, where the interaction doesn’t warrant a full blown widget, but requires more than a standard HTML form element. I would be excited to see work done at this level of GUI development inside of the JavaScript libraries that are out there instead of work on the overblown “Widget Set” that seems to be the buzz in the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spectrum of GUI Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Raw HTML Inputs (Text, Password, Select…) -&gt; Smidgets -&gt; Full Blown Widgets (Editable Grid, Rich Text Editor)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legend&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toggle Option On or Off (Toggle)&lt;/li&gt;
&lt;li&gt;Select 0-1 Options From a List (Select1)&lt;/li&gt;
&lt;li&gt;Select 0 Options From a List (Select )&lt;/li&gt;
&lt;li&gt;Input 0 Characters into an Element (InputX)&lt;/li&gt;
&lt;li&gt;Input is obfuscated to prevent from being read (Obfuscated)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To describe what we want, let’s first see what we have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Existing HTML Elements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buttons (clicking performs a data altering action or form submission action)

&lt;ul&gt;
&lt;li&gt;Submit&lt;/li&gt;
&lt;li&gt;Reset&lt;/li&gt;
&lt;li&gt;Push (without attached behavior)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checkbox (Toggle)&lt;/li&gt;
&lt;li&gt;Checkbox Group (Select )&lt;/li&gt;
&lt;li&gt;Radio Group (Select1)&lt;/li&gt;
&lt;li&gt;Select Single (Select1)&lt;/li&gt;
&lt;li&gt;Select Multiple (Select )&lt;/li&gt;
&lt;li&gt;Text (InputX)&lt;/li&gt;
&lt;li&gt;Textarea (&lt;em&gt;antiquated due to CSS styled word wrapping multi line Text input&lt;/em&gt;) (InputX)&lt;/li&gt;
&lt;li&gt;Password (InputX, Obfuscated)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And because this is going to be a series, I’ll continue with my first case of a Conservative Design Form Element in a new post.&lt;/p&gt;

&lt;p&gt;Let me just reiterate that I do hope you take the ideas for these GUI components and develop them in your favorite JavaScript library. The purpose of this is to come up with a set of feature-based standards so that people don’t have to keep developing their own components over and over again. Do you have an idea for a feature that you think should be included in the standard or luxury feature set of a component? Post it in the comments of that component blog post and I’ll certainly modify the post with your suggestions.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Conservative Design: <span class="widow">Hierarchical Select</span></title>
		<link href="http://nebraskajs.com/conservative-design-hierarchical-select-boxes/"/>
		<updated>2007-02-22T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/conservative-design-hierarchical-select-boxes</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This is a post in a series entitled &lt;a href=&quot;http://www.zachleat.com/web/2007/02/22/conservative-design-patterns-for-form-elements/&quot;&gt;Conservative Design Patterns for Form Elements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, I’ll start off with an easy web component that a lot of you have probably already had some experience with. But, strangely enough, it is not included in any of the JavaScript libraries that are out there, that I’ve seen. If you know of one, go ahead and post it in the comments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hierarchical Select Boxes&lt;/strong&gt; (sometimes called Dynamic Select Boxes if you’re doing a web search)&lt;/p&gt;

&lt;p&gt;Behavior: 2 or more select boxes working in parallel, where selection of an option in a parent dynamically adjusts the options of the child.&lt;/p&gt;

&lt;p&gt;Screenshot (Prior to any selection):&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/02/hierselects1.jpg&quot; alt=&quot;Prior to any selection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screenshot (After an option is chosen in the first select box):&lt;br/&gt;
&lt;img src=&quot;http://www.zachleat.com/web/wp-content/uploads/2007/02/hierselects2.jpg&quot; alt=&quot;After a selection is made&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Minimum Requirements for Acceptable Feature Set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Must be able to handle any (reasonable) number of select boxes in a linear structure: parent elements only have one child.&lt;/li&gt;
&lt;li&gt;Child select elements can be optional depending on parent selection. Maybe a continent doesn’t have any countries, so don’t display a child select element. It would be nice to have a visual indicator showing whether or not a parent option had children (triangle, folder(?), arrow or other customizable icon).&lt;/li&gt;
&lt;li&gt;Must have functionality that allows it to be reset with the form reset button, as &lt;a href=&quot;http://www.mattkruse.com/javascript/dynamicoptionlist/&quot;&gt;Matt Kruse has done (Example 3)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Load options in child select’s dynamically from multiple data sources (describe in &lt;a href=&quot;http://www.bobbyvandersluis.com/articles/unobtrusivedynamicselect.php&quot;&gt;raw HTML code&lt;/a&gt;, local JS file, remote JSON object or XML file using an XMLHTTPRequest)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Luxury Feature Set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Must be able to nest select elements in a tree structure: selecting an option in a parent element could modify 2 child select elements.&lt;/li&gt;
&lt;li&gt;Could be able to modify the options for any element that displays options (Select1 or Select as described in the &lt;a href=&quot;/web/2007/02/22/conservative-design-patterns-for-form-elements/&quot;&gt;Conservative Design Post&lt;/a&gt;: Checkbox Group, Radio Group, Select Single or Multiple)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
	<entry>
		<title>Technorati Spider</title>
		<link href="http://nebraskajs.com/technorati-spider/"/>
		<updated>2007-02-21T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/technorati-spider</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;This is a link to my brand baby spanking new &lt;a href=&quot;http://technorati.com/claim/p4ycz9yef8&quot;&gt;Technorati Profile&lt;/a&gt;. Revel.&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Screen Printing, Fake Interfaces <span class="widow">Part 1</span></title>
		<link href="http://nebraskajs.com/screen-printing-a-dreaming-exercise/"/>
		<updated>2007-02-20T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/screen-printing-a-dreaming-exercise</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;Why not error messages that tell you when your internet has been disconnected? How about one that tells you when you’ve been logged out (maybe in another window) and allow you to reauthenticate to the server right there? I don’t believe there are any architecture problems with these two ideas.&lt;/p&gt;

&lt;p&gt;[![Error Messages][2]][2]&lt;/p&gt;
</content>
 </entry>
 
	<entry>
		<title>Checklist for <span class="widow">Web Applications</span></title>
		<link href="http://nebraskajs.com/checklist-for-web-applications/"/>
		<updated>2007-02-20T00:00:00-06:00</updated>
		<id>http://zachleat.com/web/checklist-for-web-applications</id>
		<content type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;As the first post in this new category of web development, I’ve decided to keep it simple and post the different components and architecture considerations a developer must consider when making a new application, especially in today’s world of in-page dynamic interaction and the complications that has put on the problems that were considered solved in yesterday’s page level world. Mostly this is a place to collect my thoughts on this subject.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic Print Styling&lt;/strong&gt;: Is the page going to be able to be printed properly without a “Printer friendly” link? CSS style sheets can be used to modify the output of the page using the @media print declaration. Are the widget components you’re using in your JavaScript library able to support easy printing?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser History Management&lt;/strong&gt;: Will your application support the back button, especially with the increased usage of AJAX interactions on a full page application. Don’t use XMLHTTPRequest’s to fetch the entire content of a page. Just redirect them to a new page when you are only saving the header and the footer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graded Browser Support&lt;/strong&gt;: support of the web browsers with a large percentage of market share using the ideas put forth by Nate Koechley in his Graded Browser Support descriptions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bookmark and Permanent Linking&lt;/strong&gt;: is the behavior of your JavaScript application changing how data is being displayed? You’d better modify the URL to allow the user to bookmark link straight to the same view.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Compression&lt;/strong&gt;: Minimize your CSS and JavaScript for delivery. GZip your CSS and JavaScript for browsers that support it (most all modern browsers do).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Caching Mechanisms&lt;/strong&gt;: server side caching of data is necessary for high volume traffic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internationalization&lt;/strong&gt; (i18n): will your application be viewed in other countries by non-English speakers? Are your dates in an international format? How about 24 hour time formats? Time zones? Do they observe Daylight Saving Time?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Logging&lt;/strong&gt;: Both server side and client side (using AJAX to log JavaScript errors can be very helpful)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Recommended Luxury Items&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support mobile devices&lt;/strong&gt;: How will your application look on a Blackberry? How does it render in Opera Mini?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline Mode&lt;/strong&gt;: Add and modify data offline, with the ability to automatically synchronize changes when an internet connection becomes available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exportable data&lt;/strong&gt;: PDF, Excel, RSS, even offline static HTML. JavaScript can sometimes give unknown results when using the browser to save the page locally. Make sure this is supported. Don’t force your users to save screenshots.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Enterprise Client Side Widgets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Grid&lt;/strong&gt;: businesses just love data grids. Nothing like a nice standard set of cookie cutter constraints to force upon your data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Charts and Graphs&lt;/strong&gt;: metrics are important. Existing client side JavaScript charting packages can be limited when it comes to printing, or even saving the chart as an image file. These are important.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are many facets that a developer must consider when designing a new application. I hope this list will at least make you think about some things that you may not have considered before. Thanks for reading.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>